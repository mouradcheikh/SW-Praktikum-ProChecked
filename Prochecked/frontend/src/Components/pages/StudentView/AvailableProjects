import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';
import { withRouter } from 'react-router-dom';
import  {AppApi}  from '../../../AppApi';
import ContextErrorMessage from '../../dialogs/ContextErrorMessage';
import LoadingProgress from '../../dialogs/LoadingProgress';
import AvailableProjectsRegister from 'AvailableProjectsRegister';
import Paper from '@material-ui/core/Paper';

/**
 * Controlls a list of AvailableProjectsRegisters to create a accordion for each project.
 *
 * @see See [AvailableProjectsRegister](#AvailableProjectsRegister)
 *
 */
class AvailableProjects extends Component {

  constructor(props) {
    super(props);


    this.state = {
      projectsAccepted: [],
      error: null,
      loadingInProgress: false,
    };
  }

  getProjectsByStateNew = () => {
      var api = AppApi.getAPI()
      api.getProjectsByState(1) //evtl. Objekt von API vorher anlegen
        .then(projectBOs =>
          this.setState({
          projectsNew: projectBOs,
          loadingInProgress: false,   // disable loading indicator
          error: null
        })).catch(e =>
          this.setState({             // Reset state with error from catch
            projectsNew: [],
            loadingInProgress: false, // disable loading indicator
            error: e
          })
        );

    // set loading to true
    this.setState({
      loadingInProgress: true,
      error: null
    });
  }

  getProjectsByStateAccepted = () => {
    // console.log("vor fetch")
      var api = AppApi.getAPI()
      api.getProjectsByState(3) //evtl. Objekt von API vorher anlegen
        .then(projectBOs =>
          this.setState({
          projectsAccepted: projectBOs,
          loadingInProgress: false,   // disable loading indicator
          error: null
        })).catch(e =>
          this.setState({             // Reset state with error from catch
            projectsAccepted: [],
            loadingInProgress: false, // disable loading indicator
            error: e
          })
        );

    // set loading to true
    this.setState({
      loadingInProgress: true,
      error: null
    });
  }




  componentDidMount() {
    // console.log("gerendert")
    this.getProjectsByStateAccepted();
  }

   /** Lifecycle method, which is called when the component was updated */
   componentDidUpdate(prevProps) {
    
    if ((this.props.show !== prevProps.show)) { 
    this.getProjectsByStateAccepted();
      }
    }

  /** Renders the component */
  render() {
    const { classes } = this.props;
    const { filteredProjects, projectsNew, projectsAccepted, projectsDeclined,  projectFilter, expandedProjectID, loadingInProgress, error, showProjectForm } = this.state;

    return (
      <div className={classes.root}>
        <div className={classes.root}>
      <Grid container spacing={3}>
        <Grid item xs={6}>
            
        <h1>Verf√ºgbare Projekte</h1>
          <Paper className={classes.paper}>
          {
          // Show the list of AvailableProjectsRegister components
          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters
          projectsAccepted.map(project =>
            <AvailableProjectsRegister key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}
              onExpandedStateChange={this.onExpandedStateChange}
              onProjectDeleted={this.projectDeleted}
            />)
        }
        <LoadingProgress show={loadingInProgress} />
        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByStateAccepted} />
          </Paper>
        </Grid>
       </Grid>
        </div>
      </div>
    );
  }
}


/** Component specific styles */
const styles = theme => ({
  root: {
    width: '100%',
  },
  projectFilter: {
    marginTop: theme.spacing(2),
    marginBottom: theme.spacing(1),
  },
  root: {
    flexGrow: 1,
  },
  paper: {
    padding: theme.spacing(2),
    textAlign: 'left',
    color: theme.palette.text.secondary,
  },
});

/** PropTypes */
AvailableProjects.propTypes = {
  /** @ignore */
  classes: PropTypes.object.isRequired,
  /** @ignore */
  location: PropTypes.object.isRequired,
}

export default withRouter(withStyles(styles)(AvailableProjects));