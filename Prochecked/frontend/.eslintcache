[{"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\index.js":"1","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\App.js":"2","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Theme.js":"3","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\PersonBO.js":"4","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\RoleBO.js":"5","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\AppApi.js":"6","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\UserView.js":"7","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\SignIn.js":"8","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\layout\\Header.js":"9","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ContextErrorMessage.js":"10","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\LoadingProgress.js":"11","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\DozentView.js":"12","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView.js":"13","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\PersonLoggedIn.js":"14","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\BusinessObject.js":"15","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\ParticipationBO.js":"16","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\ProjectBO.js":"17","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\index.js":"18","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjectList.js":"19","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjectListEntry.js":"20","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ProjectDeleteDialog.js":"21","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjektErstellen.js":"22","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ParticipationList.js":"23","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ParticipationListEntry.js":"24","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\StudentBO.js":"25","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\GradingBO.js":"26","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ParticipationForm.js":"27","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\ReleaseProject.js":"28","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\ProjectListNew.js":"29","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\ProjectListEntryNew.js":"30","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\SemesterBO.js":"31","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\StudentView.js":"32","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\StudentLogin.js":"33","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\Semesterbericht.js":"34","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\SemesterberichtEntry.js":"35","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\CreateSemester.js":"36","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\DropDownDozent.js":"37","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ProfileDropDown.js":"38","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\SelectStudent.js":"39","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\ProjectListStudent.js":"40","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\ProjectListEntryStudent.js":"41","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\CreatePerson.js":"42"},{"size":149,"mtime":1607077333800,"results":"43","hashOfConfig":"44"},{"size":11793,"mtime":1610291383255,"results":"45","hashOfConfig":"44"},{"size":1787,"mtime":1606826666305,"results":"46","hashOfConfig":"44"},{"size":1783,"mtime":1608633733670,"results":"47","hashOfConfig":"44"},{"size":449,"mtime":1607288611622,"results":"48","hashOfConfig":"44"},{"size":29455,"mtime":1610712951050,"results":"49","hashOfConfig":"44"},{"size":2843,"mtime":1609607308049,"results":"50","hashOfConfig":"44"},{"size":1551,"mtime":1609161347169,"results":"51","hashOfConfig":"44"},{"size":1651,"mtime":1609861471273,"results":"52","hashOfConfig":"44"},{"size":2209,"mtime":1606658777574,"results":"53","hashOfConfig":"44"},{"size":934,"mtime":1606658777575,"results":"54","hashOfConfig":"44"},{"size":2306,"mtime":1610140131779,"results":"55","hashOfConfig":"44"},{"size":2112,"mtime":1610291383284,"results":"56","hashOfConfig":"44"},{"size":2953,"mtime":1609692980462,"results":"57","hashOfConfig":"44"},{"size":1166,"mtime":1607537165096,"results":"58","hashOfConfig":"44"},{"size":1723,"mtime":1609863191845,"results":"59","hashOfConfig":"44"},{"size":3470,"mtime":1609607308030,"results":"60","hashOfConfig":"44"},{"size":435,"mtime":1609075351213,"results":"61","hashOfConfig":"44"},{"size":14301,"mtime":1610660753113,"results":"62","hashOfConfig":"44"},{"size":10512,"mtime":1610660620721,"results":"63","hashOfConfig":"44"},{"size":4282,"mtime":1607773792603,"results":"64","hashOfConfig":"44"},{"size":11840,"mtime":1609607308041,"results":"65","hashOfConfig":"44"},{"size":6626,"mtime":1610710137450,"results":"66","hashOfConfig":"44"},{"size":17941,"mtime":1610709820000,"results":"67","hashOfConfig":"44"},{"size":1487,"mtime":1609607308032,"results":"68","hashOfConfig":"44"},{"size":1923,"mtime":1610140131773,"results":"69","hashOfConfig":"44"},{"size":8376,"mtime":1609861471238,"results":"70","hashOfConfig":"44"},{"size":6254,"mtime":1609276654349,"results":"71","hashOfConfig":"44"},{"size":9226,"mtime":1610286148123,"results":"72","hashOfConfig":"44"},{"size":10842,"mtime":1610712661009,"results":"73","hashOfConfig":"44"},{"size":1147,"mtime":1609608520616,"results":"74","hashOfConfig":"44"},{"size":2352,"mtime":1609863191851,"results":"75","hashOfConfig":"44"},{"size":3789,"mtime":1609863191850,"results":"76","hashOfConfig":"44"},{"size":5600,"mtime":1609607308043,"results":"77","hashOfConfig":"44"},{"size":2655,"mtime":1609607308044,"results":"78","hashOfConfig":"44"},{"size":9941,"mtime":1610712970060,"results":"79","hashOfConfig":"44"},{"size":3050,"mtime":1610641701228,"results":"80","hashOfConfig":"44"},{"size":3901,"mtime":1609861471248,"results":"81","hashOfConfig":"44"},{"size":4509,"mtime":1610641701242,"results":"82","hashOfConfig":"44"},{"size":6018,"mtime":1610286148157,"results":"83","hashOfConfig":"44"},{"size":10243,"mtime":1610286148148,"results":"84","hashOfConfig":"44"},{"size":12315,"mtime":1610712986288,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"15ctbv9",{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"88"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"88"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"88"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"88"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"88"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"88"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":1,"source":"195","usedDeprecatedRules":"88"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\index.js",[],["198","199"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\App.js",["200","201","202","203"],"import React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect, useHistory } from 'react-router-dom';\r\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\n\r\nimport PersonBO from './AppApi/PersonBO'\r\nimport RoleBO from './AppApi/RoleBO'\r\nimport AppAPI from './AppApi/AppApi'\r\nimport SignIn from './Components/pages/SignIn'; //importiere von Pages das SignIn\r\nimport UserView from './Components/pages/UserView';\r\nimport Header from './Components/layout/Header';\r\nimport LoadingProgress from './Components/dialogs/LoadingProgress';\r\nimport ContextErrorMessage from './Components/dialogs/ContextErrorMessage';\r\nimport Theme from './Theme';\r\n// import PersonList from './Components/PersonList';\r\nimport StudentLogin from './Components/pages/StudentView/StudentLogin';\r\n// import StudentView from './Components/pages/StudentView';\r\nimport DozentenView from './Components/pages/DozentView';\r\nimport AdminView from './Components/pages/AdminView';\r\nimport PersonLoggedIn from './Components/pages/PersonLoggedIn';\r\nimport ProjektFormular from './Components/pages/ProjektErstellen'\r\nimport ProjectList from './Components/pages/ProjectList';\r\nimport ProjectListNew from './Components/pages/AdminView/ProjectListNew';\r\nimport CreatePerson from './Components/pages/AdminView/CreatePerson';\r\nimport CreateSemester from './Components/pages/AdminView/CreateSemester';\r\nimport DropDown_Dozent from './Components/pages/AdminView/DropDownDozent';\r\nimport ReleaseProject from './Components/pages/AdminView/ReleaseProject';\r\nimport SelectStudent from './Components/pages/AdminView/SelectStudent';\r\nimport Semesterbericht from './Components/pages/StudentView/Semesterbericht';\r\nimport StudentView from './Components/pages/StudentView/StudentView';\r\nimport ProjectListStudent from './Components/pages/StudentView/ProjectListStudent';\r\nimport { StudentBO } from './AppApi';\r\n\r\n\r\n// import firebaseconfig from './firebaseconfig';\r\n\r\nclass App extends React.Component {\r\n\r\n    #firebaseConfig = {\r\n    \r\n        apiKey: \"AIzaSyAXRfVbXnTLoSxa_YJxTTaRckt803yV4I4\",\r\n        authDomain: \"prochecked-team09.firebaseapp.com\",\r\n        databaseURL: \"https://prochecked-team09.firebaseio.com\",\r\n        projectId: \"prochecked-team09\",\r\n        storageBucket: \"prochecked-team09.appspot.com\",\r\n        messagingSenderId: \"791050707787\",\r\n        appId: \"1:791050707787:web:f923c14b57ae697fde3ece\"\r\n    };\r\n\r\n    //Constrcutor welcher Firebase initialisiert \r\n    constructor (props) {\r\n        super(props)\r\n    \r\n\r\n    //Dann wird ein leeres state initalisiert \r\n\t    this.state = {\r\n            person: null,\r\n            student: new StudentBO(),\r\n            appError: null,\r\n            authError: null,\r\n            authLoading: false\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) { //Hier wird der Status aktualisiert, \r\n\t\treturn { appError: error };          // dass beim nächsten Rendern die Fallback UI angezeigt wird \r\n    }\r\n    \r\n    handleAuthStateChange = person => { // Firebase Benutzer logt sich ein, der state wechselt den Zustand \r\n\t\tif (person) {\r\n            // console.log(\"handleauthstate\")\r\n\t\t\tthis.setState({\r\n\t\t\t\tauthLoading: true\r\n            });\r\n            \r\n            //die Person ist eingeloggt\r\n            person.getIdToken().then(token => {\r\n                document.cookie = `token=${token};path=/`; //pfad evtl. erweitern?\r\n            \r\n            //setzt den Nutzer auf Not bevor der Token angekommen ist \r\n                this.setState({\r\n\t\t\t\t\tperson: person,\r\n\t\t\t\t\tauthError: null,\r\n\t\t\t\t\tauthLoading: false\r\n                });\r\n                //Person aus Datenbank auslesen; wird durch SecurityDecorater reingeschrieben, falls noch nicht vorhanden\r\n                \r\n                this.getPersonByGoogleId(person.uid)\r\n                \r\n              \r\n            }).catch(error =>{\r\n                this.setState({\r\n                    authError:error,\r\n                    authLoading: false \r\n                });\r\n            });\r\n        \r\n        } else {\r\n            document.cookie = 'token=;path=/'; //Person hat sich ausgeloggt, dann clear token\r\n            //setze die ausgeloggte Person auf null\r\n            this.setState ({\r\n                person: null,\r\n                authLoading: false \r\n            });\r\n        }\r\n    }\r\n\r\n    handleSignIn = () => {\r\n\t\tthis.setState({\r\n\t\t\tauthLoading: true\r\n\t\t});\r\n\t\tconst provider = new firebase.auth.GoogleAuthProvider(); //Erstelle Instanz des Google-Provider-Objekts\r\n\t\tfirebase.auth().signInWithRedirect(provider); // Umleiten auf die signInWithRedirect ruft signInWithRedirect auf \r\n    }\r\n\r\n    getPersons(){\r\n        var api = AppAPI.getAPI()\r\n        console.log(api)\r\n        api.getPersons().then((person) =>\r\n            {console.log(person)\r\n            this.setState({\r\n                person: person\r\n            })}\r\n            )\r\n    }\r\n\r\n    createPerson(name, email, google_id){\r\n        var api = AppAPI.getAPI()\r\n        // console.log(api)\r\n        api.createPerson(name, email, google_id).then((person) =>\r\n            {console.log(person)\r\n            console.log(\"test\")\r\n            this.setState({\r\n                person: person\r\n            })}\r\n            )\r\n        }\r\n\r\n    getPersonByGoogleId = (google_id) => {\r\n        var api = AppAPI.getAPI()\r\n        // console.log(api)\r\n        api.getPersonByGoogleId(google_id).then((person) =>\r\n            {\r\n            this.setState({\r\n                person: person\r\n            }, () => this.getStudentByPersonId(this.state.person.getID()))\r\n            })\r\n    }\r\n\r\n    getStudentByPersonId = (person_id) => {\r\n        var api = AppAPI.getAPI()\r\n        api.getStudentByPersonId(person_id).then((student) => {\r\n        this.setState({\r\n            student: student\r\n        })\r\n        // console.log(this.state.student)\r\n    })\r\n    }\r\n\r\n    setRole = (aRole) => {\r\n        const person = this.state.person\r\n        const {name, email, google_id, id, creation_date, last_updated} = person\r\n        var updatedPerson = new PersonBO(name, email, google_id, aRole)\r\n        updatedPerson.setID(id)\r\n        updatedPerson.setCreationDate(creation_date)\r\n        updatedPerson.setLastUpdated(last_updated)\r\n        var api = AppAPI.getAPI()\r\n        api.updatePerson(updatedPerson).then((newPerson) => { //bei put (updatePerson) kommt was zurück? kommt überhaupt person zurück?\r\n                        this.setState({\r\n                            person: newPerson\r\n                        })\r\n                    })\r\n                }\r\n\r\n    getBerechtigung = () => {\r\n        const person = this.state.person\r\n        const {name, berechtigung} = person\r\n        return (berechtigung)\r\n    }\r\n    \r\n    // checkIfPersonInDatabase(name, email, googleId) {\r\n    //     console.log(\"checkifuserindatabase\")\r\n    //     var api = AppAPI.getAPI()\r\n    //     console.log(api)\r\n\r\n    //     var suggestion = new PersonBO(name, email, googleId)\r\n    //                 console.log(suggestion)\r\n                    \r\n    //         api.getPersonByGoogleId(googleId).then((person) => {\r\n    //             console.log(person)\r\n    //             if (!person.getGoogleId()) {\r\n    //                 var suggestion = new PersonBO(name, email, googleId)\r\n    //                 console.log(suggestion)\r\n    //                 api.createPerson(suggestion).then((newPerson) => {\r\n    //                 this.setState({\r\n    //                     person: newPerson})\r\n    //                 }\r\n    //                 )\r\n    //             }\r\n            \r\n\r\n    //             else {\r\n    //                 this.setState({\r\n    //                     person: person\r\n    //                 })\r\n    //             }\r\n    //         }\r\n    //     )\r\n    // }\r\n\r\n    \r\n\r\n    // createPersonInDatabase(name, email, googleId) {\r\n    //     console.log(\"createPersonInDatabase\")\r\n    //     var api = AppAPI.getAPI()\r\n    //     console.log(api)\r\n\r\n    //     var suggestion = new PersonBO(name, email, googleId)\r\n    //             console.log(suggestion)\r\n    //             var suggestion = new PersonBO(name, email, googleId)\r\n    //             console.log(suggestion)\r\n    //             api.createPerson(suggestion).then((newPerson) => {\r\n    //             this.setState({\r\n    //                 person: newPerson})\r\n    //                 }  \r\n    //             )\r\n    // }\r\n\r\n    // setRoleOfPerson(person, role){\r\n    //     var api = AppAPI.getAPI()\r\n    //         updatedPerson = person.setBerechtigung(role)\r\n    //         api.update(updatedPerson).then((newPerson) => {\r\n    //             this.setState({\r\n    //                 person: newPerson\r\n    //             })\r\n    //         })\r\n    // }\r\n    \r\n\r\n            \r\n    ProfList(){\r\n        var api = AppAPI.getAPI()\r\n        api.getPersonByRole(2).then((persons) =>\r\n        {\r\n            // console.log(persons)\r\n        })\r\n      }\r\n        \r\n    componentDidMount() {\r\n        firebase.initializeApp(this.#firebaseConfig);\r\n        firebase.auth().languageCode = 'en';\r\n        firebase.auth().onAuthStateChanged(this.handleAuthStateChange);\r\n        // console.log(\"rendered\")\r\n        \r\n        };\r\n    \r\n    \t/** Renders the whole app */\r\n\trender() {\r\n        const { person, appError, authError, authLoading } = this.state;\r\n        \r\n\t\treturn (\r\n\t\t\t<ThemeProvider theme={Theme}>\r\n\t\t\t\t<CssBaseline />\r\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t\t\t\t<Container maxWidth='md'>\r\n\t\t\t\t\t\t<Header/>\r\n                        <Route exact path = '/StudentView' component = {StudentView}/>\r\n                        <Route exact path = '/ProjectListStudent' component = {ProjectListStudent}/>\r\n                        \r\n                        <Route exact path = '/Semesterbericht' component = {Semesterbericht}/>\r\n                        <Route exact path = '/StudentLogin' component = {StudentLogin}/>\r\n                        <Route exact path = '/DozentView' component = {DozentenView}/>\r\n                        <Route exact path = '/AdminView' component = {AdminView}/>\r\n                        <Route exact path = '/CreateProject' component = {ProjektFormular}/>\r\n                        <Route exact path = '/CreatePerson' component = {CreatePerson}/>\r\n                        <Route exact path = '/CreateSemester' component = {CreateSemester}/>\r\n                        <Route exact path = '/ProjectList' component = {ProjectList}/>\r\n                        <Route exact path = '/ReleaseProject' component = {ReleaseProject}/>\r\n                        <Route exact path = '/SelectStudent' component = {SelectStudent}/>\r\n                        <Route exact path = '/ProjectListNew' component = {ProjectListNew}/>\r\n                        <Route exact path = '/DropDown_Dozent' component = {DropDown_Dozent}/>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Ist eine Person eingeloggt?\r\n                           person ?\r\n                                <PersonLoggedIn berechtigung = {this.state.person.berechtigung} person = {this.state.person} setRole = {this.setRole} student = {this.state.student}></PersonLoggedIn>\r\n\r\n                                \r\n\t\t\t\t\t\t\t\t:\r\n\t\t\t\t\t\t\t\t// sonst zeige die SignIn Seite \r\n\t\t\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t\t\t<Redirect to='/SignIn' />\r\n\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\r\n\t\t\t\t\t\t\t\t</>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t<LoadingProgress show={authLoading} />\r\n\t\t\t\t\t\t<ContextErrorMessage error={authError} contextErrorMsg={`Während der Anmeldung ist etwas falsch gelaufen.`} onReload={this.handleSignIn} />\r\n\t\t\t\t\t\t<ContextErrorMessage error={appError} contextErrorMsg={`Innerhalb des Programms gab es einen Fehler. Bitte die Seite erneut laden.`} />\r\n\t\t\t\t\t</Container>\r\n\t\t\t\t</Router>\r\n\t\t\t</ThemeProvider>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default App;","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Theme.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\PersonBO.js",["204"],"import BusinessObject from './BusinessObject';\r\nimport RoleBO from './RoleBO'\r\n\r\n/**\r\n * Represents a person of the system\r\n */\r\nexport default class PersonBO extends BusinessObject {\r\n\r\n  /**\r\n   * Constructs a PersonBO object with a given name, email, google id and role\r\n   * \r\n   * @param {String} aname - the name of this PersonBO.\r\n   */\r\n  constructor(aname, aemail, agoogleid, aberechtigung) {\r\n    super();\r\n    this.name = aname\r\n    this.email = aemail\r\n    this.google_id = agoogleid\r\n    this.berechtigung = aberechtigung\r\n    this.student_id = null\r\n  }\r\n\r\n  /**\r\n   * Sets a new name\r\n   * \r\n   * @param {String} aname - the new name of this PersonBO.\r\n   */\r\n  setName(aname) {\r\n    this.name = aname\r\n  }\r\n\r\n  /**\r\n   * Gets the name.\r\n   */\r\n  getName() {\r\n    return this.name\r\n  }\r\n\r\n  setEmail(aemail){\r\n    this.email = aemail\r\n  }\r\n\r\n  getEmail(){\r\n    return this.email\r\n  }\r\n\r\n  setGoogleId(agoogleid){\r\n    this.google_id = agoogleid\r\n  }\r\n\r\n  getGoogleId(){\r\n    return this.google_id\r\n  }\r\n\r\n  setBerechtigung(aberechtigung){\r\n    this.berechtigung = aberechtigung\r\n  }\r\n\r\n  getBerechtigung(){\r\n    return this.berechtigung\r\n  }\r\n\r\n  setStudent(astudent_id){\r\n    this.student_id = astudent_id\r\n  }\r\n\r\n  getStudent(){\r\n    return this.student_id\r\n  }\r\n\r\n  /** \r\n   * Returns an Array of PersonBOs from a given JSON structure.\r\n   */\r\n  static fromJSON(persons) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(persons)) {\r\n      persons.forEach((p) => {\r\n        Object.setPrototypeOf(p, PersonBO.prototype);\r\n        result.push(p);\r\n      })\r\n    } else {\r\n      // Es handelt sich offenbar um ein singuläres Objekt\r\n      let p = persons;\r\n      Object.setPrototypeOf(p, PersonBO.prototype);\r\n      result.push(p);\r\n    }\r\n\r\n    return result;\r\n  }\r\n}","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\RoleBO.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\AppApi.js",["205"],"import PersonBO from './PersonBO';\r\nimport StudentBO from './StudentBO';\r\nimport ParticipationBO from './ParticipationBO'\r\nimport ProjectBO from './ProjectBO'\r\nimport GradingBO from './GradingBO'\r\nimport SemesterBO from './SemesterBO'\r\n\r\n/**\r\n * Abstracts the REST interface of the Python backend with convenient access methods.\r\n * The class is implemented as a singleton.\r\n */\r\nexport default class AppAPI {\r\n\r\n    // Singelton instance\r\n    static #api = null;\r\n  \r\n    // Local Python backend\r\n    #AppServerBaseURL ='/app';\r\n    \r\n  // Local http-fake-backend \r\n    // #AppServerBaseURL = '/AppApi/app';\r\n    \r\n    // Person related\r\n    #getPersonsURL = () => `${this.#AppServerBaseURL}/persons`;\r\n    #addPersonURL = () => `${this.#AppServerBaseURL}/persons`;\r\n    #updatePersonAdminURL = () => `${this.#AppServerBaseURL}/persons`; \r\n    #getPersonURL = (google_id) => `${this.#AppServerBaseURL}/persons/${google_id}`;\r\n    #updatePersonURL = (google_id) => `${this.#AppServerBaseURL}/persons/${google_id}`;\r\n    #deletePersonURL = (id) => `${this.#AppServerBaseURL}/persons/${id}`;\r\n    // #searchPersonURL = (name) => `${this.#AppServerBaseURL}/person-by-name/${name}`;\r\n    #getProfsURL = (id) => `${this.#AppServerBaseURL}/person-by-role/${id}`;\r\n\r\n    //Semester releated\r\n    #getSemURL = () => `${this.#AppServerBaseURL}/semesters`;\r\n    #addSemesterURL = () => `${this.#AppServerBaseURL}/semesters`;\r\n    #updateSemesterURL = () => `${this.#AppServerBaseURL}/semesters`;\r\n    #deleteSemesterURL = (id) => `${this.#AppServerBaseURL}/semester/${id}`;\r\n<<<<<<< HEAD\r\n    \r\n=======\r\n     \r\n>>>>>>> main\r\n    // Student related\r\n    #getStudentURL = (id) => `${this.#AppServerBaseURL}/students/${id}`;\r\n    #getStudentByMatrikelNummerURL = (matr_nr) => `${this.#AppServerBaseURL}/student-by-matr/${matr_nr}`; \r\n    #createStudentURL = () => `${this.#AppServerBaseURL}/student`;\r\n    #updateStudentAdminURL = () => `${this.#AppServerBaseURL}/student`; \r\n    #getStudentByPersonIdURL = (id) => `${this.#AppServerBaseURL}/student-by-person-id/${id}`;\r\n    \r\n    // Participation related\r\n    #getParticipationsByProjectURL = (project_id) => `${this.#AppServerBaseURL}/projects/${project_id}/participations`;\r\n    #addParticipationsForProjectURL = (project_id) => `${this.#AppServerBaseURL}/projects/${project_id}/participations`;\r\n    #deleteParticipationURL = (id) => `${this.#AppServerBaseURL}/participation/${id}`;\r\n    #updateParticipationURL = () => `${this.#AppServerBaseURL}/participation`;\r\n    #addParticipationURL = () => `${this.#AppServerBaseURL}/participation`;\r\n    \r\n    // Project related\r\n    #getProjectsByDozentAcceptedURL = (person_id) => `${this.#AppServerBaseURL}/dozents/${person_id}/projects`;\r\n    #getProjectsByDozentInReviewURL = (person_id) => `${this.#AppServerBaseURL}/dozent/${person_id}/project`;\r\n    #getProjectsByDozentReviewedURL = (person_id) => `${this.#AppServerBaseURL}/dozente/${person_id}/projecte`;\r\n    #getProjectsByDozentURL = (person_id) => `${this.#AppServerBaseURL}/dozents/${person_id}/projects`;\r\n    #getProjectsByStudentURL = (person_id) => `${this.#AppServerBaseURL}/students/${person_id}/projects`;\r\n\r\n    // #getProjectsByStateNewURL = (person_id) => `${this.#AppServerBaseURL}/state/${project_state_id}/projects`;\r\n    #getProjectsByStateURL = (project_state) => `${this.#AppServerBaseURL}/projects/${project_state}`;\r\n    #addProjectURL = () => `${this.#AppServerBaseURL}/project`;\r\n    #updateProjectURL = () => `${this.#AppServerBaseURL}/project`;\r\n    #getProjectsByDozentNewURL = (person_id) => `${this.#AppServerBaseURL}/dozentn/${person_id}/projectn`;\r\n    #deleteProjectURL = (id) => `${this.#AppServerBaseURL}/projectd/${id}`;\r\n    //Grading related \r\n    #addGradingStudentURL = () => `${this.#AppServerBaseURL}/studentsGrading`;\r\n    #updateGradingURL = () => `${this.#AppServerBaseURL}/studentsGrading`;\r\n    #getGradingByParticipationURL = (participation_id) => `${this.#AppServerBaseURL}/participation/${participation_id}/grading`;\r\n    #getGradingURL = (id) => `${this.#AppServerBaseURL}/gradings/${id}`;\r\n    #deleteGradingURL = (id) => `${this.#AppServerBaseURL}/gradings/${id}`;\r\n    #getGradingbyProjectAndMatrURL = (project_id, matr_nr) => `${this.#AppServerBaseURL}/gradings-by-project-and-matr/${project_id}/${matr_nr}`;\r\n   \r\n    \r\n      /** \r\n   * Get the Singelton instance \r\n   * \r\n   * @public\r\n   */\r\n  static getAPI() {\r\n    if (this.#api == null) {\r\n      this.#api = new AppAPI();\r\n    }\r\n    return this.#api;\r\n  }\r\n\r\n  /**\r\n   *  Returns a Promise which resolves to a json object. \r\n   *  The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \r\n   *  fetchAdvanced throws an Error also an server status errors\r\n   */\r\n#fetchAdvanced = (url, init) => fetch(url, init)\r\n    .then(res => {\r\n      // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \r\n      if (!res.ok) {\r\n        throw Error(`${res.status} ${res.statusText}`);\r\n      }\r\n      return res.json();\r\n    }\r\n    )\r\n\r\n//Person related\r\ngetPersons() {\r\n// console.log(\"vorFetch in getPersons\")\r\n      return this.#fetchAdvanced(this.#getPersonsURL()).then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let PersonBOs = PersonBO.fromJSON(responseJSON);\r\n        // console.info(personBOs);\r\n        // console.log(PersonBOs)\r\n        return new Promise(function (resolve) {\r\n          \r\n          resolve(PersonBOs);\r\n        })\r\n      })\r\n    }\r\n\r\n    /**\r\n     * Returns a Promise, which resolves to a PersonBO\r\n     * \r\n     * @param {Number} personID to be retrieved\r\n     * @public\r\n     */\r\n  \r\ngetPerson(id) {\r\n      return this.#fetchAdvanced(this.#getPersonURL(id)).then((responseJSON) => {\r\n        // We always get an array of PersonBOs.fromJSON, but only need one object\r\n        let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n        // console.info(responsePersonBO);\r\n        return new Promise(function (resolve) {\r\n          resolve(responsePersonBO);\r\n        })\r\n      })\r\n    }\r\n\r\ngetPersonByGoogleId(google_id) {\r\n        //console.log(google_id)\r\n        return this.#fetchAdvanced(this.#getPersonURL(google_id)).then((responseJSON) => {\r\n          // console.log(responseJSON)\r\n          \r\n          // We always get an array of PersonBOs.fromJSON, but only need one object\r\n          let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n          // console.info(responsePersonBO);\r\n          return new Promise(function (resolve) {\r\n            resolve(responsePersonBO);\r\n          })\r\n        })\r\n      }\r\n\r\ncreatePerson(name, email, google_id, berechtigung) {\r\n\r\n        let p = new PersonBO();\r\n        p.setName(name)\r\n        p.setEmail(email)\r\n        p.setGoogleId(google_id)\r\n        p.setBerechtigung(berechtigung)\r\n        // console.log(p)\r\n\r\n        return this.#fetchAdvanced(this.#addPersonURL(), {\r\n          method: 'POST',\r\n          headers: {\r\n            'Accept': 'application/json, text/plain',\r\n            'Content-type': 'application/json',\r\n          },\r\n          body: JSON.stringify(p)\r\n          }).then((responseJSON) => {\r\n          // We always get an array of PersonBOs.fromJSON, but only need one object\r\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n          // console.info(participationBOs);\r\n            return new Promise(function (resolve) {\r\n            resolve(responsePersonBO);\r\n          })\r\n        })\r\n      }\r\n    \r\nupdatePerson(personBO){\r\n  // console.log(personBO.getGoogleId())\r\n  \r\n  return this.#fetchAdvanced(this.#updatePersonURL(personBO.getGoogleId()), {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Accept': 'application/json, text/plain',\r\n      'Content-type': 'application/json',\r\n    },\r\n    body: JSON.stringify(personBO)\r\n    }).then((responseJSON) => { \r\n      // console.log(responseJSON)\r\n    // We always get an array of PersonBOs.fromJSON, but only need one object \r\n    // kommt bei put überhaupt ein PersonenBO zurück??????????????\r\n      let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n    // console.info(participationBOs);\r\n      return new Promise(function (resolve) {\r\n      resolve(responsePersonBO);\r\n    })\r\n  })\r\n}\r\n\r\nupdatePersonAdmin(p) {\r\n  // console.log(gradingBO)\r\n    return this.#fetchAdvanced(this.#updatePersonAdminURL(), { \r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(p)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n        let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n        return new Promise(function (resolve) {\r\n        resolve(responsePersonBO);\r\n      })\r\n    })\r\n  }\r\n\r\ngetPersonByRole(role_id){\r\n  return this.#fetchAdvanced(this.#getProfsURL(role_id)).then((responseJSON) => {\r\n    // We always get an array of PersonBOs.fromJSON, but only need one object\r\n    let responseDozentBOs = PersonBO.fromJSON(responseJSON);\r\n    // console.info(responseDozentBOs);\r\n    return new Promise(function (resolve) {\r\n      resolve(responseDozentBOs);\r\n    })\r\n  })\r\n}\r\n\r\n  /**\r\n   * Deletes the given participation and returns a Promise, which resolves to an ParticipationBO\r\n   * \r\n   * @param id to be deleted\r\n   * @public\r\n   */\r\n  deletePerson(id) {\r\n    return this.#fetchAdvanced(this.#deletePersonURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let personBOs = PersonBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(personBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n\r\n//Student related\r\ngetStudent(id) {\r\n  return this.#fetchAdvanced(this.#getStudentURL(id))\r\n  .then((responseJSON) => {\r\n    // We always get an array of PersonBOs.fromJSON, but only need one object\r\n    let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n    // console.log(responseStudentBO);\r\n    return new Promise(function (resolve) {\r\n      resolve(responseStudentBO);\r\n    })\r\n  })\r\n}\r\n\r\ngetStudentByMatrikelNummer(matr_nr) {\r\n  return this.#fetchAdvanced(this.#getStudentByMatrikelNummerURL(matr_nr)).then((responseJSON) => { //URL LEER LASSEN????\r\n    // We always get an array of StudentBOs.fromJSON, but only need one object\r\n    let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n    console.info(responseStudentBO);\r\n    return new Promise(function (resolve) {\r\n      resolve(responseStudentBO);\r\n    })\r\n  })\r\n}\r\n\r\n//Participation related\r\n\r\n/**\r\n   * Returns a Promise, which resolves to an ParticipationBOs\r\n   * \r\n   */\r\n  createParticipation(participation){\r\n    return this.#fetchAdvanced(this.#addParticipationURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(participation)\r\n      }).then((responseJSON) => {console.log(responseJSON)\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n        let responseParticipationBO = ParticipationBO.fromJSON(responseJSON)[0];\r\n      // console.info(accountBOs);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseParticipationBO);\r\n      })\r\n    })\r\n  }\r\n  \r\n  \r\n\r\n /**\r\n   * Returns a Promise, which resolves to an Array of ParticipationBOs\r\n   * \r\n   * @param {Number} project_id for which the the Participations should be retrieved\r\n   * @public\r\n   */\r\n  getParticipationsByProject(project_id){\r\n    return this.#fetchAdvanced(this.#getParticipationsByProjectURL(project_id))\r\n      .then((responseJSON) => {\r\n        console.log(responseJSON)\r\n        let participationBOs = ParticipationBO.fromJSON(responseJSON);\r\n        // console.log(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(participationBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an ParticipationBOs\r\n   * \r\n   * @param {Number} project_id for which the the participations should be added to\r\n   * @public\r\n   */\r\n  addParticipationForProject(project_id) {\r\n    return this.#fetchAdvanced(this.#addParticipationsForProjectURL(project_id), {\r\n      method: 'POST'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let participationBO = ParticipationBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBO);\r\n        return new Promise(function (resolve) {\r\n          // We expect only one new participation\r\n          resolve(participationBO);\r\n        })\r\n      })\r\n  }\r\n  \r\n  /**\r\n   * Deletes the given participation and returns a Promise, which resolves to an ParticipationBO\r\n   * \r\n   * @param id to be deleted\r\n   * @public\r\n   */\r\n  deleteParticipation(id) {\r\n    return this.#fetchAdvanced(this.#deleteParticipationURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let participationBOs = ParticipationBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(participationBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  updateParticipation(participationBo){\r\n    // console.log(participationBo)\r\n    return this.#fetchAdvanced(this.#updateParticipationURL(), { \r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(participationBo)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n        let responseParticipationBo = ParticipationBO.fromJSON(responseJSON)[0];\r\n        return new Promise(function (resolve) {\r\n        resolve(responseParticipationBo);\r\n      })\r\n    })\r\n  }\r\n    // /**\r\n  //  * Returns a Promise, which resolves to an Array of ProjectBOs\r\n  //  * \r\n  //  * @param {Number} participation_id for which the the participations should be retrieved\r\n  //  * @public\r\n  //  */\r\n  // getGradingByParticipation(participation_id) {\r\n  //   console.log(participation_id)\r\n  //   // console.log(\"vor fetch in appapi\")\r\n  //   return this.#fetchAdvanced(this.#getGradingByParticipationURL(participation_id))\r\n  //     .then((responseJSON) => { \r\n  //       console.log(responseJSON)\r\n  //       // console.log(\"gefetched\")\r\n  //       let GradingBOs = GradingBO.fromJSON(responseJSON);\r\n  //       // console.log(projectBOs);\r\n  //       return new Promise(function (resolve) {\r\n  //         resolve(GradingBOs);\r\n  //       })\r\n  //     })\r\n  // }\r\n\r\n//Project related\r\n\r\n /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} person_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n  getProjectsByDozentNew(person_id) {\r\n    // console.log(person_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getProjectsByDozentNewURL(person_id))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} person_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n  getProjectsByDozentAccepted(person_id) {\r\n    // console.log(person_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getProjectsByDozentAcceptedURL(person_id))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} person_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n    getProjectsByDozentInReview(person_id) {\r\n    // console.log(person_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getProjectsByDozentInReviewURL(person_id))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} person_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n  getProjectsByDozentReviewed(person_id) {\r\n    // console.log(person_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getProjectsByDozentReviewedURL(person_id))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  \r\n\r\n  getProjectsByState(project_state) {\r\n    // console.log(project_state)\r\n    return this.#fetchAdvanced(this.#getProjectsByStateURL(project_state))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  updateProject(projectBo){\r\n    // console.log(personBO.getGoogleId())\r\n    \r\n    return this.#fetchAdvanced(this.#updateProjectURL(), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(projectBo)\r\n      }).then((responseJSON) => { \r\n        // console.log(responseJSON)\r\n      // We always get an array of ProjectBO.fromJSON, but only need one object \r\n        let responseProjectBo = ProjectBO.fromJSON(responseJSON)[0];\r\n      // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseProjectBo);\r\n      })\r\n    })\r\n  }\r\n<<<<<<< HEAD\r\n\r\n  \r\n=======\r\n>>>>>>> main\r\n  getProjectsByStudent(matr_nr){\r\n    return this.#fetchAdvanced(this.#getProjectsByStudentURL(matr_nr))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n<<<<<<< HEAD\r\n      })\r\n  }\r\n\r\n\r\n\r\n=======\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n  \r\n>>>>>>> main\r\n\r\n  deleteProject(id) {\r\n    return this.#fetchAdvanced(this.#deleteProjectURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ProjectBO.fromJSON, but only need one object\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON)[0];\r\n        // console.info(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  //Student Relation\r\n  getStudent(id) {\r\n    return this.#fetchAdvanced(this.#getStudentURL(id))\r\n    .then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      // console.log(responseStudentBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  createStudent(student){\r\n    return this.#fetchAdvanced(this.#createStudentURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(student)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of StudentBOs.fromJSON, but only need one object\r\n        let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n        return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  getStudentByMatrikelNummer(matr_nr) {\r\n    return this.#fetchAdvanced(this.#getStudentByMatrikelNummerURL(matr_nr)).then((responseJSON) => { //URL LEER LASSEN????\r\n      // We always get an array of StudentBOs.fromJSON, but only need one object\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      console.info(responseStudentBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  getStudentByPersonId(person_id){\r\n    return this.#fetchAdvanced(this.#getStudentByPersonIdURL(person_id)).then((responseJSON) => { //URL LEER LASSEN????\r\n      // We always get an array of StudentBOs.fromJSON, but only need one object\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseStudentBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  updateStudentAdmin(s) {\r\n    // console.log(gradingBO)\r\n      return this.#fetchAdvanced(this.#updateStudentAdminURL(), { \r\n        method: 'PUT',\r\n        headers: {\r\n          'Accept': 'application/json, text/plain',\r\n          'Content-type': 'application/json',\r\n        },\r\n        body: JSON.stringify(s)\r\n        }).then((responseJSON) => {\r\n        // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n          let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n          return new Promise(function (resolve) {\r\n          resolve(responseStudentBO);\r\n        })\r\n      })\r\n    }\r\n\r\n  getPersonByRole(role_id){\r\n    return this.#fetchAdvanced(this.#getProfsURL(role_id)).then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responseDozentBOs = PersonBO.fromJSON(responseJSON);\r\n      // console.info(responseDozentBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseDozentBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  createProject(project){\r\n    return this.#fetchAdvanced(this.#addProjectURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(project)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n        let responseProjectBO = ProjectBO.fromJSON(responseJSON)[0];\r\n      // console.info(accountBOs);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseProjectBO);\r\n      })\r\n    })\r\n  }\r\n//Grading Related \r\n  gradingStudent(grade, participation_id) {\r\n\r\n    let g = new GradingBO();\r\n    g.setGrade(grade)\r\n    g.setParticipation(participation_id)\r\n    // console.log(g)\r\n\r\n    return this.#fetchAdvanced(this.#addGradingStudentURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(g)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of GradingBO.fromJSON, but only need one object\r\n        let responseGradingBO = GradingBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseJSON);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseGradingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} participation_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n  getGradingByParticipation(participation_id) {\r\n    // console.log(participation_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getGradingByParticipationURL(participation_id))\r\n      .then((responseJSON) => { \r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let GradingBOs = GradingBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(GradingBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  getGrading(id) {\r\n    // console.log(id)\r\n    return this.#fetchAdvanced(this.#getGradingURL(id))\r\n    .then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responseGradingBO =GradingBO.fromJSON(responseJSON)[0];\r\n      // console.log(responseGradingBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseGradingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  updateGrading(gradingBO){\r\n  // console.log(gradingBO)\r\n    return this.#fetchAdvanced(this.#updateGradingURL(), { \r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(gradingBO)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n        let responseGradingBO = GradingBO.fromJSON(responseJSON)[0];\r\n        return new Promise(function (resolve) {\r\n        resolve(responseGradingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n     /**\r\n   * Deletes the given Semester and returns a Promise, which resolves to an SemesterBO\r\n   * \r\n   * @param semester to be deleted\r\n   * @public\r\n   */\r\n  deleteGrading(id) {\r\n    return this.#fetchAdvanced(this.#deleteGradingURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let gradingBOs =GradingBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(gradingBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n\r\n  getGradingByProjectandMatr(project_id, matr_nr){\r\n    return this.#fetchAdvanced(this.#getGradingbyProjectAndMatrURL(project_id, matr_nr))\r\n    .then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responseGradingBO = GradingBO.fromJSON(responseJSON)[0];\r\n      // console.log(responseGradingBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseGradingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  //Semester Related \r\n\r\n  getSemesters(){\r\n    return this.#fetchAdvanced(this.#getSemURL()).then((responseJSON) => {\r\n      // We always get an array of SemBOs.fromJSON, but only need one object\r\n      let responseSemBOs = SemesterBO.fromJSON(responseJSON);\r\n      console.info(responseSemBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseSemBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n  createSemester(semester) {\r\n\r\n    let s = new SemesterBO();\r\n    s.setName(semester)\r\n    // console.log(\"semester:\", s)\r\n\r\n    return this.#fetchAdvanced(this.#addSemesterURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(s)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of GradingBO.fromJSON, but only need one object\r\n        let responseSemesterBO = SemesterBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseJSON);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseSemesterBO);\r\n      })\r\n    })\r\n  }\r\n\r\n    /**\r\n   * Deletes the given Semester and returns a Promise, which resolves to an SemesterBO\r\n   * \r\n   * @param semester to be deleted\r\n   * @public\r\n   */\r\n  deleteSemester(id) {\r\n    return this.#fetchAdvanced(this.#deleteSemesterURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let semesterBOs = SemesterBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(semesterBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  updateSemster(s) {\r\n    // console.log(gradingBO)\r\n      return this.#fetchAdvanced(this.#updateSemesterURL(), { \r\n        method: 'PUT',\r\n        headers: {\r\n          'Accept': 'application/json, text/plain',\r\n          'Content-type': 'application/json',\r\n        },\r\n        body: JSON.stringify(s)\r\n        }).then((responseJSON) => {\r\n        // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n          let responseSemesterBO = SemesterBO.fromJSON(responseJSON)[0];\r\n          return new Promise(function (resolve) {\r\n          resolve(responseSemesterBO);\r\n        })\r\n      })\r\n    }\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\UserView.js",["206","207"],"import Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import { Link as RouterLink } from 'react-router-dom'\r\nimport React, { Component } from 'react';\r\nimport RoleBO from '../../AppApi/RoleBO'\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass UserView extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    handleAdminButtonClicked = () => {\r\n      this.props.setRole(3);\r\n      this.viewRole()\r\n    }\r\n\r\n    handleStudentButtonClicked = () => {\r\n      this.props.setRole(1);\r\n      this.viewRole()\r\n    }\r\n\r\n    handleDozentButtonClicked = () => {\r\n      this.props.setRole(2);\r\n      this.viewRole()\r\n    }\r\n\r\n    viewRole= function() {\r\n      console.log(\"clicked\")\r\n    };\r\n\r\nrender () {\r\n  const { classes } = this.props;\r\n\r\n\treturn(\r\n        <div>\r\n          <center>\r\n                <h1>Bitte wählen Sie Ihre Rolle:</h1>\r\n                <div>\r\n                <Link to='/StudentView'>\r\n                <Button\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick = {this.handleStudentButtonClicked}\r\n                >\r\n                            Student\r\n                    \r\n                </Button>\r\n                </Link>\r\n                </div>\r\n                <div>\r\n                <Link to={{\r\n                pathname: '/DozentView',\r\n                state: { person: this.props.person }\r\n                }}>\r\n                <Button\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    algin=\"center\"\r\n                    className={classes.button}\r\n                    onClick = {this.handleDozentButtonClicked}\r\n                    \r\n                >\r\n                            Dozent\r\n                    \r\n                </Button>\r\n                </Link>\r\n                </div>\r\n                <div>\r\n                <Link to='/AdminView'>\r\n                <Button\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick = {this.handleAdminButtonClicked}\r\n                    \r\n                 >\r\n                            Admin\r\n                  \r\n                </Button>\r\n                </Link>\r\n                </div>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = (theme) => ({\r\n  button: {\r\n    margin: theme.spacing(2),\r\n    width: 170,\r\n    fontSize: 25,\r\n    padding: \"15x 0\"\r\n  },\r\n})\r\n\r\n  export default  withStyles(styles)(UserView);","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\SignIn.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\layout\\Header.js",["208","209"],"import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport SubjectIcon from '@material-ui/icons/Subject';\r\n\r\nclass Header extends React.Component {\r\n    constructor (props) {\r\n        super (props)\r\n}\r\n\r\nrender () {\r\n\r\n    const {user,classes} = this.props;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton}  aria-label=\"menu\">\r\n            <SubjectIcon/>\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n              ProChecked - Hochschule der Medien\r\n          </Typography>\r\n          <Button color=\"inherit\"></Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}}\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      width: \"100%\"\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(28),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  })\r\n\r\nexport default withStyles(styles) (Header);\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ContextErrorMessage.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\LoadingProgress.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\DozentView.js",["210","211","212","213","214","215","216"],"import Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import { Link as RouterLink } from 'react-router-dom'\r\n//import './App.css';\r\nimport React, { Component } from 'react';\r\n// import RoleBO from '../../AppApi/RoleBO'\r\nimport {Link} from 'react-router-dom';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport ProjectList from './ProjectList';\r\nimport ProjektFormular from './ProjektErstellen'\r\nimport UserView from './UserView'\r\nimport { AppApi } from '../../AppApi';\r\n\r\n\r\n// function DozentenView(props) {\r\nclass DozentenView extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      DozentList : null\r\n  };\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const person = this.props.location.state.person\r\n    const adminProf = this.props.location.state.prof\r\n    console.log(this.props'.location.state.person)\r\n    console.log(this.props'.location.state.prof)\r\n\r\n    return(<div>\r\n      <center>\r\n        <div>\r\n            <h1>Wählen Sie einen der folgenden Optionen aus:</h1>\r\n            <Link to={{\r\n            pathname: '/CreateProject',\r\n            state: { linkState: person, adminProf: adminProf},\r\n            }}>\r\n            <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n            >\r\n                        Projekt erstellen\r\n                \r\n            </Button>\r\n            </Link>\r\n   </div>\r\n            <div>            \r\n            <Link to={{\r\n            pathname: '/ProjectList',\r\n            state: { linkState: person, adminProf: adminProf},\r\n            }}>\r\n           <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                algin=\"center\"\r\n                className={classes.button}\r\n                > \r\n                    Bewertung und Teilnehmerpflege\r\n            </Button>\r\n            </Link>\r\n            </div>\r\n    </center>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nconst styles = (theme) => ({\r\n  button: {\r\n    margin: theme.spacing(2),\r\n    width: 285,\r\n    fontSize: 25,\r\n    padding: \"15x 0\"\r\n  },\r\n})\r\n\r\n  export default withStyles(styles)(DozentenView);\r\n\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView.js",["217"],"// import React, { Component } from 'react';\r\n// function AdminView(){\r\n//     return( \r\n//         <div>\r\n//             <h1> AdminView </h1>\r\n//         </div>\r\n//     );\r\n// }\r\n// export default AdminView;\r\n\r\n// class AdminView extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//     }\r\n//     render() { \r\n//         return ( \r\n//         <div>\r\n//             <h1> AdminView </h1>\r\n//         </div>\r\n//          );\r\n//     }npm install react-theme-loader --save\r\n// }\r\n \r\n// export default AdminView; \r\n\r\n\r\nimport React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport { makeStyles, createStyles, createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      backgroundColor: 'gray'\r\n    },\r\n    paper: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function MenuListComposition() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    \r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <h1>Was möchten Sie tun?</h1>\r\n        <MenuList>\r\n          <Link to='/ProjectListNew'>\r\n          <MenuItem>Projekte freigeben</MenuItem>\r\n          </Link>\r\n          <Link to='/CreateProject' >\r\n          <MenuItem>Projekte erstellen</MenuItem>\r\n          </Link>\r\n          <Link>\r\n          <MenuItem>X</MenuItem>\r\n          </Link>\r\n        </MenuList>\r\n      </Paper>   \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\PersonLoggedIn.js",["218","219","220","221","222"],"import React, { Component } from 'react';\r\nimport StudentView from './StudentView'\r\nimport AdminView from './AdminView'\r\nimport DozentView from './DozentView'\r\nimport UserView from './UserView'\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\n\r\nclass PersonLoggedIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() \r\n    { \r\n        let page\r\n        let berechtigung = this.props.berechtigung\r\n        if (berechtigung === 1){\r\n            page = <> \r\n                    <Redirect to={{\r\n                    pathname: '/StudentView'\r\n                    }}\r\n                    />\r\n                    </>\r\n        }\r\n        else if (berechtigung === 2){\r\n            page = <>\t\r\n                    <Redirect to={{\r\n                    pathname: '/DozentView',\r\n                    state: { person : this.props.person }\r\n                    }}\r\n                    />\r\n                    </>\r\n        }\r\n        else if (berechtigung === 3){\r\n            page = <>\t\r\n                    <Redirect to={{\r\n                    pathname: '/AdminView',\r\n                    }}\r\n                    />\r\n                    </>\r\n        }\r\n        else {\r\n            page = <>\r\n                    <Redirect from='/' to='UserView' />\r\n                    <Route exact path='/UserView'>\r\n                    <UserView setRole={this.props.setRole} person={this.props.person}/>\r\n                    </Route>\r\n                    </>;\r\n        }\r\n        return(\r\n            <div>\r\n                {page}\r\n            </div>\r\n            \r\n            )\r\n         ;\r\n    }\r\n}\r\n \r\nexport default PersonLoggedIn; ","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\BusinessObject.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\ParticipationBO.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\ProjectBO.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\index.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjectList.js",["223","224","225"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { withRouter } from 'react-router-dom';\r\nimport  {AppApi}  from '../../AppApi';\r\nimport ContextErrorMessage from '../dialogs/ContextErrorMessage';\r\nimport LoadingProgress from '../dialogs/LoadingProgress';\r\nimport ProjectForm from '../dialogs/ParticipationForm';\r\nimport ProjectListEntry from './ProjectListEntry';\r\n\r\n/**\r\n * Controlls a list of ProjectListEntrys to create a accordion for each project.\r\n *\r\n * @see See [ProjectListEntry](#projectlistentry)\r\n *\r\n */\r\nclass ProjectList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // console.log(props);\r\n    // this.projectsFromEntry = this.projectsFromEntry.bind(this)\r\n\r\n    let expandedID = null;\r\n\r\n    if (this.props.location.expandProject) {\r\n      expandedID = this.props.location.expandProject.getID();\r\n    }\r\n\r\n    // let adminProf = null;\r\n\r\n    // if (this.props.location.state.adminProf) {\r\n    //   adminProf = this.props.location.state.adminProf\r\n    //   console.log(adminProf)\r\n    // }\r\n\r\n\r\n   \r\n   \r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      projects: [],\r\n      newProjects: [],\r\n      projectsInReview: [],\r\n      projectsReviewed: [],\r\n      filteredProjects: [],\r\n      projectFilter: '',\r\n      error: null,\r\n      loadingInProgress: false,\r\n      expandedProjectID: expandedID,\r\n      showProjectForm: false, //evtl.nicht \r\n      \r\n      adminProf:  this.props.location.state.adminProf, \r\n      person: this.props.location.state.linkState   \r\n    };\r\n  }\r\n\r\n  \r\n  // projectsFromEntry(){\r\n  //   this.setState({\r\n  //     projectsInReview: this.projectsFromEntry\r\n  //   })\r\n  // }\r\n  getProjectsByDozentNew = (person_id) => {\r\n    // console.log(\"vor fetch\")\r\n      var api = AppApi.getAPI()\r\n      api.getProjectsByDozentNew(person_id) //evtl. Objekt von API vorher anlegen\r\n        .then(projectBOs =>\r\n          this.setState({               // Set new state when ProjectBOs have been fetched\r\n            projects: projectBOs,\r\n            newProjects: [...projectBOs], // store a copy\r\n            loadingInProgress: false,   // disable loading indicator\r\n            error: null\r\n          })).catch(e =>\r\n            this.setState({             // Reset state with error from catch\r\n              projects: [],\r\n              loadingInProgress: false, // disable loading indicator\r\n              error: e\r\n            })\r\n          );\r\n  \r\n      // set loading to true\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n\r\n  /** Fetches all ProjectBOs from the backend */\r\n  getProjectsByDozentAccepted = (person_id) => {\r\n  // console.log(\"vor fetch\")\r\n    var api = AppApi.getAPI()\r\n    api.getProjectsByDozentAccepted(person_id) //evtl. Objekt von API vorher anlegen\r\n      .then(projectBOs =>\r\n        this.setState({               // Set new state when ProjectBOs have been fetched\r\n          projects: projectBOs,\r\n          filteredProjects: [...projectBOs], // store a copy\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null\r\n        })).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n            projects: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          })\r\n        );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n  }\r\n\r\n   /** Fetches all ProjectBOs from the backend */\r\n   getProjectsByDozentInReview = (person_id) => {\r\n     console.log(person_id)\r\n    // console.log(\"vor fetch\")\r\n      var api = AppApi.getAPI()\r\n      api.getProjectsByDozentInReview(person_id) //evtl. Objekt von API vorher anlegen\r\n        .then(projectBOs =>\r\n          this.setState({               // Set new state when ProjectBOs have been fetched\r\n            projectsInReview: projectBOs,\r\n            // filteredProjects: [...projectBOs], // store a copy\r\n            loadingInProgress: false,   // disable loading indicator\r\n            error: null\r\n          })).catch(e =>\r\n            this.setState({             // Reset state with error from catch\r\n              projectsInReview: [],\r\n              loadingInProgress: false, // disable loading indicator\r\n              error: e\r\n            })\r\n          );\r\n  \r\n      // set loading to true\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n\r\n    \r\n     /** Fetches all ProjectBOs from the backend */\r\n     getProjectsByDozentReviewed = (person_id) => {\r\n    // console.log(\"vor fetch\")\r\n      var api = AppApi.getAPI()\r\n      api.getProjectsByDozentReviewed(person_id) //evtl. Objekt von API vorher anlegen\r\n        .then(projectBOs =>\r\n          this.setState({               // Set new state when ProjectBOs have been fetched\r\n            projectsReviewed: projectBOs,\r\n            // filteredProjects: [...projectBOs], // store a copy\r\n            loadingInProgress: false,   // disable loading indicator\r\n            error: null\r\n          })).catch(e =>\r\n            this.setState({             // Reset state with error from catch\r\n              projectsReviewed: [],\r\n              loadingInProgress: false, // disable loading indicator\r\n              error: e\r\n            })\r\n          );\r\n  \r\n      // set loading to true\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n \r\n\r\n  /**\r\n   * Handles onExpandedStateChange events from the ProjectListEntry component. Toggels the expanded state of\r\n   * the ProjectListEntry of the given ProjectBO.\r\n   *\r\n   * @param {project} ProjectBO of the ProjectListEntry to be toggeled\r\n   */\r\n  onExpandedStateChange = project => {\r\n    // console.log(projectID);\r\n    // Set expandend project entry to null by default\r\n    let newID = null;\r\n\r\n    // If same project entry is clicked, collapse it else expand a new one\r\n    if (project.getID() !== this.state.expandedProjectID) {\r\n      // Expand the project entry with projectID\r\n      newID = project.getID();\r\n    }\r\n    // console.log(newID);\r\n    this.setState({\r\n      expandedProjectID: newID,\r\n    });\r\n  }\r\n\r\n  /** Handels onChange events of the project filter text field */\r\n  filterFieldValueChange = event => {\r\n    const value = event.target.value.toLowerCase();\r\n    this.setState({\r\n      filteredProjects: this.state.projects.filter(project => {\r\n        let nameContainsValue = project.getName().toLowerCase().includes(value);\r\n\r\n        return nameContainsValue\r\n      }),\r\n      projectFilter: value\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the clear filter button */\r\n  clearFilterFieldButtonClicked = () => {\r\n    // Reset the filter\r\n    this.setState({\r\n      filteredProjects: [...this.state.projects],\r\n      projectFilter: ''\r\n    });\r\n  }\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    let adminProf = this.props.location.state.adminProf\r\n    let person = this.props.location.state.linkState  \r\n    if (person === undefined){\r\n      this.getProjectsByDozentNew(adminProf.id);\r\n      this.getProjectsByDozentAccepted(adminProf.id);\r\n      this.getProjectsByDozentInReview(adminProf.id);\r\n      this.getProjectsByDozentReviewed(adminProf.id);\r\n    }\r\n    else{\r\n    // console.log(\"gerendert\")\r\n    this.getProjectsByDozentNew(person.id);\r\n    this.getProjectsByDozentAccepted(person.id);\r\n    this.getProjectsByDozentInReview(person.id);\r\n    this.getProjectsByDozentReviewed(person.id);\r\n    } \r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, } = this.props;\r\n    const { adminProf, person, newProjects, filteredProjects, projectsInReview, projectsReviewed, projectFilter, expandedProjectID, loadingInProgress, error} = this.state;\r\n\r\n    return (\r\n      <div>\r\n      <div className={classes.root}>\r\n        <h1>Pflegen Sie Ihre Projekte und bewerten Sie die Teilnehmer:</h1>\r\n        <Grid className={classes.projectFilter} container spacing={1} justify='flex-start' alignItems='center'>\r\n          <Grid item>\r\n            <Typography>\r\n              Projektfilter:\r\n              </Typography>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              autoFocus\r\n              fullWidth\r\n              id='projectFilter'\r\n              type='text'\r\n              value={projectFilter}\r\n              onChange={this.filterFieldValueChange}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position='end'>\r\n                  <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                    <ClearIcon />\r\n                  </IconButton>\r\n                </InputAdornment>,\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n      </div>\r\n\r\n      <div>\r\n\r\n      <h2>Projekte zur Freigabe übergeben</h2>\r\n        {\r\n          // Show the list of ProjectListEntry components\r\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n          newProjects.map(project =>\r\n            <ProjectListEntry \r\n              key={project.getID()}\r\n              project={project}\r\n              expandedState={expandedProjectID === project.getID()}\r\n              // projectsFromEntry={this.projectsFromEntry}\r\n              \r\n              person ={person} adminProf ={adminProf}\r\n              getProjectsByDozentNew = {this.getProjectsByDozentNew}\r\n              getProjectsByDozentInReview = {this.getProjectsByDozentInReview}\r\n              getProjectsByDozentReviewed = {this.getProjectsByDozentReviewed}\r\n              getProjectsByDozentAccepted = {this.getProjectsByDozentAccepted}\r\n            />)\r\n        }\r\n        \r\n        <h2>Akzeptierte Projekte</h2>\r\n        {\r\n          // Show the list of ProjectListEntry components\r\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n          filteredProjects.map(project =>\r\n            <ProjectListEntry key={project.getID()}\r\n              project={project}\r\n              expandedState={expandedProjectID === project.getID()}\r\n              // projectsFromEntry={this.projectsFromEntry}\r\n              onExpandedStateChange={this.onExpandedStateChange}\r\n              onProjectDeleted={this.projectDeleted}\r\n              person ={person} adminProf ={adminProf}\r\n              getProjectsByDozentNew = {this.getProjectsByDozentNew}\r\n              getProjectsByDozentInReview = {this.getProjectsByDozentInReview}\r\n              getProjectsByDozentReviewed = {this.getProjectsByDozentReviewed}\r\n              getProjectsByDozentAccepted = {this.getProjectsByDozentAccepted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByDozentAccepted} />\r\n        {/* <ProjectForm show={showProjectForm} onClose={this.projectFormClosed} /> */}\r\n        \r\n        <h2>Projekte in Bewertung</h2>\r\n        {\r\n          // Show the list of ProjectListEntry components\r\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n          projectsInReview.map(project =>\r\n            <ProjectListEntry key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}\r\n              onExpandedStateChange={this.onExpandedStateChange}\r\n              onProjectDeleted={this.projectDeleted}\r\n              person ={person} adminProf ={adminProf}\r\n              getProjectsByDozentNew = {this.getProjectsByDozentNew}\r\n              getProjectsByDozentInReview = {this.getProjectsByDozentInReview}\r\n              getProjectsByDozentReviewed = {this.getProjectsByDozentReviewed}\r\n              getProjectsByDozentAccepted = {this.getProjectsByDozentAccepted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByDozentInReview} />\r\n        {/* <ProjectForm show={showProjectForm} onClose={this.projectFormClosed} /> */}\r\n      </div>\r\n      \r\n      <div>\r\n        <h2> Bewertete Projekte</h2>\r\n          {\r\n            // Show the list of ProjectListEntry components\r\n            // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n            projectsReviewed.map(project =>\r\n              <ProjectListEntry key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}\r\n                onExpandedStateChange={this.onExpandedStateChange}\r\n                onProjectDeleted={this.projectDeleted}\r\n                person ={person} adminProf ={adminProf}\r\n                getProjectsByDozentNew = {this.getProjectsByDozentNew}\r\n                getProjectsByDozentInReview = {this.getProjectsByDozentInReview}\r\n                getProjectsByDozentReviewed = {this.getProjectsByDozentReviewed}\r\n                getProjectsByDozentAccepted = {this.getProjectsByDozentAccepted}\r\n              />)\r\n          }\r\n          <LoadingProgress show={loadingInProgress} />\r\n          <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByDozentReviewed} />\r\n          {/* <ProjectForm show={showProjectForm} onClose={this.projectFormClosed} /> */}\r\n          \r\n      </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  projectFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProjectList.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(ProjectList));","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjectListEntry.js",["226","227","228","229","230","231","232"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n// import ProjectForm from '../dialogs/ParticipationForm';\r\n// import ProjectDeleteDialog from '../../Components/dialogs/ProjectDeleteDialog';\r\nimport ParticipationList from './ParticipationList';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport {ProjectBO} from '../../AppApi';\r\nimport  {AppApi}  from '../../AppApi';\r\n\r\n/**\r\n * Renders a ProjectBO object within a expandable/collapsible ProjectListEntry with the project manipulation\r\n * functions. If expanded, it renders a AccountList.\r\n * \r\n * @see See [ProjectList](#projectlist)\r\n * \r\n */\r\nclass ProjectListEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      project: props.project,\r\n      showProjectForm: false,\r\n      showProjectDeleteDialog: false,\r\n      updatingInProgress: false,\r\n    };\r\n  }\r\n\r\n  updateProject = (new_state) => {\r\n    // clone the original cutomer, in case the backend call fails\r\n    console.log(new_state)\r\n    let updatedProject = Object.assign(new ProjectBO(), this.props.project);\r\n    // set the new attributes from our dialog\r\n    updatedProject.setProjectState(new_state);\r\n   \r\n    AppApi.getAPI().updateProject(updatedProject).then(project => {\r\n      this.setState({\r\n        project: project,\r\n        updatingInProgress: false,              // disable loading indicator  \r\n        updatingError: null                     // no error message\r\n      }\r\n      );\r\n      // this.parentCall();\r\n      // keep the new state as base state\r\n      // this.baseState.project = this.state.project;\r\n      // this.props.onClose(updatedProject);      // call the parent with the new project\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator \r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    }, \r\n    () => this.parentCall()\r\n    );\r\n  }\r\n\r\n  /** Handles onChange events of the underlying ExpansionPanel */\r\n  expansionPanelStateChanged = () => {\r\n    this.props.onExpandedStateChange(this.props.project);\r\n  }\r\n\r\n  /** Handles onAccountDelete events from an AccountListEntry  */\r\n  deleteAccountHandler = (deletedAccount) => {\r\n    // console.log(deletedAccount.getID());\r\n    this.setState({\r\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\r\n    })\r\n  }\r\n\r\n  evaluate(){\r\n    let zustand = this.state.project.project_state\r\n    // console.log(passed)\r\n    // if (passed !== undefined){\r\n      if (zustand == 4){\r\n        return \"In Bewertung\"\r\n      }      \r\n      else if (zustand == 5){\r\n        return \"Bewertung abgeschlossen\"\r\n      }   \r\n      \r\n    // }\r\n  }\r\n\r\n  parentCall = (() => {\r\n    if (this.props.adminProf === undefined){\r\n     \r\n      this.props.getProjectsByDozentNew(this.props.person.id)\r\n      this.props.getProjectsByDozentAccepted(this.props.person.id)\r\n      this.props.getProjectsByDozentInReview(this.props.person.id)\r\n      this.props.getProjectsByDozentReviewed(this.props.person.id)\r\n     \r\n    }\r\n    else{\r\n      \r\n      this.props.getProjectsByDozentNew(this.props.adminProf.id)\r\n      this.props.getProjectsByDozentAccepted(this.props.adminProf.id)\r\n      this.props.getProjectsByDozentInReview(this.props.adminProf.id)\r\n      this.props.getProjectsByDozentReviewed(this.props.adminProf.id)\r\n    }\r\n\r\n    \r\n  });\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, expandedState} = this.props;\r\n    // Use the states project\r\n    const { project} = this.state;\r\n\r\n    // console.log(this.state);\r\n    return (\r\n \r\n      project.project_state ===3?\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`project${project.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center' >\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{project.getName()}\r\n                </Typography>\r\n                </Grid>\r\n                <Grid direction=\"row\"\r\n                      alignItems=\"center\"\r\n                      justify=\"flex-end\">\r\n                <Button variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          className={classes.buttonFreigeben}\r\n                          startIcon={<CheckIcon/>}\r\n                          variant='outlined'\r\n                          color='primary' \r\n                          size='small'  \r\n                          onClick={() => this.updateProject(4)}>\r\n                  Bewerten\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs />\r\n              <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>List of Participations</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <ParticipationList show={expandedState} project={project} /> \r\n          </AccordionDetails>\r\n        </Accordion>\r\n      </div>\r\n\r\n      :project.project_state ===1?\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`project${project.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{project.getName()}\r\n                </Typography>\r\n              </Grid>\r\n                {/* <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>Status: {this.evaluate()}</Typography>\r\n              </Grid> */}\r\n\r\n              <Grid>\r\n                \r\n              </Grid>\r\n              <Grid item xs />\r\n              <Grid item>\r\n                \r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n             Dieses Projekt wird momentan noch geprüft und ist noch nicht freigegeben!\r\n          </AccordionDetails>\r\n        </Accordion>\r\n      </div>\r\n\r\n      :project.project_state ===4?\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`project${project.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{project.getName()}\r\n                </Typography>\r\n              </Grid>\r\n                {/* <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>Status: {this.evaluate()}</Typography>\r\n              </Grid> */}\r\n\r\n              <Grid>\r\n                <Button variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          className={classes.buttonFreigeben}\r\n                          startIcon={<CheckIcon/>}\r\n                          variant='outlined' color='primary' size='small'  onClick={() => this.updateProject(5)}>\r\n                  Bewertung abschließen\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs />\r\n              <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>List of Participations</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <ParticipationList show={expandedState} project={project} /> \r\n          </AccordionDetails>\r\n        </Accordion>\r\n      </div>\r\n      :\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`project${project.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{project.getName()}\r\n                </Typography>\r\n                {/* <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>Status: {this.evaluate()}</Typography>\r\n                </Grid> */}\r\n              </Grid>\r\n              <Grid item xs />\r\n              <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>List of Participations</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <ParticipationList show={expandedState} project={project} /> \r\n          </AccordionDetails>\r\n        </Accordion>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProjectListEntry.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjectBO to be rendered */\r\n  project: PropTypes.object.isRequired,\r\n  /** The state of this ProjectListEntry. If true the project is shown with its accounts */\r\n  expandedState: PropTypes.bool.isRequired,\r\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjectListEntry \r\n   * \r\n   * Signature: onExpandedStateChange(ProjectBO project)\r\n   */\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  /** \r\n   *  Event Handler function which is called after a sucessfull delete of this project.\r\n   * \r\n   * Signature: onProjectDelete(ProjectBO project)\r\n   */\r\n  onProjectDeleted: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(ProjectListEntry);\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ProjectDeleteDialog.js",[],["233","234"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjektErstellen.js",["235","236","237","238","239","240","241"],"import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n// import FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { Button } from '@material-ui/core';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Input from '@material-ui/core/Input';\r\nimport { AppApi } from '../../AppApi';\r\nimport ProjectBO from '../../AppApi/ProjectBO';\r\nimport {Link, useHistory} from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    width: \"100%\",\r\n  },\r\n  text: {\r\n    margin: theme.spacing(0),\r\n    width: \"100%\",\r\n  }\r\n}));\r\n\r\nfunction ProjektFormular(props) {\r\n  const classes = useStyles();\r\n  const [ProjektArt, setProjektArt] = React.useState('');\r\n  const [Professor, setProfessor] = React.useState(null);\r\n  const [Titel, setProjektTitel] = React.useState('');\r\n  const [Kapazität,setKapazität] = React.useState('');\r\n  const [Inhalt, setInhalt] = React.useState('');\r\n  const [Raum, setRaum] = React.useState('');\r\n  const [WT, setWT] = React.useState('Ja');\r\n  const [BTvorVZ, setBTvorVZ] = React.useState('0');\r\n  const [BTinPZ, setBTinPZ] = React.useState('0');\r\n  const [BTinVZ, setBTinVZ] = React.useState('0');\r\n  const [BesondererRaum, setBesondererRaum] = React.useState('');\r\n  const [Professors, setProfessors] = React.useState(['']);\r\n  const [extKoop, setextKoop] = React.useState('');\r\n  const [Semester, setSemester] = React.useState('');\r\n  const [Semesters, setSemesters] = React.useState(['']);\r\n  const [BT, setBT] = React.useState('');\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const history = useHistory()\r\n\r\n  const handleProjektArt = (event) => {\r\n    setProjektArt(event.target.value);\r\n  };\r\n\r\n  const handleProfessor = (event) => {\r\n    setProfessor(event.target.value);\r\n    console.log(Professor)\r\n  }\r\n\r\n  const handleSemester = (event) => {\r\n    setSemester(event.target.value);\r\n  }\r\n\r\n  const handleWT = (event) => {\r\n    setWT(event.target.value);\r\n  };\r\n\r\n\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const project = new ProjectBO(Titel)\r\n    project.setProjectType(ProjektArt)\r\n    project.setCapacity(Kapazität)\r\n    project.setShortDescription(Inhalt)\r\n    let dozent = props.location.state.linkState\r\n    project.setDozent(dozent.id)\r\n    project.setRoom(Raum)\r\n    project.setWeeklyFlag(WT)\r\n    project.setNumberBdBLecturetime(BTvorVZ)\r\n    project.setNumberBdLecturetime(BTinVZ)\r\n    project.setNumberBdExamtime(BTinPZ)\r\n    project.setSpecialRoom(BesondererRaum)\r\n    // project.setDozent(Professor)\r\n    project.setProjectState(1)\r\n    project.setExtPartnerList(extKoop)\r\n    project.setSemester(Semester.id)\r\n    project.setprefferedbd(BT)\r\n\r\n    if (Professor != null){\r\n      project.setDozent2(Professor.id)\r\n    }\r\n\r\n    console.log(project)\r\n\r\n    var api = AppApi.getAPI()\r\n        // console.log(api)\r\n        api.createProject(project).then((project) =>\r\n            {console.log(project)\r\n            }\r\n            )\r\n\r\n    // console.log(\r\n    //   'ProjektArt:', ProjektArt, \r\n    //   'Titel:', Titel,\r\n    //   'Kapazität:', Kapazität,\r\n    //   'Inhalt:', Inhalt,\r\n    //   'Raum:', Raum,\r\n    //   'Wöchentlich:', WT,\r\n    //   'Blocktage vor Beginn der VZ:', BTvorVZ,\r\n    //   'Blocktage in der PZ:', BTinPZ,\r\n    //   'BT in der VZ:', BTinVZ,\r\n    //   'Besonderer Raum:', BesondererRaum,\r\n    //   'Professors:', Professors,\r\n    //   'current dozent', dozent.id\r\n    //   );\r\n    history.push({\r\n      pathname: '/DozentView',\r\n      state: {  \r\n        person: props.location.state.linkState, \r\n      },\r\n    }); \r\n  }\r\n  \r\n\r\nfunction ProfList(){\r\n  var api = AppApi.getAPI()\r\n  api.getPersonByRole(2).then((persons) =>\r\n  {console.log(persons)\r\n  setProfessors(persons)})\r\n}\r\n\r\nfunction SemesterList(){\r\n  var api = AppApi.getAPI()\r\n  api.getSemesters().then((semesters) =>\r\n  {console.log(semesters)\r\n  setSemesters(semesters)})\r\n}\r\n\r\n// useEffect(() => {\r\n//   console.log(\"useEffect\")\r\n//   function ProfList(){\r\n//     var api = AppApi.getAPI()\r\n//     api.getPersonByRole(2).then((persons) =>\r\n//     {console.log(persons)\r\n//     setProfessors(persons)})\r\n//   }\r\n//   ProfList()\r\n//   // var Profs = props.location.state.linkState\r\n//   // setProfessors(Profs)\r\n//   console.log(Professors)\r\n//   }, []\r\n//   )\r\n\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <center>\r\n      <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <h1>Geben Sie die Daten für das neue Projekt an:</h1>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"artProjekt\">Art des Projekts</InputLabel>\r\n            <Select\r\n              labelId=\"artProjekt\"\r\n              id=\"ProjektArt\"\r\n              value={ProjektArt}\r\n              onChange={handleProjektArt}\r\n            >\r\n              <MenuItem value={1}>Fachspezifisches Projekt</MenuItem>\r\n              <MenuItem value={2}>Interdisziplinäres Projekt</MenuItem>\r\n              <MenuItem value={3}>Transdisziplinäres Projekt</MenuItem>\r\n\r\n              </Select>\r\n        </FormControl>\r\n        <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"semester\">Semester</InputLabel>\r\n              <Select\r\n                labelId=\"semester\"\r\n                id=\"semester\"\r\n                value={Semester}\r\n                onChange={handleSemester} \r\n                onOpen={SemesterList}\r\n              >\r\n              {\r\n              Semesters.map((semester) => <MenuItem value = {semester}> {semester.name} </MenuItem>)\r\n              }\r\n              </Select>\r\n              </FormControl>\r\n        {/* <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"semester\">Semester</InputLabel>\r\n              <Select\r\n                labelId=\"semester\"\r\n                id=\"semester\"\r\n                value={Semester}\r\n                onChange={handleSemester} \r\n                onOpen={SemesterList}\r\n              >\r\n              {\r\n              Semester.map((Semester) => <MenuItem value = {Semester.id}> {Semester.name} </MenuItem>)\r\n              }\r\n              </Select>\r\n              </FormControl> */}\r\n      </div>\r\n          <div><TextField className={classes.formControl}\r\n            id=\"titelProjekt\" \r\n            label=\"Titel des Projekts\" \r\n            variant=\"outlined\"\r\n            value={Titel}\r\n            onInput={e=>setProjektTitel(e.target.value)}\r\n            />\r\n            \r\n          </div>\r\n          <div><TextField className={classes.formControl}\r\n            id=\"maxTeilnehmer\"\r\n            label=\"Kapazität (max. Teilnehmerzahl)\"\r\n            type=\"number\" \r\n            variant=\"outlined\" \r\n            value={Kapazität}\r\n            onInput={e=>setKapazität(e.target.value)}\r\n            />\r\n            \r\n          </div>\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"artProjekt\">weitere betreuende Professoren</InputLabel>\r\n              <Select\r\n                labelId=\"artProjekt\"\r\n                id=\"ProjektArt\"\r\n                value={Professor}\r\n                onChange={handleProfessor} \r\n                onOpen={ProfList}\r\n              >\r\n              {\r\n              Professors.map((Professor) => <MenuItem value = {Professor}> {Professor.name} </MenuItem>)\r\n              }\r\n              </Select>\r\n              </FormControl>\r\n              <div><TextField className={classes.formControl}\r\n                      id=\"ext. Koop.\"\r\n                      label=\"externe Kooperationspartner\"\r\n                      variant=\"outlined\"\r\n                      value={extKoop}\r\n                      onInput={e=>setextKoop(e.target.value)}\r\n                      />\r\n                </div>\r\n                <div><TextField className={classes.formControl}\r\n                    id=\"Inhalt\"\r\n                    label=\"Inhalt(Kurzbeschreibung):\"\r\n                    multiline\r\n                    rows={6} \r\n                    variant=\"outlined\" \r\n                    value={Inhalt}\r\n                    onInput={e=>setInhalt(e.target.value)}\r\n                    />\r\n                </div>\r\n              <div>\r\n              <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                  <FormLabel component=\"legend\">Wöchentliche Termine</FormLabel>\r\n                  <RadioGroup aria-label=\"WT\" name=\"WT\" value={WT} onChange={handleWT}>\r\n                    <FormControlLabel value=\"true\" control={<Radio />} label=\"Ja\" />\r\n                    <FormControlLabel value=\"false\" control={<Radio />} label=\"Nein\" />\r\n                  </RadioGroup>\r\n              </FormControl>\r\n              </div>\r\n              <div><TextField className={classes.formControl}\r\n                    id=\"BT vor der VZ\"\r\n                    label=\"Blocktage vor Beginn der Vorlesungszeit \"\r\n                    variant=\"outlined\" \r\n                    type=\"number\"\r\n                    value={BTvorVZ}\r\n                    onInput={e=>setBTvorVZ(e.target.value)}\r\n                    />\r\n               </div>\r\n              <div><TextField className={classes.formControl}\r\n                    id=\"BT in der PZ\"\r\n                    label=\"Blocktage in der Prüfungszeit (nur inter-/tans. Projekte)\"\r\n                    variant=\"outlined\"\r\n                    type=\"number\" \r\n                    value={BTinPZ}\r\n                    onInput={e=>setBTinPZ(e.target.value)}\r\n                    />\r\n              </div>    \r\n              <div>\r\n                    <TextField className={classes.formControl}\r\n                    id=\"BTSamstag\"\r\n                    label=\"Blocktage (Samstag) in der Vorlesungszeit\"\r\n                    variant=\"outlined\"\r\n                    type=\"number\" \r\n                    value={BTinVZ}\r\n                    onInput={e=>setBTinVZ(e.target.value)}\r\n                    />\r\n               </div>\r\n               <div>\r\n                 <TextField className={classes.formControl}\r\n                    id=\"Blocktage\"\r\n                    label=\"präferierte Blocktage\"\r\n                    type=\"date\" \r\n                    variant=\"outlined\" \r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    onInput={e=>setBT(e.target.value)}\r\n                  />\r\n               </div>\r\n               <div><TextField className={classes.formControl}\r\n                    id=\"BesondererRaum\"\r\n                    label=\"Besonderer Raum (falls notwendig)\"\r\n                    variant=\"outlined\" \r\n                    value={BesondererRaum}\r\n                    onInput={e=>setBesondererRaum(e.target.value)}\r\n                    />\r\n               </div>\r\n            <div>\r\n              {/* <Link to={{\r\n              pathname: \"/DozentView\",\r\n              state: { person : props.location.state.linkState }\r\n              }}> */}\r\n                <Button\r\n                 type=\"submit\"\r\n                 variant=\"contained\"\r\n                 color=\"primary\" \r\n                >\r\n                  Speichern\r\n                </Button>\r\n              {/* </Link> */}\r\n            </div>\r\n          </form>\r\n          </center>\r\n      </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ProjektFormular;\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ParticipationList.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ParticipationListEntry.js",["242","243","244","245","246"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\StudentBO.js",["247"],"import BusinessObject from './BusinessObject';\r\nimport PersonBO from './PersonBO';\r\n\r\n/**\r\n * Represents a Role of the system\r\n */\r\nexport default class StudentBO extends PersonBO {\r\n\r\n  /**\r\n   * Constructs a RoleBO object with a given name\r\n   * \r\n   * @param {String} aname - the name of this RoleBO.\r\n   */\r\n  constructor(aname, astudiengang, amatr_nr, aperson_id) {\r\n    super();\r\n    this.name = aname\r\n    this.studiengang = astudiengang;\r\n    this.matr_nr = amatr_nr;\r\n    this.person_id = aperson_id\r\n  }\r\n\r\n  setName(aname) {\r\n    this.name = aname\r\n  }\r\n\r\n  getName() {\r\n    return this.name\r\n  }\r\n\r\n  setStudiengang(astudiengang){\r\n      this.studiengang = astudiengang\r\n  }\r\n\r\n  getStudiengang(){\r\n      return this.studiengang\r\n  }\r\n\r\n  setMatrNr(amatr_nr){\r\n      this.matr_nr = amatr_nr\r\n  }\r\n\r\n  getMatrNr(){\r\n      return this.matr_nr\r\n  }\r\n\r\n  setPerson(aperson_id){\r\n    this.person_id = aperson_id\r\n  }\r\n\r\n  getPerson(){\r\n    return this.person_id\r\n  }\r\n\r\n\r\n    /** \r\n   * Returns an Array of ParticipationBOs from a given JSON structure.\r\n   */\r\n  static fromJSON(student) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(student)) {\r\n      student.forEach((p) => {\r\n        Object.setPrototypeOf(p, StudentBO.prototype);\r\n        result.push(p);\r\n      })\r\n    } else {\r\n      // Es handelt sich offenbar um ein singuläres Objekt\r\n      let p = student;\r\n      Object.setPrototypeOf(p, StudentBO.prototype);\r\n      result.push(p);\r\n    }\r\n\r\n    return result;\r\n  }\r\n}","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\GradingBO.js",["248"],"import BusinessObject from './BusinessObject';\r\n\r\n\r\n/**\r\n * Represents a person of the system\r\n */\r\nexport default class GradingBO extends BusinessObject {\r\n\r\n  /**\r\n   * Constructs a GradingBO object with a given creation_date, grade, passed\r\n   * \r\n   * @param {String} aname - the name of this GradingBO.\r\n   */\r\n  constructor(agrade, aparticipation_id) {\r\n    super();\r\n    this.creation_date = null\r\n    this.grade = agrade\r\n    this.passed = false\r\n    this.participation = aparticipation_id\r\n  }\r\n\r\n  /**\r\n   * Sets a new name\r\n   * \r\n   * @param {String} aname - the new name of this PersonBO.\r\n   */\r\n  setCreationDate(acreation_date) {\r\n    this.creation_date = acreation_date\r\n  }\r\n\r\n  /**\r\n   * Gets the name.\r\n   */\r\n  getCreationDate() {\r\n    return this.getCreationDate\r\n  }\r\n\r\n  setGrade(agrade){\r\n    if (agrade <= 4.0){\r\n      this.setPassed(true)}\r\n    else{\r\n      this.setPassed(false)\r\n    }\r\n\r\n    this.grade = agrade\r\n  }\r\n  \r\n\r\n  getGrade(){\r\n    return this.grade\r\n  }\r\n\r\n  setPassed(apassed){\r\n    this.passed = apassed\r\n  }\r\n  // setPassed(){\r\n  //   if (this.grade <= 4.0) {\r\n  //     this.passed = true\r\n  //   }\r\n  // }\r\n  getPassed(){\r\n    if (this.passed == 1){\r\n      return \"Bestanden\"\r\n    }      \r\n    else {\r\n      return \"Nicht Bestanden\"\r\n    }\r\n  }\r\n\r\n  setParticipation(aparticipation_id) {\r\n    this.participation = aparticipation_id\r\n  }\r\n  \r\n  getParticipation(){\r\n    return this.participation\r\n  }\r\n\r\n\r\n\r\n  /** \r\n   * Returns an Array of GradingBO from a given JSON structure.\r\n   */\r\n  static fromJSON(grading) {\r\n    let result = [];\r\n\r\n    if (Array.isArray(grading)) {\r\n      grading.forEach((p) => {\r\n        Object.setPrototypeOf(p, GradingBO.prototype);\r\n        result.push(p);\r\n      })\r\n    } else {\r\n      // Es handelt sich offenbar um ein singuläres Objekt\r\n      let p = grading;\r\n      Object.setPrototypeOf(p, GradingBO.prototype);\r\n      result.push(p);\r\n    }\r\n\r\n    return result;\r\n  }\r\n}","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ParticipationForm.js",["249","250","251"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton,Typography, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { AppApi} from '../../AppApi';\r\nimport ParticipationBO from '../../AppApi/ParticipationBO';\r\n// import AppAPI  from '../../AppApi/AppApi';\r\nimport StudentBO from '../../AppApi/StudentBO';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a ParticipationBO in prop participation. If the participation is set, the dialog is configured \r\n * as an edit dialog and the text fields of the form are filled from the given ParticipationBO object. \r\n * If the participation is null, the dialog is configured as a new participation dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a participation. \r\n * After that, the function of the onClose prop is called with the created/update ParticipationBO object as parameter.  \r\n * When the dialog is canceled, onClose is called with null.\r\n * \r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n */\r\nclass ParticipationForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let m = '';\r\n    if (props.student) {\r\n      m = props.student.matr_nr;\r\n      \r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      \r\n      matr_nr: m,\r\n      matr_nrValidationFailed: false,\r\n      matr_nrEdited: false,\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null,\r\n      student: ''\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  getStudentByMatrikelNummer = (matr_nr) => {\r\n    var api = AppApi.getAPI()\r\n    api.getStudentByMatrikelNummer(matr_nr).then(student =>\r\n      this.setState({\r\n        student: student,\r\n        loadingInProgress: false, // loading indicator \r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch \r\n          student: null,\r\n          loadingInProgress: false,\r\n          loadingError: e,\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      balance: 'loading',\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  setStudent = (student) => {\r\n    this.props.setStud(student)  \r\n  }\r\n\r\n  /** Updates the participation */\r\n  updateParticipation = () => {\r\n    this.setStudent(this.state.student)\r\n    console.log(this.props.participation)\r\n    // clone the original participation, in case the backend call fails\r\n    let updatedParticipation = Object.assign(new ParticipationBO(), this.props.participation);\r\n    \r\n    // set the new attributes from our dialog\r\n    console.log(this.state.student.id)\r\n    updatedParticipation.setStudent(this.state.student.id);\r\n    console.log(updatedParticipation)\r\n    \r\n    AppApi.getAPI().updateParticipation(updatedParticipation).then(participation => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator  \r\n        updatingError: null                     // no error message\r\n      });\r\n      // keep the new state as base state\r\n      this.baseState.matr_nr = this.state.matr_nr;\r\n      this.props.onClose(updatedParticipation);      // call the parent with the new participation\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator \r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n    });\r\n\r\n    if(value.length === 5){\r\n      this.getStudentByMatrikelNummer(event.target.value)\r\n    \r\n      this.setState({\r\n        matr_nrValidationFailed: false,\r\n      })\r\n    }\r\n\r\n    else if(value.length <5) {\r\n      this.setState({\r\n        matr_nrValidationFailed: true,\r\n      })\r\n    }\r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, participation, show } = this.props;\r\n    const { matr_nr, matr_nrValidationFailed, matr_nrEdited, addingInProgress,\r\n      addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='matr_nr' label='Matrikelnummer:' value={matr_nr} \r\n                onChange={this.textFieldValueChange} error={matr_nrValidationFailed} \r\n                helperText={matr_nrValidationFailed ? 'Bitte geben Sie 5 Zeichen ein' : ' '} />\r\n            </form>\r\n            <div>\r\n          <Typography className={classes.participationEntry}>      \r\n      \r\n             {\"Ausgewählter Student:\" +\" \"} {this.state.student.name}\r\n      \r\n          </Typography>\r\n             </div>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of participation prop\r\n              // project ?\r\n            <ContextErrorMessage error={updatingError} contextErrorMsg={`The participation ${participation.getID()} could not be updated.`} onReload={this.updateParticipation} />\r\n                // :\r\n                // <ContextErrorMessage error={addingError} contextErrorMsg={`The project could not be added.`} onReload={this.addParticipation} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a participation is given, show an update button, else an add button\r\n              participation ?\r\n                <Button disabled={matr_nrValidationFailed} variant='contained' onClick={this.updateParticipation} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={matr_nrValidationFailed || !matr_nrEdited} variant='contained' onClick={this.addProject} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nParticipationForm.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ParticipationBO to be edited */\r\n  participation: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**  \r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created ParticipationBO as parameter or null, if cancel was pressed.\r\n   *  \r\n   * Signature: onClose(ParticipationBO participation);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ParticipationForm);\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\ReleaseProject.js",["252","253"],"import React, {useState,useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport List from '@material-ui/core/List';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport {AppApi} from '../../../AppApi';\r\nimport ProjectBO from '../../../AppApi';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 'auto',\r\n  },\r\n  cardHeader: {\r\n    padding: theme.spacing(1, 2),\r\n  },\r\n  list: {\r\n    width: 200,\r\n    height: 230,\r\n    backgroundColor: theme.palette.background.paper,\r\n    overflow: 'auto',\r\n  },\r\n  button: {\r\n    margin: theme.spacing(0.5, 0),\r\n  },\r\n}));\r\n\r\nfunction not(a, b) {\r\n  return a.filter((value) => b.indexOf(value) === -1);\r\n}\r\n\r\nfunction intersection(a, b) {\r\n  return a.filter((value) => b.indexOf(value) !== -1);\r\n}\r\n\r\nfunction union(a, b) {\r\n  return [...a, ...not(b, a)];\r\n}\r\n\r\nexport default function TransferList() {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = React.useState([]);\r\n  const [left, setLeft] = React.useState(['']);\r\n  const [right, setRight] = React.useState([]);\r\n\r\n  const leftChecked = intersection(checked, left);\r\n  const rightChecked = intersection(checked, right);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const numberOfChecked = (items) => intersection(checked, items).length;\r\n\r\n  const handleToggleAll = (items) => () => {\r\n    if (numberOfChecked(items) === items.length) {\r\n      setChecked(not(checked, items));\r\n    } else {\r\n      setChecked(union(checked, items));\r\n    }\r\n  };\r\n\r\n  const handleCheckedRight = () => {\r\n    setRight(right.concat(leftChecked));\r\n    setLeft(not(left, leftChecked));\r\n    setChecked(not(checked, leftChecked));\r\n  };\r\n\r\n  const handleCheckedLeft = () => {\r\n    setLeft(left.concat(rightChecked));\r\n    setRight(not(right, rightChecked));\r\n    setChecked(not(checked, rightChecked));\r\n  };\r\n\r\n    /** Fetches all ProjectBOs with State-New from the backend */\r\n  const getProjectsByStateNew = () => {\r\n    // console.log(\"vor fetch\")\r\n      var api = AppApi.getAPI()\r\n      api.getProjectsByStateNew() //evtl. Objekt von API vorher anlegen\r\n        .then(projectBOs => {\r\n          setLeft(projectBOs)});          // Set new state when ProjectBOs have been fetched\r\n            \r\n            // filteredProjects: [...projectBOs], // store a copy\r\n            // loadingInProgress: false,   // disable loading indicator\r\n            // error: null\r\n          // })).catch(e =>\r\n          //   this.setState({             // Reset state with error from catch\r\n          //     left: [],\r\n          //     // loadingInProgress: false, // disable loading indicator\r\n          //     // error: e\r\n          //   })\r\n          // );\r\n  \r\n    //   // set loading to true\r\n    //   this.setState({\r\n    //     loadingInProgress: true,\r\n    //     error: null\r\n    //   });\r\n    };\r\n\r\n  useEffect (() => getProjectsByStateNew());\r\n  // const componentDidMount = () => {\r\n  //   // console.log(\"gerendert\")\r\n  //   this.getProjectsByStateNew();\r\n  // };\r\n\r\n  const customList = (title, items) => (\r\n    <Card>\r\n      <CardHeader\r\n        className={classes.cardHeader}\r\n        avatar={\r\n          <Checkbox\r\n            onClick={handleToggleAll(items)}\r\n            checked={numberOfChecked(items) === items.length && items.length !== 0}\r\n            indeterminate={numberOfChecked(items) !== items.length && numberOfChecked(items) !== 0}\r\n            disabled={items.length === 0}\r\n            inputProps={{ 'aria-label': 'all items selected' }}\r\n          />\r\n        }\r\n        title={title}\r\n        subheader={`${numberOfChecked(items)}/${items.length} selected`}\r\n      />\r\n      <Divider />\r\n      <List className={classes.list} dense component=\"div\" role=\"list\">\r\n        {items.map((value) => { console.log(items, value.name)\r\n          const labelId = `transfer-list-all-item-${value.name}-label`;\r\n\r\n          return (\r\n            <ListItem key={value} role=\"listitem\" button onClick={handleToggle(value)}>\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  checked={checked.indexOf(value) !== -1}\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{ 'aria-labelledby': labelId }}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={`List item ${value + 1}`} />\r\n              {/* <ListItemText projectName={value.name} id={labelId} primary={`List item ${value + 1}`} /> */}\r\n              \r\n            </ListItem>\r\n          );\r\n        })}\r\n        <ListItem />\r\n      </List>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <Grid container spacing={2} justify=\"center\" alignItems=\"center\" className={classes.root}>\r\n      <Grid item>{customList('Neue Projekte', left)}</Grid>\r\n      <Grid item>\r\n        <Grid container direction=\"column\" alignItems=\"center\">\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.button}\r\n            onClick={handleCheckedRight}\r\n            disabled={leftChecked.length === 0}\r\n            aria-label=\"move selected right\"\r\n          >\r\n            &gt;\r\n          </Button>\r\n          <Button\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.button}\r\n            onClick={handleCheckedLeft}\r\n            disabled={rightChecked.length === 0}\r\n            aria-label=\"move selected left\"\r\n          >\r\n            &lt;\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>{customList('Akzeptierte Projekte', right)}</Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\ProjectListNew.js",["254","255","256","257","258","259","260","261","262"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport  {AppApi}  from '../../../AppApi';\r\nimport ContextErrorMessage from '../../dialogs/ContextErrorMessage';\r\nimport LoadingProgress from '../../dialogs/LoadingProgress';\r\nimport ProjectListEntryNew from './ProjectListEntryNew';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n/**\r\n * Controlls a list of ProjectListEntrys to create a accordion for each project.\r\n *\r\n * @see See [ProjectListEntry](#projectlistentry)\r\n *\r\n */\r\nclass ProjectListNew extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // // console.log(props);\r\n    // let expandedID = null;\r\n\r\n    // if (this.props.location.expandProject) {\r\n    //   expandedID = this.props.location.expandProject.getID();\r\n    // }\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      projectsNew: [],\r\n      projectsAccepted: [],\r\n      projectsDeclined: [],\r\n      error: null,\r\n      loadingInProgress: false,\r\n      // expandedProjectID: expandedID,\r\n    };\r\n  }\r\n\r\n  getProjectsByStateNew = () => {\r\n    // console.log(\"vor fetch\")\r\n      var api = AppApi.getAPI()\r\n      api.getProjectsByState(1) //evtl. Objekt von API vorher anlegen\r\n        .then(projectBOs =>\r\n          this.setState({\r\n          projectsNew: projectBOs,\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null\r\n        })).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n            projectsNew: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          })\r\n        );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n  }\r\n\r\n  getProjectsByStateAccepted = () => {\r\n    // console.log(\"vor fetch\")\r\n      var api = AppApi.getAPI()\r\n      api.getProjectsByState(3) //evtl. Objekt von API vorher anlegen\r\n        .then(projectBOs =>\r\n          this.setState({\r\n          projectsAccepted: projectBOs,\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null\r\n        })).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n            projectsAccepted: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          })\r\n        );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n  }\r\n\r\n  getProjectsByStateDeclined = () => {\r\n    // console.log(\"vor fetch\")\r\n      var api = AppApi.getAPI()\r\n      api.getProjectsByState(2) //evtl. Objekt von API vorher anlegen\r\n        .then(projectBOs =>\r\n          this.setState({\r\n          projectsDeclined: projectBOs,\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null\r\n        })).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n            projectsDeclined: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          })\r\n        );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n  }\r\n\r\n\r\n  // /**\r\n  //  * Handles onExpandedStateChange events from the ProjectListEntry component. Toggels the expanded state of\r\n  //  * the ProjectListEntry of the given ProjectBO.\r\n  //  *\r\n  //  * @param {project} ProjectBO of the ProjectListEntry to be toggeled\r\n  //  */\r\n  // onExpandedStateChange = project => {\r\n  //   // console.log(projectID);\r\n  //   // Set expandend project entry to null by default\r\n  //   let newID = null;\r\n\r\n  //   // If same project entry is clicked, collapse it else expand a new one\r\n  //   if (project.getID() !== this.state.expandedProjectID) {\r\n  //     // Expand the project entry with projectID\r\n  //     newID = project.getID();\r\n  //   }\r\n  //   // console.log(newID);\r\n  //   this.setState({\r\n  //     expandedProjectID: newID,\r\n  //   });\r\n  // }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    // console.log(\"gerendert\")\r\n    this.getProjectsByStateNew();\r\n    this.getProjectsByStateDeclined();\r\n    this.getProjectsByStateAccepted();\r\n  }\r\n\r\n   /** Lifecycle method, which is called when the component was updated */\r\n   componentDidUpdate(prevProps) {\r\n    // reload participations if shown state changed. Occures if the ProjectListEntrys ExpansionPanel was expanded\r\n    if ((this.props.show !== prevProps.show)) { \r\n    this.getProjectsByStateNew();\r\n    this.getProjectsByStateDeclined();\r\n    this.getProjectsByStateAccepted();\r\n    }\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { filteredProjects, projectsNew, projectsAccepted, projectsDeclined,  projectFilter, expandedProjectID, loadingInProgress, error, showProjectForm } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <h1>Neue Projekte</h1>\r\n        {\r\n          // Show the list of ProjectListEntry components\r\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n          projectsNew.map(project => \r\n            <ProjectListEntryNew key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}\r\n              onExpandedStateChange={this.onExpandedStateChange}\r\n              onProjectDeleted={this.projectDeleted} getProjectsByStateNew={this.getProjectsByStateNew} getProjectsByStateDeclined={this.getProjectsByStateDeclined} \r\n              getProjectsByStateAccepted={this.getProjectsByStateAccepted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByStateNew} />\r\n        <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={6}>\r\n        <h1>Freigegebene Projekte</h1>\r\n          <Paper className={classes.paper}>\r\n          {\r\n          // Show the list of ProjectListEntry components\r\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n          projectsAccepted.map(project =>\r\n            <ProjectListEntryNew key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}\r\n              onExpandedStateChange={this.onExpandedStateChange}\r\n              onProjectDeleted={this.projectDeleted} getProjectsByStateNew={this.getProjectsByStateNew} getProjectsByStateDeclined={this.getProjectsByStateDeclined} \r\n              getProjectsByStateAccepted={this.getProjectsByStateAccepted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByStateAccepted} />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n        <h1>Abgelehnte Projekte</h1>\r\n          <Paper className={classes.paper}>\r\n          {\r\n          // Show the list of ProjectListEntry components\r\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n          projectsDeclined.map(project =>\r\n            <ProjectListEntryNew key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}\r\n              onExpandedStateChange={this.onExpandedStateChange}\r\n              onProjectDeleted={this.projectDeleted} getProjectsByStateNew={this.getProjectsByStateNew} getProjectsByStateDeclined={this.getProjectsByStateDeclined} \r\n              getProjectsByStateAccepted={this.getProjectsByStateAccepted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByStateDeclined} /> \r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n        </div>\r\n        \r\n        {/* <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByState} /> */}\r\n        {/* <ProjectForm show={showProjectForm} onClose={this.projectFormClosed} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  projectFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'left',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nProjectListNew.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(ProjectListNew));","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\ProjectListEntryNew.js",["263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button,ButtonGroup } from '@material-ui/core';\r\nimport  {AppApi}  from '../../../AppApi';\r\nimport {ProjectBO} from '../../../AppApi';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ReplyRoundedIcon from '@material-ui/icons/ReplyRounded';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n// import List from '@material-ui/core/List';\r\n// import ListItem from '@material-ui/core/ListItem';\r\n\r\n\r\n\r\n\r\n/**\r\n * Renders a ProjectBO object within a expandable/collapsible ProjectListEntryNew with the project manipulation\r\n * functions. If expanded, it renders a AccountList.\r\n * \r\n * @see See [ProjectListNew](#projectlist)\r\n * \r\n */\r\nclass ProjectListEntryNew extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      project: props.project,\r\n      showProjectForm: false,\r\n      showProjectDeleteDialog: false,\r\n      updatedProject: null\r\n    };\r\n  }\r\n\r\n  updateProject = (new_state) => {\r\n    // clone the original cutomer, in case the backend call fails\r\n    console.log(new_state)\r\n    let updatedProject = Object.assign(new ProjectBO(), this.props.project);\r\n    // set the new attributes from our dialog\r\n    updatedProject.setProjectState(new_state);\r\n   \r\n    AppApi.getAPI().updateProject(updatedProject).then(project => {\r\n      this.setState({\r\n        // project: project,\r\n        updatingInProgress: false,              // disable loading indicator  \r\n        updatingError: null,\r\n        updatedProject: updatedProject,                 // no error message\r\n      }, () => this.updateParentComponent());\r\n      // keep the new state as base state\r\n      this.baseState.project = this.state.project;\r\n      this.props.onClose(updatedProject);      // call the parent with the new project\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator \r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Delete accepted Project */\r\n  deleteProject = () => {\r\n    const { project } = this.props;\r\n    var api = AppApi.getAPI()\r\n    api.deleteProject(project.getID()).then(() => {\r\n      this.setState({  // Set new state when ParticipationBOs have been fetched\r\n        deletingInProgress: false, // loading indicator \r\n        deletingError: null\r\n      })\r\n      // console.log(participation);\r\n      this.props.onProjectDeleted(project);\r\n    }).catch(e =>\r\n      this.setState({ // Reset state with error from catch \r\n        deletingInProgress: false,\r\n        deletingError: e\r\n      })\r\n    );\r\n    // set loading to true\r\n    this.setState({\r\n      deletingInProgress: true,\r\n      deletingError: null\r\n    });\r\n  }\r\n\r\n\r\n  updateParentComponent = (() => {\r\n    this.props.getProjectsByStateNew()\r\n    this.props.getProjectsByStateDeclined()\r\n    this.props.getProjectsByStateAccepted()\r\n    console.log(\"else if state 3\")\r\n})\r\n\r\n//   /** Handles onChange events of the underlying ExpansionPanel */\r\n//   expansionPanelStateChanged = () => {\r\n//     this.props.onExpandedStateChange(this.props.project);\r\n//   }\r\n\r\n//   /** Handles onAccountDelete events from an AccountListEntry  */\r\n//   deleteAccountHandler = (deletedAccount) => {\r\n//     // console.log(deletedAccount.getID());\r\n//     this.setState({\r\n//       accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\r\n//     })\r\n//   }\r\n\r\n/** Handles click events from the transfer money button */\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, expandedState } = this.props;\r\n    // Use the states project\r\n    const { project, showProjectForm, showProjectDeleteDialog } = this.state;\r\n\r\n    // console.log(this.state);\r\n    return (\r\n      project.project_state ===1?\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            // expandIcon={<ExpandMoreIcon />}\r\n            id={`project${project.getID()}accountpanel-header`}\r\n          >\r\n            \r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{\"Projekt:\" + \" \" + project.getName()} \r\n                  <Button variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          className={classes.buttonFreigeben}\r\n                          startIcon={<CheckIcon/>}\r\n                          variant='outlined' color='primary' size='small'  onClick={() => this.updateProject(3)}>\r\n                  Freigeben\r\n                  </Button>\r\n                  <Button variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          className={classes.buttonAblehnen}\r\n                          startIcon={<HighlightOffIcon/>}\r\n                          variant='outlined' color='primary' size='small' onClick={() => this.updateProject(2)}>\r\n                  Ablehnen\r\n                  </Button>\r\n                </Typography>\r\n                <Typography variant='body1' className={classes.heading}>{\"Beschreibung:\"+ \" \"+ project.getShortDescription()} \r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n         <AccordionDetails> \r\n          </AccordionDetails>\r\n        </Accordion> \r\n      </div>\r\n      : project.project_state ===2?\r\n      <div>\r\n      <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n        <AccordionSummary\r\n          // expandIcon={<ExpandMoreIcon />}\r\n          id={`project${project.getID()}accountpanel-header`}\r\n        >\r\n          \r\n          <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n            <Grid item>\r\n              <Typography variant='body1' className={classes.heading}>{\"Projekt:\" + \" \" + project.getName()} \r\n                <Button variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        className={classes.button}\r\n                        startIcon={<CheckIcon/>}\r\n                className={classes.button} variant='outlined' color='primary' size='small'  onClick={() => this.updateProject(3)}>\r\n                Freigeben\r\n                </Button>\r\n                <Button variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        className={classes.button}\r\n                        startIcon={<ReplyRoundedIcon/>}\r\n                className={classes.button} variant='outlined' color='primary' size='small' onClick={() => this.updateProject(1)}>\r\n                Rückgängig\r\n                </Button>\r\n                 \r\n              <Button variant= \"contained\" color='secondary' size='small' endIcon={<DeleteIcon/>} onClick={() => this.updateProject(0)}>\r\n             Löschen\r\n            </Button>        \r\n              \r\n              </Typography>\r\n              <Typography variant='body1' className={classes.heading}>{\"Beschreibung:\"+ \" \"+ project.getShortDescription()} \r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </AccordionSummary>\r\n       <AccordionDetails> \r\n        </AccordionDetails>\r\n      </Accordion> \r\n    </div>\r\n    : \r\n    <div>\r\n    <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n      <AccordionSummary\r\n        // expandIcon={<ExpandMoreIcon />}\r\n        id={`project${project.getID()}accountpanel-header`}\r\n      >\r\n        \r\n        <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n          <Grid item>\r\n            <Typography variant='body1' className={classes.heading}>{\"Projekt:\" + \" \" + project.getName()} \r\n              <Button variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      className={classes.button}\r\n                      startIcon={<HighlightOffIcon/>}\r\n              className={classes.button} variant='outlined' color='primary' size='small' onClick={() => this.updateProject(2)}>\r\n              Ablehnen\r\n              </Button>\r\n              <Button variant=\"contained\"\r\n                      color=\"secondary\"\r\n                      className={classes.button}\r\n                      startIcon={<ReplyRoundedIcon/>}\r\n              className={classes.button} variant='outlined' color='primary' size='small'  onClick={() => this.updateProject(1)}>\r\n              Rückgängig\r\n              </Button>\r\n              <Button variant= \"contained\" color='secondary' size='small' endIcon={<DeleteIcon/>} onClick={() => this.updateProject(0)}>\r\n             Löschen\r\n            </Button> \r\n            </Typography>\r\n            <Typography variant='body1' className={classes.heading}>{\"Beschreibung:\"+ \" \"+ project.getShortDescription()} \r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </AccordionSummary>\r\n     <AccordionDetails> \r\n      </AccordionDetails>\r\n    </Accordion> \r\n  </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  buttonFreigeben: {\r\n    marginRight: theme.spacing(0),\r\n    marginLeft: theme.spacing(65)\r\n  },\r\n  buttonAblehnen:{\r\n    marginRight: theme.spacing(0),\r\n  }\r\n\r\n});\r\n \r\n\r\n\r\n/** PropTypes */\r\nProjectListEntryNew.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjectBO to be rendered */\r\n  project: PropTypes.object.isRequired,\r\n  /** The state of this ProjectListEntryNew. If true the project is shown with its accounts */\r\n  expandedState: PropTypes.bool.isRequired,\r\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjectListEntryNew \r\n   * \r\n   * Signature: onExpandedStateChange(ProjectBO project)\r\n   */\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  /** \r\n   *  Event Handler function which is called after a sucessfull delete of this project.\r\n   * \r\n   * Signature: onProjectDelete(ProjectBO project)\r\n   */\r\n  onProjectDeleted: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(ProjectListEntryNew);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\SemesterBO.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\StudentView.js",["290","291","292","293","294","295","296","297","298","299"],"import Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import { Link as RouterLink } from 'react-router-dom'\r\n//import './App.css';\r\nimport React, { Component } from 'react';\r\n// import RoleBO from '../../AppApi/RoleBO'\r\nimport {Link} from 'react-router-dom';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport ProjectList from '../ProjectList';\r\nimport ProjektFormular from '../ProjektErstellen'\r\nimport UserView from '../UserView'\r\nimport StudentLogin from './StudentLogin'\r\nimport ProjectListStudent from './ProjectListStudent'\r\nimport { AppApi } from '../../../AppApi/AppApi'\r\n\r\n\r\n// function StudentView(props) {\r\nclass StudentView extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    \r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const person = this.props.location.state.person\r\n    const student = this.props.location.state.student\r\n    console.log(this.props.location.state.student)\r\n\r\n    return(<div>\r\n      <center>\r\n        <div>\r\n            <h1>Wählen Sie einen der folgenden Optionen aus:</h1>\r\n            <Link to={{\r\n            pathname: '/ProjectListStudent',\r\n            state: { linkState: person, student: student}\r\n            }}>\r\n            <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n            >\r\n                        Für Projekte registrieren\r\n                        /abmelden\r\n                \r\n            </Button>\r\n            </Link>\r\n  </div>\r\n            <div>            \r\n            <Link to={{\r\n            pathname: '/Semesterbericht',\r\n            state: { linkState: person, student: student }\r\n            }}>\r\n           <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                algin=\"center\"\r\n                className={classes.button}\r\n                > \r\n                    Semesterbericht einsehen\r\n            </Button>\r\n            </Link>\r\n            </div>\r\n    </center>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nconst styles = (theme) => ({\r\n  button: {\r\n    margin: theme.spacing(2),\r\n    width: 285,\r\n    fontSize: 25,\r\n    padding: \"15x 0\"\r\n  },\r\n})\r\n\r\n  export default withStyles(styles)(StudentView);\r\n\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\StudentLogin.js",["300","301","302","303","304","305","306","307","308","309","310","311","312","313"],"import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n// import FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { Button } from '@material-ui/core';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Input from '@material-ui/core/Input';\r\nimport { AppApi } from '../../../AppApi';\r\nimport StudentBO from '../../../AppApi/StudentBO';\r\nimport PersonBO from '../../../AppApi/PersonBO';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        width: \"100%\",\r\n    },\r\n    text: {\r\n        margin: theme.spacing(0),\r\n        width: \"100%\",\r\n    }\r\n\r\n}));\r\n\r\n\r\nfunction StudentLogin(props) {\r\n    const classes = useStyles();\r\n    const [Matrikelnummer, setMatrNr] = React.useState(null);\r\n    const [Studiengang, setStudiengang] = React.useState('');\r\n    const person = props.location.state.person;\r\n    const [student, setStudent] = React.useState(null);\r\n    const history = useHistory()\r\n\r\n\r\n\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const student = new StudentBO()\r\n        student.setMatrNr(Matrikelnummer)\r\n        student.setStudiengang(Studiengang)\r\n        student.setPerson(person.getID())\r\n\r\n        console.log(student)\r\n\r\n        var api = AppApi.getAPI()\r\n        // console.log(api)\r\n        api.createStudent(student).then((student) => {\r\n            setStudent(student)\r\n            console.log(student)\r\n            \r\n        }\r\n        )\r\n        history.push({\r\n            pathname: '/StudentView',\r\n            state: {\r\n                student: student,\r\n            },\r\n        });  \r\n\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <center>\r\n                <form onSubmit={handleSubmit}>\r\n                    <div>\r\n                        <h1>Bitte geben Sie Ihre Matrikelnummer und Ihren Studiengang ein:</h1>\r\n                    </div>\r\n                    <div><TextField required className={classes.formControl}\r\n                        id=\"matrikelnummer\"\r\n                        label=\"Matrikelnummer\"\r\n                        variant=\"outlined\"\r\n                        value={Matrikelnummer}\r\n                        onInput={e => setMatrNr(e.target.value)}\r\n                    />\r\n\r\n                    </div>\r\n                    <div><TextField required className={classes.formControl}\r\n                        id=\"studiengang\"\r\n                        label=\"Studiengangskürzel\"\r\n                        variant=\"outlined\"\r\n                        value={Studiengang}\r\n                        onInput={e => setStudiengang(e.target.value)}\r\n                    />\r\n\r\n                        \r\n                        <Button\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<SaveIcon />}\r\n\r\n                        >\r\n                            Speichern\r\n                </Button>\r\n                        \r\n                    </div>\r\n                </form>\r\n            </center>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default StudentLogin;\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\Semesterbericht.js",["314","315","316","317","318","319","320","321","322","323","324","325"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { withRouter } from 'react-router-dom';\r\nimport ContextErrorMessage from '../../dialogs/ContextErrorMessage';\r\nimport LoadingProgress from '../../dialogs/LoadingProgress';\r\nimport SemesterberichtEntry from './SemesterberichtEntry'\r\nimport AppAPI from '../../../AppApi/AppApi';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n/**\r\n * Controlls a list of SemesterberichtEntrys \r\n *\r\n * @see See [SemesterberichtEntrys](#Semesterbericht)\r\n *\r\n */\r\nclass Semesterbericht extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      projects: [],\r\n      filteredProjects: [],\r\n      projectFilter: '',\r\n      error: null,\r\n      loadingInProgress: false,\r\n      semesters: [],\r\n      semester: null,\r\n      student: null\r\n    };\r\n  }\r\n\r\n  /** Fetches ProjectBOsbyMatrNr from the backend */\r\n  getProjectsByStudent = (person_id) => {\r\n  // console.log(\"vor fetch\")\r\n    var api = AppAPI.getAPI()\r\n    api.getProjectsByStudent(person_id) //evtl. Objekt von API vorher anlegen\r\n      .then(projectBOs =>\r\n        this.setState({               // Set new state when ProjectBOs have been fetched\r\n          projects: projectBOs,\r\n          filteredProjects: [...projectBOs], // store a copy\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null\r\n        })).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n            projects: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          })\r\n        );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n  }\r\n\r\n\r\n  semesterList = () => {\r\n    var api = AppAPI.getAPI()\r\n    api.getSemesters().then((semesters) =>\r\n    \r\n    this.setState({\r\n        semesters : semesters\r\n    })\r\n  )\r\n  }\r\n\r\n  handleSemFilter = (event) => {\r\n      console.log(event.target.value)\r\n      if (event.target.value === \"all\"){\r\n        this.setState({\r\n          semester : \"all\",\r\n          filteredProjects : this.state.projects,\r\n        })\r\n      }\r\n      else{\r\n      this.setState({\r\n        semester : event.target.value\r\n      }, () => {this.updateFilteredSemesters()})\r\n    }\r\n  }\r\n\r\n  updateFilteredSemesters = () => {\r\n      let semester = this.state.semester\r\n      let semester_id = semester.id\r\n      let filtered_projects = []\r\n      this.state.projects.forEach((project) => {\r\n        if (project.getSemester() === semester_id) {\r\n            console.log(project)\r\n            filtered_projects.push(project)\r\n        }\r\n      }\r\n      )\r\n      this.setState({\r\n          filteredProjects: filtered_projects\r\n      }, () => {console.log(this.state.filteredProjects)})  \r\n  }\r\n\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    let person = this.props.location.state.student\r\n    this.getProjectsByStudent(person.getMatrNr())\r\n    // Im backend wird dann zuerst die id des studenten objekts rausgefunden mithilfe der matrikelnummer, dann mit der id die participations rausgeholt und dann mit der projekt id in den participations die projekte hochgeholt\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { projectFilter, expandedProjectID, loadingInProgress, error, showProjectForm } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <h1>Sehen Sie ihren Semesterbericht ein:</h1>\r\n        <FormControl className={classes.formControl} fullWidth margin='normal'>\r\n            <InputLabel id=\"semester\">Semester</InputLabel>\r\n              <Select\r\n                labelId=\"semester\"\r\n                id=\"semester\"\r\n                value={this.state.semester}\r\n                onChange={this.handleSemFilter} \r\n                onOpen={this.semesterList}\r\n              >\r\n              <MenuItem value = \"all\">alle Projekte</MenuItem>\r\n              {\r\n              this.state.semesters.map((semester) => <MenuItem value = {semester}> {semester.name} </MenuItem>)\r\n              }\r\n              </Select>\r\n        </FormControl>\r\n        {\r\n          // Show the list of SemesterListEntry components\r\n          this.state.filteredProjects.map((project) =>\r\n            <SemesterberichtEntry project_id={project.id} project={project} student={this.props.location.state.student}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByStudent} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  projectFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nSemesterbericht.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(Semesterbericht));","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\SemesterberichtEntry.js",["326","327","328","329","330","331","332"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Semesterbericht from './Semesterbericht'\r\nimport AppAPI from '../../../AppApi/AppApi'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport LoadingProgress from '../../dialogs/LoadingProgress';\r\n\r\n\r\n/**\r\n * Renders a ProjectBO object in the Semesterbericht by selected filter (semester filter)\r\n * \r\n * @see See [Semesterbericht](#semesterbericht)\r\n * \r\n */\r\nclass SemesterberichtEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      project: this.props.project,\r\n      student: this.props.student,\r\n      grading: null\r\n    };\r\n  }\r\n\r\n  getGrade = () => {\r\n    var api = AppAPI.getAPI()\r\n    api.getGradingByProjectandMatr(this.props.project.getID(), this.props.student.getMatrNr()).then((grading) =>\r\n            {console.log(grading)\r\n            this.setState({\r\n                grading: grading\r\n            })}\r\n            )\r\n  }\r\n\r\n  getGradeofGrading = () => {\r\n    if(this.props.project.getProjectState() != 5){\r\n      console.log(this.props.project)\r\n      return \"In Bewertung\"\r\n    }\r\n    else if (this.state.grading === null){\r\n      return \"loading\"\r\n    }\r\n    else {\r\n      console.log(this.props.project)\r\n      return this.state.grading.grade\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getGrade()\r\n  }\r\n  \r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n \r\n      <div>\r\n        <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n        <Grid item xs={8}>\r\n            <Typography variant='body1' className={classes.heading}>{this.props.project.name} \r\n            </Typography>\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n            <Typography variant='body1' className={classes.heading}>Note: {this.getGradeofGrading()}\r\n            </Typography>\r\n        </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nSemesterberichtEntry.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjectBO to be rendered */\r\n  project: PropTypes.object.isRequired,\r\n  /** The state of this SemesterberichtEntry. If true the project is shown with its accounts */\r\n  student: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(SemesterberichtEntry);","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\CreateSemester.js",["333","334","335","336","337","338","339","340"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\DropDownDozent.js",["341","342","343","344","345","346","347","348"],"import React from 'react';\r\nimport  {AppApi}  from '../../../AppApi';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n// import FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { Button } from '@material-ui/core';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Input from '@material-ui/core/Input';\r\nimport {Link, useHistory, Prompt} from 'react-router-dom';\r\n\r\n\r\nclass DropDownDozent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            profs: [],\r\n            prof: null,\r\n        }\r\n    }\r\n\r\n    getProfList(){\r\n    var api = AppApi.getAPI()\r\n    api.getPersonByRole(2).then((profs) =>\r\n    {console.log(profs)\r\n        this.setState({\r\n            profs:profs\r\n          })\r\n      })\r\n    }\r\n\r\n    handleProfessor = (event) => {\r\n        console.log(event.target.value)\r\n        this.setState({ \r\n            prof: event.target.value\r\n          })\r\n      }\r\n\r\n\r\n    render() { \r\n        const { classes  } = this.props;\r\n        const { profs, prof } = this.state; \r\n        return ( \r\n    <div>\r\n        <div>\r\n            <h1> Wählen Sie den Dozenten </h1>\r\n        </div>\r\n        <form>\r\n        <Prompt when={prof === null}//dozent muss angegeben werden damit weitergeleitet werden kann\r\n        /> \r\n        <div>\r\n        \r\n        <FormControl className={classes.formControl}>\r\n        \r\n        <InputLabel id=\"artProjekt\">Professor</InputLabel>\r\n          <Select\r\n            labelId=\"artProjekt\"\r\n            id=\"ProjektArt\"\r\n            value={prof}\r\n            onChange= {this.handleProfessor}\r\n            onOpen={this.getProfList.bind(this)} //react benötigt \"bind\" das es in der Componente ankommt \r\n          >\r\n          {profs.map((prof) => <MenuItem value = {prof}> {prof.name} </MenuItem>)}\r\n          </Select>\r\n          </FormControl>\r\n          </div>\r\n          <div>\r\n              <Link to={{\r\n              pathname: \"/DozentView\",\r\n              state: { person: prof }\r\n              }}>\r\n                <Button\r\n                 type=\"submit\"\r\n                 variant=\"contained\"\r\n                 color=\"primary\" \r\n                >\r\n                  Auswählen\r\n                </Button>\r\n              </Link>\r\n              \r\n            </div>\r\n            </form>\r\n    </div>\r\n         );\r\n}}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n      width: '100%'\r\n    }, \r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        width: \"100%\",\r\n      },\r\n\r\n});\r\n \r\nexport default withStyles(styles)(DropDownDozent); \r\n\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ProfileDropDown.js",["349"],"import React, { Component, createRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Popover, IconButton, Avatar, ClickAwayListener, withStyles, Typography, Paper, Button, Grid, Divider } from '@material-ui/core';\r\nimport firebase from 'firebase/app';\r\n\r\n/**\r\n * Shows a drop down list for the account infos and a possibility to log out. For closing the pop up menu if \r\n * the mouse is clicked outside the menu, the ClickAwayListener component is used.For logging out,\r\n * firebase.auth().signOut() method is used.\r\n * \r\n * @see See Material-UIs [Popover](https://material-ui.com/components/popover/)\r\n * @see See Material-UIs [ClickAwayListener](https://material-ui.com/components/click-away-listener/)\r\n * @see See Googles [firebase authentication](https://firebase.google.com/docs/web/setup)\r\n * @see See Googles [firebase API reference](https://firebase.google.com/docs/reference/js)\r\n * \r\n * @author [Christoph Kunz](https://github.com/christophkunz)\r\n */\r\nclass ProfileDropDown extends Component {\r\n\r\n  // a refernce to the avatar button\r\n  #avatarButtonRef = createRef();\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      open: false,\r\n    }\r\n  }\r\n\r\n  /** Handles click events on the avatar button and toggels visibility */\r\n  handleAvatarButtonClick = () => {\r\n    this.setState({\r\n      open: !this.state.open\r\n    });\r\n  }\r\n\r\n  /** \r\n   * Handles click events from the ClickAwayListener.\r\n   * \r\n   * @see See Material-UIs [ClickAwayListener](https://material-ui.com/components/click-away-listener/)\r\n   */\r\n  handleClose = () => {\r\n    this.setState({\r\n      open: false\r\n    });\r\n  }\r\n\r\n  /** \r\n\t * Handles the click event of the sign in button and uses the firebase.auth() component to sign in.\r\n\t * \r\n\t * @see See Google [firebase.auth](https://firebase.google.com/docs/reference/js/firebase.auth.Auth)\r\n\t * @see See Google [firebase.auth().signOut](https://firebase.google.com/docs/reference/js/firebase.auth.Auth#signout)\r\n\t */\r\n  handleSignOutButtonClicked = () => {\r\n    firebase.auth().signOut();\r\n  }\r\n\r\n  /** Renders the profile drop down if a loggin user is given as a prop */\r\n  render() {\r\n    const { classes, person } = this.props;\r\n    const { open } = this.state;\r\n\r\n    return (\r\n      person ?\r\n        <div>\r\n          <IconButton className={classes.avatarButton} ref={this.#avatarButtonRef} onClick={this.handleAvatarButtonClick}>\r\n            <Avatar src={person.photoURL} />\r\n          </IconButton>\r\n\r\n          <Popover open={open} anchorEl={this.#avatarButtonRef.current} onClose={this.handleClose}\r\n            anchorOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'left',\r\n            }}\r\n            transformOrigin={{\r\n              vertical: 'top',\r\n              horizontal: 'right',\r\n            }}>\r\n            <ClickAwayListener onClickAway={this.handleClose}>\r\n              <Paper className={classes.profileBox}>\r\n                <Typography align='center'>Mein Profil</Typography>\r\n                \r\n                <Grid container justify='center'>\r\n                  <Grid item>\r\n                    <Button color='primary' onClick={this.handleSignOutButtonClicked}>Logout</Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n            </ClickAwayListener>\r\n          </Popover>\r\n        </div>\r\n        : null\r\n    )\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  avatarButton: {\r\n    float: 'right'\r\n  },\r\n  divider: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  profileBox: {\r\n    padding: theme.spacing(1),\r\n    background: theme.palette.background.default,\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProfileDropDown.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The logged in firesbase user */\r\n  user: PropTypes.object,\r\n}\r\n\r\nexport default withStyles(styles)(ProfileDropDown)\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\SelectStudent.js",["350","351","352","353","354","355","356","357","358","359","360","361","362","363"],"import React from 'react';\r\nimport  {AppApi}  from '../../../AppApi';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n// import FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { Button, Typography } from '@material-ui/core';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Input from '@material-ui/core/Input';\r\nimport {Link, useHistory} from 'react-router-dom';\r\n\r\n\r\nclass SelectStudent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n          matr_nrValidationFailed: false,\r\n          student: '',\r\n          matr_nr: '',\r\n\r\n        }\r\n    }\r\n\r\n    getStudentByMatrikelNummer = (matr_nr) => {\r\n      var api = AppApi.getAPI()\r\n      api.getStudentByMatrikelNummer(matr_nr).then(student =>\r\n        this.setState({\r\n          student: student,\r\n          matr_nr: student.matr_nr,\r\n          loadingInProgress: false, // loading indicator \r\n          loadingError: null\r\n        })).catch(e =>\r\n          this.setState({ // Reset state with error from catch \r\n            student: null,\r\n            loadingInProgress: false,\r\n            loadingError: e,\r\n          })\r\n        );\r\n  \r\n      // set loading to true\r\n      this.setState({\r\n        balance: 'loading',\r\n        loadingInProgress: true,\r\n        loadingError: null\r\n      });\r\n    }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n    });\r\n\r\n    if(value.length === 5){\r\n      this.getStudentByMatrikelNummer(event.target.value)\r\n    \r\n      this.setState({\r\n        matr_nrValidationFailed: false,\r\n      })\r\n    }\r\n\r\n    else if(value.length <5) {\r\n      this.setState({\r\n        matr_nrValidationFailed: true,\r\n      })\r\n    }\r\n  }\r\n\r\n  // handleClick(){\r\n  //   console.log(this.state.student)\r\n  //   // event.preventDefault();\r\n  //   if (this.state.student === null){\r\n  //     alert(\"Sorry, diesen Studenten kennen wir nicht\")\r\n  //   }\r\n  // }\r\n\r\n  \r\n    render() { \r\n        const { classes  } = this.props;\r\n        const { student,matr_nr, matr_nrValidationFailed } = this.state; \r\n\r\n        return ( \r\n    <div>\r\n        <div>\r\n            <h1> Wählen Sie den Studenten </h1>\r\n        </div>\r\n      <div>\r\n        <form className={classes.root} \r\n        // Validate ={this.handleClick} // validation funktioniert noch nicht.. nöchste seite kann ohne student aufgerufen werden\r\n        autoComplete='off' >\r\n\r\n            <Link to={{\r\n                    pathname: \"/StudentView\",\r\n                    state: { student: student }\r\n                    }}>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='matr_nr' label='Matrikelnummer:' value={matr_nr} \r\n                onChange={this.textFieldValueChange} error={matr_nrValidationFailed} \r\n                helperText={matr_nrValidationFailed ? 'Bitte geben Sie 5 Zeichen ein' : ' '} />\r\n              \r\n              <Button\r\n                 type=\"submit\"\r\n                 variant=\"contained\"\r\n                 color=\"primary\" \r\n              >\r\n                Auswählen\r\n              </Button>\r\n            </Link>\r\n\r\n        </form>\r\n      </div>\r\n      <div>\r\n      <Typography className={classes.participationEntry}>      \r\n      \r\n        {\"Ausgewählter Student:\" +\" \"} {this.state.student.name}\r\n      \r\n          </Typography>\r\n      </div>\r\n    </div>\r\n         );\r\n}}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n      width: '100%'\r\n    }, \r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        width: \"100%\",\r\n      },\r\n      participationEntry: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        flexBasis: '33.33%',\r\n        flexShrink: 0,\r\n      }\r\n\r\n});\r\n \r\nexport default withStyles(styles)(SelectStudent); \r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\ProjectListStudent.js",["364","365","366","367","368","369","370","371","372"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, ListItem, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport { withRouter } from 'react-router-dom';\r\nimport  {AppApi}  from '../../../AppApi';\r\nimport ContextErrorMessage from '../../dialogs/ContextErrorMessage';\r\nimport LoadingProgress from '../../dialogs/LoadingProgress';\r\nimport ProjectListEntryStudent from './ProjectListEntryStudent';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n/**\r\n * Controlls a list of ProjectListEntrys to create a accordion for each project.\r\n *\r\n * @see See [ProjectListEntry](#projectlistentry)\r\n *\r\n */\r\nclass ProjectListStudent extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // // console.log(props);\r\n    // let expandedID = null;\r\n\r\n    // if (this.props.location.expandProject) {\r\n    //   expandedID = this.props.location.expandProject.getID();\r\n    // }\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      // projectNew: [],\r\n      projectsAvailable: [],\r\n      projectsSignedIn: [],\r\n      error: null,\r\n      loadingInProgress: false,\r\n      // student: this.props.location.state.student,\r\n      // expandedProjectID: expandedID,\r\n    };\r\n  }\r\n\r\n\r\n  getProjectsByStateAccepted = () => {\r\n    // console.log(\"vor fetch\")\r\n      var api = AppApi.getAPI()\r\n      api.getProjectsByState(3) //evtl. Objekt von API vorher anlegen\r\n        .then(projectBOs =>\r\n          this.setState({\r\n          projectsAvailable: projectBOs,\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null\r\n        })).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n            projectsAvailable: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          })\r\n        );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n  }\r\n\r\n   /** Fetches ProjectBOsbyMatrNr from the backend */\r\n   getProjectsByStudent = (matr_nr) => {\r\n    // console.log(\"vor fetch\")\r\n      var api = AppApi.getAPI()\r\n      api.getProjectsByStudent(matr_nr) //evtl. Objekt von API vorher anlegen\r\n        .then(projectBOs =>\r\n          this.setState({               // Set new state when ProjectBOs have been fetched\r\n            projectsSignedIn: projectBOs,\r\n            filteredProjects: [...projectBOs], // store a copy\r\n            loadingInProgress: false,   // disable loading indicator\r\n            error: null\r\n          })).catch(e =>\r\n            this.setState({             // Reset state with error from catch\r\n              projectsSignedIn: [],\r\n              loadingInProgress: false, // disable loading indicator\r\n              error: e\r\n            })\r\n          );\r\n  \r\n      // set loading to true\r\n      this.setState({\r\n        loadingInProgress: true,\r\n        error: null\r\n      });\r\n    }\r\n    \r\n\r\n\r\n  // /**\r\n  //  * Handles onExpandedStateChange events from the ProjectListEntry component. Toggels the expanded state of\r\n  //  * the ProjectListEntry of the given ProjectBO.\r\n  //  *\r\n  //  * @param {project} ProjectBO of the ProjectListEntry to be toggeled\r\n  //  */\r\n  // onExpandedStateChange = project => {\r\n  //   // console.log(projectID);\r\n  //   // Set expandend project entry to null by default\r\n  //   let newID = null;\r\n\r\n  //   // If same project entry is clicked, collapse it else expand a new one\r\n  //   if (project.getID() !== this.state.expandedProjectID) {\r\n  //     // Expand the project entry with projectID\r\n  //     newID = project.getID();\r\n  //   }\r\n  //   // console.log(newID);\r\n  //   this.setState({\r\n  //     expandedProjectID: newID,\r\n  //   });\r\n  // }\r\n\r\n  // parentCall(){\r\n  //   this.getProjectsByStudent(this.state.student.matr_nr);\r\n  // }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    // console.log(\"gerendert\")\r\n    this.getProjectsByStateAccepted();\r\n    this.getProjectsByStudent(this.props.location.state.student.matr_nr);\r\n  }\r\n\r\n   /** Lifecycle method, which is called when the component was updated */\r\n   componentDidUpdate(prevProps) {\r\n    // reload participations if shown state changed. Occures if the ProjectListEntrys ExpansionPanel was expanded\r\n    if ((this.props.show !== prevProps.show)) { \r\n    this.getProjectsByStateAccepted();\r\n      }\r\n    }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { projectsAvailable, projectsSignedIn, expandedProjectID, loadingInProgress, error, showProjectForm } = this.state;\r\n    const student = this.props.location.state.student\r\n  \r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={6}>\r\n        <h1>Verfügbare Projekte</h1>\r\n          <Paper className={classes.paper}>\r\n          {\r\n          // Show the list of ProjectListEntry components\r\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n          projectsAvailable.map(project =>\r\n            <ProjectListEntryStudent key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}\r\n              onExpandedStateChange={this.onExpandedStateChange} student = {student}\r\n              onProjectDeleted={this.projectDeleted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByStateAccepted} />\r\n          </Paper>\r\n        </Grid>\r\n\r\n         <Grid item xs={6}>\r\n\r\n         <h1>Angemeldete Projekte</h1>\r\n           <Paper className={classes.paper}>\r\n           <div>\r\n            {projectsSignedIn.map(s => <ListItem>{s.name}</ListItem >)}\r\n            </div>\r\n           </Paper>\r\n         </Grid>\r\n        </Grid>\r\n        \r\n        {/* <Grid item xs={6}>\r\n        <h1>Angemeldete Projekte</h1>\r\n          <Paper className={classes.paper}>\r\n          {\r\n          // Show the list of ProjectListEntry components\r\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n          projectsSignedIn.map(project =>\r\n            <ProjectListEntryStudent key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}\r\n              onExpandedStateChange={this.onExpandedStateChange} student = {student}\r\n              onProjectDeleted={this.projectDeleted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByStudent} /> \r\n          </Paper>\r\n        </Grid> */}\r\n      \r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  projectFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'left',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nProjectListStudent.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(ProjectListStudent));","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView\\ProjectListEntryStudent.js",["373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button,ButtonGroup } from '@material-ui/core';\r\nimport  {AppApi, ParticipationBO}  from '../../../AppApi';\r\nimport {ProjectBO} from '../../../AppApi';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ReplyRoundedIcon from '@material-ui/icons/ReplyRounded';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\n\r\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n// import List from '@material-ui/core/List';\r\n// import ListItem from '@material-ui/core/ListItem';\r\n\r\n\r\n\r\n\r\n/**\r\n * Renders a ProjectBO object within a expandable/collapsible ProjectListEntryNew with the project manipulation\r\n * functions. If expanded, it renders a AccountList.\r\n * \r\n * @see See [ProjectListNew](#projectlist)\r\n * \r\n */\r\nclass ProjectListEntryNew extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    // Init the state\r\n    this.state = {\r\n      project: this.props.project,\r\n      showProjectForm: false,\r\n      showProjectDeleteDialog: false,\r\n      participation: null,\r\n      participations: [],\r\n      participatonsCounter: 0,\r\n    };\r\n  }\r\n\r\n\r\n  /** Adds an participation for the current customer */\r\n  addParticipation = () => {\r\n      const participation = new ParticipationBO\r\n    //   participation.setModule(this.state.project.getModule())\r\n      console.log(this.props.student.id)\r\n      participation.setStudent(this.props.student.id)\r\n      participation.setProject(this.state.project.id)\r\n      console.log(participation)\r\n    AppApi.getAPI().createParticipation(participation).then(participationBO => {\r\n      console.log(participationBO)\r\n      this.setState({  // Set new state when ParticipationBOs have been fetched\r\n        participation: participationBO,\r\n        loadingInProgress: false, // loading indicator \r\n        addingParticipationError: null\r\n      })\r\n    }).catch(e =>\r\n      this.setState({ // Reset state with error from catch \r\n        participation: null,\r\n        loadingInProgress: false,\r\n        addingParticipationError: e\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      addingParticipationError: null\r\n    });\r\n  }\r\n\r\n/** Fetches ParticipationBOs for the current customer */\r\n  getParticipationsByProject = () => {\r\n  // console.log(\"vor fetch\")\r\n\r\n    var api = AppApi.getAPI()\r\n    api.getParticipationsByProject(this.state.project.getID())\r\n      .then(participationBOs => \r\n        this.setState({               // Set new state when ParticipationBOs have been fetched\r\n          participations: participationBOs,\r\n          // filteredParticipations: [...participationBOs], // store a copy\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null,\r\n\r\n        }, () => { this.countParticipations(); this.identPar()}\r\n        \r\n        )).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n            participations: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          }) \r\n        ); \r\n    // set loading to true\r\n    // let capacity = this.state.project.capacity\r\n    // let amountPart = this.state.participations.length\r\n  \r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null,\r\n      // participationsCounter: capacity-amountPart, \r\n    },\r\n   );\r\n  }\r\n\r\n   /** Deletes this participation */\r\n   deleteParticipation = () => { console.log(this.state.participation)\r\n    var api = AppApi.getAPI()\r\n    api.deleteParticipation(this.state.participation.getID()).then(() => {\r\n      this.setState({  // Set new state when ParticipationBOs have been fetched\r\n        deletingInProgress: false, // loading indicator \r\n        deletingError: null\r\n      })\r\n      // console.log(participation);\r\n    }).catch(e =>\r\n      this.setState({ // Reset state with error from catch \r\n        deletingInProgress: false,\r\n        deletingError: e\r\n      })\r\n    );\r\n    // set loading to true\r\n    this.setState({\r\n      deletingInProgress: true,\r\n      deletingError: null\r\n    });\r\n  }\r\n\r\n  identPar(){\r\n    this.state.participations.map(par =>  { console.log(par)\r\n      if(par.student_id === this.props.student.id){\r\n        this.setState({\r\n          participation: par,\r\n        })\r\n    }\r\n  }) \r\n}\r\n\r\n  countParticipations(){\r\n    let capacity = this.state.project.capacity\r\n    let amountPart = this.state.participations.length\r\n    // console.log( capacity, amountPart)\r\n    this.setState({\r\n      participationsCounter: capacity-amountPart,\r\n    })\r\n  }\r\n\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    // console.log(\"gerendert\")\r\n    this.getParticipationsByProject();\r\n    \r\n  \r\n  }\r\n\r\n//   /** Handles onChange events of the underlying ExpansionPanel */\r\n//   expansionPanelStateChanged = () => {\r\n//     this.props.onExpandedStateChange(this.props.project);\r\n//   }\r\n\r\n//   /** Handles onAccountDelete events from an AccountListEntry  */\r\n//   deleteAccountHandler = (deletedAccount) => {\r\n//     // console.log(deletedAccount.getID());\r\n//     this.setState({\r\n//       accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\r\n//     })\r\n//   }\r\n\r\n/** Handles click events from the transfer money button */\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, expandedState } = this.props;\r\n    // Use the states project\r\n    const { project, showProjectForm, showProjectDeleteDialog, participations, participationsCounter, participation } = this.state;\r\n\r\n    // console.log(this.state);\r\n    // console.log(participation)\r\n    return (\r\n      \r\n      participation !==null?\r\n\r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            // expandIcon={<ExpandMoreIcon />}\r\n            id={`project${project.getID()}accountpanel-header`}\r\n          >\r\n            \r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{\"Projekt:\" + \" \" + project.getName()} \r\n                  \r\n                 \r\n                  <Button variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          className={classes.buttonAblehnen}\r\n                          startIcon={<HighlightOffIcon/>}\r\n                          variant='outlined' color='primary' size='small' onClick={this.deleteParticipation}>\r\n                  Abmelden\r\n                  </Button>\r\n                </Typography>\r\n                <Typography variant='body1' className={classes.heading}>{\"Beschreibung:\"+ \" \"+ project.getShortDescription()} \r\n                </Typography>\r\n                \r\n                <Typography variant='body1' className={classes.heading}>{\"verfügbare Plätze:\"+ \" \"+ participationsCounter + \"/\" + project.capacity} \r\n                </Typography>\r\n\r\n              \r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n         {/* <AccordionDetails> \r\n          </AccordionDetails> */}\r\n        </Accordion> \r\n      </div>\r\n\r\n      \r\n     \r\n      :\r\n      <div>\r\n      <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n        <AccordionSummary\r\n          // expandIcon={<ExpandMoreIcon />}\r\n          id={`project${project.getID()}accountpanel-header`}\r\n        >\r\n          \r\n          <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n            <Grid item>\r\n              <Typography variant='body1' className={classes.heading}>{\"Projekt:\" + \" \" + project.getName()} \r\n                \r\n                <Button                \r\n                        color=\"secondary\"\r\n                        className={classes.buttonFreigeben}\r\n                        startIcon={<CheckIcon/>}\r\n                        variant=\"contained\" color='primary' size='small'  onClick={this.addParticipation}>\r\n                Anmelden\r\n                </Button>\r\n                {/* <Button variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        className={classes.buttonAblehnen}\r\n                        startIcon={<HighlightOffIcon/>}\r\n                        variant='outlined' color='primary' size='small' onClick={() => this.deleteParticipation}>\r\n                Abmelden\r\n                </Button> */}\r\n              </Typography>\r\n              <Typography variant='body1' className={classes.heading}>{\"Beschreibung:\"+ \" \"+ project.getShortDescription()} \r\n              </Typography>\r\n              \r\n              <Typography variant='body1' className={classes.heading}>{\"verfügbare Plätze:\"+ \" \"+ participationsCounter + \"/\" + project.capacity} \r\n              </Typography>\r\n\r\n            \r\n            </Grid>\r\n          </Grid>\r\n        </AccordionSummary>\r\n       {/* <AccordionDetails> \r\n        </AccordionDetails> */}\r\n      </Accordion> \r\n    </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  // buttonFreigeben: {\r\n  //   marginRight: theme.spacing(0),\r\n  //   marginLeft: theme.spacing(65)\r\n  // },\r\n  // buttonAblehnen:{\r\n  //   marginRight: theme.spacing(0),\r\n  // }\r\n\r\n});\r\n \r\n\r\n\r\n/** PropTypes */\r\nProjectListEntryNew.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjectBO to be rendered */\r\n  project: PropTypes.object.isRequired,\r\n  /** The state of this ProjectListEntryNew. If true the project is shown with its accounts */\r\n  expandedState: PropTypes.bool.isRequired,\r\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjectListEntryNew \r\n   * \r\n   * Signature: onExpandedStateChange(ProjectBO project)\r\n   */\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  /** \r\n   *  Event Handler function which is called after a sucessfull delete of this project.\r\n   * \r\n   * Signature: onProjectDelete(ProjectBO project)\r\n   */\r\n  onProjectDeleted: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(ProjectListEntryNew);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView\\CreatePerson.js",["392","393","394","395","396","397","398","399","400","401","402","403"],{"ruleId":"404","replacedBy":"405"},{"ruleId":"406","replacedBy":"407"},{"ruleId":"408","severity":1,"message":"409","line":2,"column":52,"nodeType":"410","messageId":"411","endLine":2,"endColumn":62},{"ruleId":"408","severity":1,"message":"412","line":8,"column":8,"nodeType":"410","messageId":"411","endLine":8,"endColumn":14},{"ruleId":"408","severity":1,"message":"413","line":11,"column":8,"nodeType":"410","messageId":"411","endLine":11,"endColumn":16},{"ruleId":"408","severity":1,"message":"414","line":178,"column":16,"nodeType":"410","messageId":"411","endLine":178,"endColumn":20},{"ruleId":"408","severity":1,"message":"412","line":2,"column":8,"nodeType":"410","messageId":"411","endLine":2,"endColumn":14},{"ruleId":null,"fatal":true,"severity":2,"message":"415","line":38,"column":1},{"ruleId":"408","severity":1,"message":"412","line":6,"column":8,"nodeType":"410","messageId":"411","endLine":6,"endColumn":14},{"ruleId":"416","severity":1,"message":"417","line":11,"column":5,"nodeType":"418","messageId":"419","endLine":13,"endColumn":6},{"ruleId":"416","severity":1,"message":"417","line":11,"column":5,"nodeType":"418","messageId":"419","endLine":13,"endColumn":2},{"ruleId":"408","severity":1,"message":"420","line":17,"column":12,"nodeType":"410","messageId":"411","endLine":17,"endColumn":16},{"ruleId":"408","severity":1,"message":"421","line":8,"column":27,"nodeType":"410","messageId":"411","endLine":8,"endColumn":33},{"ruleId":"408","severity":1,"message":"422","line":8,"column":35,"nodeType":"410","messageId":"411","endLine":8,"endColumn":40},{"ruleId":"408","severity":1,"message":"423","line":8,"column":42,"nodeType":"410","messageId":"411","endLine":8,"endColumn":50},{"ruleId":"408","severity":1,"message":"424","line":9,"column":8,"nodeType":"410","messageId":"411","endLine":9,"endColumn":19},{"ruleId":"408","severity":1,"message":"425","line":10,"column":8,"nodeType":"410","messageId":"411","endLine":10,"endColumn":23},{"ruleId":"408","severity":1,"message":"413","line":11,"column":8,"nodeType":"410","messageId":"411","endLine":11,"endColumn":16},{"ruleId":"408","severity":1,"message":"426","line":12,"column":10,"nodeType":"410","messageId":"411","endLine":12,"endColumn":16},{"ruleId":"408","severity":1,"message":"427","line":31,"column":36,"nodeType":"410","messageId":"411","endLine":31,"endColumn":50},{"ruleId":"408","severity":1,"message":"428","line":2,"column":8,"nodeType":"410","messageId":"411","endLine":2,"endColumn":19},{"ruleId":"408","severity":1,"message":"429","line":3,"column":8,"nodeType":"410","messageId":"411","endLine":3,"endColumn":17},{"ruleId":"408","severity":1,"message":"430","line":4,"column":8,"nodeType":"410","messageId":"411","endLine":4,"endColumn":18},{"ruleId":"408","severity":1,"message":"421","line":6,"column":27,"nodeType":"410","messageId":"411","endLine":6,"endColumn":33},{"ruleId":"416","severity":1,"message":"417","line":11,"column":5,"nodeType":"418","messageId":"419","endLine":13,"endColumn":6},{"ruleId":"408","severity":1,"message":"431","line":3,"column":22,"nodeType":"410","messageId":"411","endLine":3,"endColumn":28},{"ruleId":"408","severity":1,"message":"432","line":4,"column":8,"nodeType":"410","messageId":"411","endLine":4,"endColumn":15},{"ruleId":"408","severity":1,"message":"433","line":10,"column":8,"nodeType":"410","messageId":"411","endLine":10,"endColumn":19},{"ruleId":"408","severity":1,"message":"434","line":4,"column":18,"nodeType":"410","messageId":"411","endLine":4,"endColumn":29},{"ruleId":"435","severity":1,"message":"436","line":85,"column":19,"nodeType":"437","messageId":"438","endLine":85,"endColumn":21},{"ruleId":"435","severity":1,"message":"436","line":88,"column":24,"nodeType":"437","messageId":"438","endLine":88,"endColumn":26},{"ruleId":"439","severity":1,"message":"440","line":145,"column":27,"nodeType":"441","endLine":145,"endColumn":45},{"ruleId":"439","severity":1,"message":"440","line":146,"column":27,"nodeType":"441","endLine":146,"endColumn":42},{"ruleId":"439","severity":1,"message":"440","line":216,"column":27,"nodeType":"441","endLine":216,"endColumn":45},{"ruleId":"439","severity":1,"message":"440","line":216,"column":46,"nodeType":"441","endLine":216,"endColumn":61},{"ruleId":"404","replacedBy":"442"},{"ruleId":"406","replacedBy":"443"},{"ruleId":"408","severity":1,"message":"444","line":1,"column":17,"nodeType":"410","messageId":"411","endLine":1,"endColumn":26},{"ruleId":"408","severity":1,"message":"445","line":8,"column":8,"nodeType":"410","messageId":"411","endLine":8,"endColumn":16},{"ruleId":"408","severity":1,"message":"446","line":15,"column":8,"nodeType":"410","messageId":"411","endLine":15,"endColumn":13},{"ruleId":"408","severity":1,"message":"447","line":18,"column":9,"nodeType":"410","messageId":"411","endLine":18,"endColumn":13},{"ruleId":"408","severity":1,"message":"448","line":39,"column":16,"nodeType":"410","messageId":"411","endLine":39,"endColumn":23},{"ruleId":"408","severity":1,"message":"449","line":50,"column":10,"nodeType":"410","messageId":"411","endLine":50,"endColumn":14},{"ruleId":"408","severity":1,"message":"450","line":50,"column":16,"nodeType":"410","messageId":"411","endLine":50,"endColumn":23},{"ruleId":"408","severity":1,"message":"447","line":3,"column":76,"nodeType":"410","messageId":"411","endLine":3,"endColumn":80},{"ruleId":"408","severity":1,"message":"446","line":3,"column":94,"nodeType":"410","messageId":"411","endLine":3,"endColumn":99},{"ruleId":"408","severity":1,"message":"451","line":5,"column":8,"nodeType":"410","messageId":"411","endLine":5,"endColumn":12},{"ruleId":"408","severity":1,"message":"452","line":7,"column":18,"nodeType":"410","messageId":"411","endLine":7,"endColumn":28},{"ruleId":"435","severity":1,"message":"436","line":253,"column":20,"nodeType":"437","messageId":"438","endLine":253,"endColumn":22},{"ruleId":"408","severity":1,"message":"453","line":1,"column":8,"nodeType":"410","messageId":"411","endLine":1,"endColumn":22},{"ruleId":"435","severity":1,"message":"436","line":62,"column":21,"nodeType":"437","messageId":"438","endLine":62,"endColumn":23},{"ruleId":"408","severity":1,"message":"454","line":8,"column":8,"nodeType":"410","messageId":"411","endLine":8,"endColumn":17},{"ruleId":"408","severity":1,"message":"455","line":147,"column":7,"nodeType":"410","messageId":"411","endLine":147,"endColumn":18},{"ruleId":"456","severity":1,"message":"457","line":172,"column":39,"nodeType":"437","messageId":"458","endLine":172,"endColumn":40},{"ruleId":"408","severity":1,"message":"459","line":1,"column":16,"nodeType":"410","messageId":"411","endLine":1,"endColumn":24},{"ruleId":"408","severity":1,"message":"460","line":14,"column":8,"nodeType":"410","messageId":"411","endLine":14,"endColumn":17},{"ruleId":"408","severity":1,"message":"431","line":3,"column":22,"nodeType":"410","messageId":"411","endLine":3,"endColumn":28},{"ruleId":"408","severity":1,"message":"461","line":3,"column":30,"nodeType":"410","messageId":"411","endLine":3,"endColumn":39},{"ruleId":"408","severity":1,"message":"462","line":3,"column":41,"nodeType":"410","messageId":"411","endLine":3,"endColumn":55},{"ruleId":"408","severity":1,"message":"463","line":3,"column":57,"nodeType":"410","messageId":"411","endLine":3,"endColumn":67},{"ruleId":"408","severity":1,"message":"464","line":3,"column":75,"nodeType":"410","messageId":"411","endLine":3,"endColumn":85},{"ruleId":"408","severity":1,"message":"465","line":157,"column":13,"nodeType":"410","messageId":"411","endLine":157,"endColumn":29},{"ruleId":"408","severity":1,"message":"466","line":157,"column":81,"nodeType":"410","messageId":"411","endLine":157,"endColumn":94},{"ruleId":"408","severity":1,"message":"467","line":157,"column":141,"nodeType":"410","messageId":"411","endLine":157,"endColumn":156},{"ruleId":"468","severity":1,"message":"469","line":231,"column":3,"nodeType":"470","messageId":"438","endLine":231,"endColumn":7},{"ruleId":"408","severity":1,"message":"434","line":4,"column":17,"nodeType":"410","messageId":"411","endLine":4,"endColumn":28},{"ruleId":"408","severity":1,"message":"432","line":8,"column":8,"nodeType":"410","messageId":"411","endLine":8,"endColumn":15},{"ruleId":"408","severity":1,"message":"463","line":11,"column":8,"nodeType":"410","messageId":"411","endLine":11,"endColumn":18},{"ruleId":"408","severity":1,"message":"467","line":123,"column":22,"nodeType":"410","messageId":"411","endLine":123,"endColumn":37},{"ruleId":"408","severity":1,"message":"471","line":123,"column":39,"nodeType":"410","messageId":"411","endLine":123,"endColumn":62},{"ruleId":"456","severity":1,"message":"457","line":137,"column":85,"nodeType":"437","messageId":"458","endLine":137,"endColumn":86},{"ruleId":"439","severity":1,"message":"440","line":142,"column":27,"nodeType":"441","endLine":142,"endColumn":45},{"ruleId":"439","severity":1,"message":"440","line":142,"column":46,"nodeType":"441","endLine":142,"endColumn":61},{"ruleId":"439","severity":1,"message":"440","line":149,"column":27,"nodeType":"441","endLine":149,"endColumn":45},{"ruleId":"439","severity":1,"message":"440","line":149,"column":46,"nodeType":"441","endLine":149,"endColumn":61},{"ruleId":"456","severity":1,"message":"457","line":153,"column":89,"nodeType":"437","messageId":"458","endLine":153,"endColumn":90},{"ruleId":"456","severity":1,"message":"457","line":172,"column":83,"nodeType":"437","messageId":"458","endLine":172,"endColumn":84},{"ruleId":"439","severity":1,"message":"440","line":177,"column":17,"nodeType":"441","endLine":177,"endColumn":43},{"ruleId":"439","severity":1,"message":"440","line":177,"column":44,"nodeType":"441","endLine":177,"endColumn":62},{"ruleId":"439","severity":1,"message":"440","line":177,"column":63,"nodeType":"441","endLine":177,"endColumn":78},{"ruleId":"439","severity":1,"message":"440","line":184,"column":17,"nodeType":"441","endLine":184,"endColumn":43},{"ruleId":"439","severity":1,"message":"440","line":184,"column":44,"nodeType":"441","endLine":184,"endColumn":62},{"ruleId":"439","severity":1,"message":"440","line":184,"column":63,"nodeType":"441","endLine":184,"endColumn":78},{"ruleId":"456","severity":1,"message":"457","line":193,"column":87,"nodeType":"437","messageId":"458","endLine":193,"endColumn":88},{"ruleId":"456","severity":1,"message":"457","line":212,"column":81,"nodeType":"437","messageId":"458","endLine":212,"endColumn":82},{"ruleId":"439","severity":1,"message":"440","line":217,"column":15,"nodeType":"441","endLine":217,"endColumn":41},{"ruleId":"439","severity":1,"message":"440","line":217,"column":42,"nodeType":"441","endLine":217,"endColumn":60},{"ruleId":"439","severity":1,"message":"440","line":217,"column":61,"nodeType":"441","endLine":217,"endColumn":76},{"ruleId":"439","severity":1,"message":"440","line":224,"column":15,"nodeType":"441","endLine":224,"endColumn":41},{"ruleId":"439","severity":1,"message":"440","line":224,"column":42,"nodeType":"441","endLine":224,"endColumn":60},{"ruleId":"439","severity":1,"message":"440","line":224,"column":61,"nodeType":"441","endLine":224,"endColumn":76},{"ruleId":"456","severity":1,"message":"457","line":231,"column":85,"nodeType":"437","messageId":"458","endLine":231,"endColumn":86},{"ruleId":"408","severity":1,"message":"421","line":8,"column":27,"nodeType":"410","messageId":"411","endLine":8,"endColumn":33},{"ruleId":"408","severity":1,"message":"422","line":8,"column":35,"nodeType":"410","messageId":"411","endLine":8,"endColumn":40},{"ruleId":"408","severity":1,"message":"423","line":8,"column":42,"nodeType":"410","messageId":"411","endLine":8,"endColumn":50},{"ruleId":"408","severity":1,"message":"424","line":9,"column":8,"nodeType":"410","messageId":"411","endLine":9,"endColumn":19},{"ruleId":"408","severity":1,"message":"425","line":10,"column":8,"nodeType":"410","messageId":"411","endLine":10,"endColumn":23},{"ruleId":"408","severity":1,"message":"413","line":11,"column":8,"nodeType":"410","messageId":"411","endLine":11,"endColumn":16},{"ruleId":"408","severity":1,"message":"472","line":12,"column":8,"nodeType":"410","messageId":"411","endLine":12,"endColumn":20},{"ruleId":"408","severity":1,"message":"473","line":13,"column":8,"nodeType":"410","messageId":"411","endLine":13,"endColumn":26},{"ruleId":"408","severity":1,"message":"426","line":14,"column":10,"nodeType":"410","messageId":"411","endLine":14,"endColumn":16},{"ruleId":"416","severity":1,"message":"417","line":19,"column":3,"nodeType":"418","messageId":"419","endLine":22,"endColumn":4},{"ruleId":"408","severity":1,"message":"444","line":1,"column":17,"nodeType":"410","messageId":"411","endLine":1,"endColumn":26},{"ruleId":"408","severity":1,"message":"474","line":3,"column":8,"nodeType":"410","messageId":"411","endLine":3,"endColumn":18},{"ruleId":"408","severity":1,"message":"475","line":4,"column":8,"nodeType":"410","messageId":"411","endLine":4,"endColumn":16},{"ruleId":"408","severity":1,"message":"476","line":5,"column":8,"nodeType":"410","messageId":"411","endLine":5,"endColumn":19},{"ruleId":"408","severity":1,"message":"477","line":6,"column":8,"nodeType":"410","messageId":"411","endLine":6,"endColumn":14},{"ruleId":"408","severity":1,"message":"445","line":9,"column":8,"nodeType":"410","messageId":"411","endLine":9,"endColumn":16},{"ruleId":"408","severity":1,"message":"478","line":11,"column":8,"nodeType":"410","messageId":"411","endLine":11,"endColumn":24},{"ruleId":"408","severity":1,"message":"479","line":13,"column":8,"nodeType":"410","messageId":"411","endLine":13,"endColumn":17},{"ruleId":"408","severity":1,"message":"480","line":14,"column":8,"nodeType":"410","messageId":"411","endLine":14,"endColumn":13},{"ruleId":"408","severity":1,"message":"481","line":15,"column":8,"nodeType":"410","messageId":"411","endLine":15,"endColumn":18},{"ruleId":"408","severity":1,"message":"446","line":16,"column":8,"nodeType":"410","messageId":"411","endLine":16,"endColumn":13},{"ruleId":"408","severity":1,"message":"482","line":19,"column":8,"nodeType":"410","messageId":"411","endLine":19,"endColumn":16},{"ruleId":"408","severity":1,"message":"447","line":20,"column":10,"nodeType":"410","messageId":"411","endLine":20,"endColumn":14},{"ruleId":"408","severity":1,"message":"483","line":40,"column":12,"nodeType":"410","messageId":"411","endLine":40,"endColumn":19},{"ruleId":"408","severity":1,"message":"431","line":3,"column":22,"nodeType":"410","messageId":"411","endLine":3,"endColumn":28},{"ruleId":"408","severity":1,"message":"461","line":3,"column":30,"nodeType":"410","messageId":"411","endLine":3,"endColumn":39},{"ruleId":"408","severity":1,"message":"462","line":3,"column":41,"nodeType":"410","messageId":"411","endLine":3,"endColumn":55},{"ruleId":"408","severity":1,"message":"463","line":3,"column":57,"nodeType":"410","messageId":"411","endLine":3,"endColumn":67},{"ruleId":"408","severity":1,"message":"484","line":3,"column":69,"nodeType":"410","messageId":"411","endLine":3,"endColumn":73},{"ruleId":"408","severity":1,"message":"464","line":3,"column":75,"nodeType":"410","messageId":"411","endLine":3,"endColumn":85},{"ruleId":"408","severity":1,"message":"432","line":4,"column":8,"nodeType":"410","messageId":"411","endLine":4,"endColumn":15},{"ruleId":"408","severity":1,"message":"485","line":5,"column":8,"nodeType":"410","messageId":"411","endLine":5,"endColumn":17},{"ruleId":"408","severity":1,"message":"445","line":14,"column":8,"nodeType":"410","messageId":"411","endLine":14,"endColumn":16},{"ruleId":"408","severity":1,"message":"466","line":118,"column":13,"nodeType":"410","messageId":"411","endLine":118,"endColumn":26},{"ruleId":"408","severity":1,"message":"486","line":118,"column":28,"nodeType":"410","messageId":"411","endLine":118,"endColumn":45},{"ruleId":"408","severity":1,"message":"467","line":118,"column":73,"nodeType":"410","messageId":"411","endLine":118,"endColumn":88},{"ruleId":"408","severity":1,"message":"431","line":4,"column":10,"nodeType":"410","messageId":"411","endLine":4,"endColumn":16},{"ruleId":"408","severity":1,"message":"434","line":4,"column":18,"nodeType":"410","messageId":"411","endLine":4,"endColumn":29},{"ruleId":"408","severity":1,"message":"487","line":5,"column":8,"nodeType":"410","messageId":"411","endLine":5,"endColumn":22},{"ruleId":"408","severity":1,"message":"488","line":6,"column":8,"nodeType":"410","messageId":"411","endLine":6,"endColumn":23},{"ruleId":"408","severity":1,"message":"489","line":8,"column":8,"nodeType":"410","messageId":"411","endLine":8,"endColumn":13},{"ruleId":"408","severity":1,"message":"490","line":9,"column":8,"nodeType":"410","messageId":"411","endLine":9,"endColumn":23},{"ruleId":"435","severity":1,"message":"491","line":42,"column":45,"nodeType":"437","messageId":"438","endLine":42,"endColumn":47},{"ruleId":"408","severity":1,"message":"492","line":2,"column":40,"nodeType":"410","messageId":"411","endLine":2,"endColumn":44},{"ruleId":"408","severity":1,"message":"447","line":2,"column":56,"nodeType":"410","messageId":"411","endLine":2,"endColumn":60},{"ruleId":"408","severity":1,"message":"464","line":2,"column":62,"nodeType":"410","messageId":"411","endLine":2,"endColumn":72},{"ruleId":"408","severity":1,"message":"446","line":2,"column":74,"nodeType":"410","messageId":"411","endLine":2,"endColumn":79},{"ruleId":"493","severity":1,"message":"494","line":108,"column":34,"nodeType":"495","messageId":"496","endLine":108,"endColumn":36},{"ruleId":"408","severity":1,"message":"497","line":167,"column":17,"nodeType":"410","messageId":"411","endLine":167,"endColumn":25},{"ruleId":"408","severity":1,"message":"498","line":167,"column":38,"nodeType":"410","messageId":"411","endLine":167,"endColumn":45},{"ruleId":"408","severity":1,"message":"499","line":167,"column":94,"nodeType":"410","messageId":"411","endLine":167,"endColumn":103},{"ruleId":"408","severity":1,"message":"461","line":8,"column":8,"nodeType":"410","messageId":"411","endLine":8,"endColumn":17},{"ruleId":"408","severity":1,"message":"445","line":9,"column":8,"nodeType":"410","messageId":"411","endLine":9,"endColumn":16},{"ruleId":"408","severity":1,"message":"478","line":11,"column":8,"nodeType":"410","messageId":"411","endLine":11,"endColumn":24},{"ruleId":"408","severity":1,"message":"479","line":13,"column":8,"nodeType":"410","messageId":"411","endLine":13,"endColumn":17},{"ruleId":"408","severity":1,"message":"480","line":14,"column":8,"nodeType":"410","messageId":"411","endLine":14,"endColumn":13},{"ruleId":"408","severity":1,"message":"481","line":15,"column":8,"nodeType":"410","messageId":"411","endLine":15,"endColumn":18},{"ruleId":"408","severity":1,"message":"446","line":16,"column":8,"nodeType":"410","messageId":"411","endLine":16,"endColumn":13},{"ruleId":"408","severity":1,"message":"409","line":17,"column":15,"nodeType":"410","messageId":"411","endLine":17,"endColumn":25},{"ruleId":"408","severity":1,"message":"500","line":3,"column":103,"nodeType":"410","messageId":"411","endLine":3,"endColumn":110},{"ruleId":"408","severity":1,"message":"476","line":3,"column":8,"nodeType":"410","messageId":"411","endLine":3,"endColumn":19},{"ruleId":"408","severity":1,"message":"474","line":5,"column":8,"nodeType":"410","messageId":"411","endLine":5,"endColumn":18},{"ruleId":"408","severity":1,"message":"475","line":6,"column":8,"nodeType":"410","messageId":"411","endLine":6,"endColumn":16},{"ruleId":"408","severity":1,"message":"477","line":7,"column":8,"nodeType":"410","messageId":"411","endLine":7,"endColumn":14},{"ruleId":"408","severity":1,"message":"445","line":9,"column":8,"nodeType":"410","messageId":"411","endLine":9,"endColumn":16},{"ruleId":"408","severity":1,"message":"478","line":11,"column":8,"nodeType":"410","messageId":"411","endLine":11,"endColumn":24},{"ruleId":"408","severity":1,"message":"479","line":13,"column":8,"nodeType":"410","messageId":"411","endLine":13,"endColumn":17},{"ruleId":"408","severity":1,"message":"480","line":14,"column":8,"nodeType":"410","messageId":"411","endLine":14,"endColumn":13},{"ruleId":"408","severity":1,"message":"481","line":15,"column":8,"nodeType":"410","messageId":"411","endLine":15,"endColumn":18},{"ruleId":"408","severity":1,"message":"446","line":16,"column":8,"nodeType":"410","messageId":"411","endLine":16,"endColumn":13},{"ruleId":"408","severity":1,"message":"409","line":17,"column":15,"nodeType":"410","messageId":"411","endLine":17,"endColumn":25},{"ruleId":"501","severity":1,"message":"502","line":82,"column":7,"nodeType":"503","messageId":"504","endLine":82,"endColumn":56},{"ruleId":"435","severity":1,"message":"436","line":101,"column":49,"nodeType":"437","messageId":"438","endLine":101,"endColumn":51},{"ruleId":"456","severity":1,"message":"457","line":135,"column":34,"nodeType":"437","messageId":"458","endLine":135,"endColumn":35},{"ruleId":"408","severity":1,"message":"431","line":3,"column":32,"nodeType":"410","messageId":"411","endLine":3,"endColumn":38},{"ruleId":"408","severity":1,"message":"461","line":3,"column":40,"nodeType":"410","messageId":"411","endLine":3,"endColumn":49},{"ruleId":"408","severity":1,"message":"462","line":3,"column":51,"nodeType":"410","messageId":"411","endLine":3,"endColumn":65},{"ruleId":"408","severity":1,"message":"463","line":3,"column":67,"nodeType":"410","messageId":"411","endLine":3,"endColumn":77},{"ruleId":"408","severity":1,"message":"464","line":3,"column":85,"nodeType":"410","messageId":"411","endLine":3,"endColumn":95},{"ruleId":"456","severity":1,"message":"457","line":150,"column":72,"nodeType":"437","messageId":"458","endLine":150,"endColumn":73},{"ruleId":"456","severity":1,"message":"457","line":150,"column":95,"nodeType":"437","messageId":"458","endLine":150,"endColumn":96},{"ruleId":"456","severity":1,"message":"457","line":150,"column":114,"nodeType":"437","messageId":"458","endLine":150,"endColumn":115},{"ruleId":"468","severity":1,"message":"469","line":170,"column":3,"nodeType":"470","messageId":"438","endLine":170,"endColumn":7},{"ruleId":"408","severity":1,"message":"505","line":3,"column":63,"nodeType":"410","messageId":"411","endLine":3,"endColumn":79},{"ruleId":"408","severity":1,"message":"434","line":4,"column":17,"nodeType":"410","messageId":"411","endLine":4,"endColumn":28},{"ruleId":"408","severity":1,"message":"460","line":6,"column":9,"nodeType":"410","messageId":"411","endLine":6,"endColumn":18},{"ruleId":"408","severity":1,"message":"432","line":8,"column":8,"nodeType":"410","messageId":"411","endLine":8,"endColumn":15},{"ruleId":"408","severity":1,"message":"506","line":9,"column":8,"nodeType":"410","messageId":"411","endLine":9,"endColumn":24},{"ruleId":"507","severity":1,"message":"508","line":47,"column":29,"nodeType":"509","messageId":"510","endLine":47,"endColumn":48,"fix":"511"},{"ruleId":"493","severity":1,"message":"494","line":137,"column":39,"nodeType":"495","messageId":"496","endLine":137,"endColumn":41},{"ruleId":"408","severity":1,"message":"467","line":165,"column":22,"nodeType":"410","messageId":"411","endLine":165,"endColumn":37},{"ruleId":"408","severity":1,"message":"471","line":165,"column":39,"nodeType":"410","messageId":"411","endLine":165,"endColumn":62},{"ruleId":"408","severity":1,"message":"512","line":165,"column":64,"nodeType":"410","messageId":"411","endLine":165,"endColumn":78},{"ruleId":"456","severity":1,"message":"457","line":182,"column":85,"nodeType":"437","messageId":"458","endLine":182,"endColumn":86},{"ruleId":"439","severity":1,"message":"440","line":189,"column":27,"nodeType":"441","endLine":189,"endColumn":45},{"ruleId":"439","severity":1,"message":"440","line":189,"column":46,"nodeType":"441","endLine":189,"endColumn":61},{"ruleId":"456","severity":1,"message":"457","line":193,"column":89,"nodeType":"437","messageId":"458","endLine":193,"endColumn":90},{"ruleId":"456","severity":1,"message":"457","line":196,"column":94,"nodeType":"437","messageId":"458","endLine":196,"endColumn":95},{"ruleId":"456","severity":1,"message":"457","line":220,"column":83,"nodeType":"437","messageId":"458","endLine":220,"endColumn":84},{"ruleId":"439","severity":1,"message":"440","line":226,"column":45,"nodeType":"441","endLine":226,"endColumn":60},{"ruleId":"456","severity":1,"message":"457","line":237,"column":87,"nodeType":"437","messageId":"458","endLine":237,"endColumn":88},{"ruleId":"456","severity":1,"message":"457","line":240,"column":92,"nodeType":"437","messageId":"458","endLine":240,"endColumn":93},{"ruleId":"408","severity":1,"message":"492","line":10,"column":28,"nodeType":"410","messageId":"411","endLine":10,"endColumn":32},{"ruleId":"408","severity":1,"message":"447","line":10,"column":44,"nodeType":"410","messageId":"411","endLine":10,"endColumn":48},{"ruleId":"408","severity":1,"message":"464","line":10,"column":50,"nodeType":"410","messageId":"411","endLine":10,"endColumn":60},{"ruleId":"408","severity":1,"message":"446","line":10,"column":62,"nodeType":"410","messageId":"411","endLine":10,"endColumn":67},{"ruleId":"507","severity":1,"message":"508","line":57,"column":22,"nodeType":"509","messageId":"510","endLine":57,"endColumn":35,"fix":"513"},{"ruleId":"514","severity":1,"message":"515","line":169,"column":13,"nodeType":"516","endLine":169,"endColumn":23},{"ruleId":"514","severity":1,"message":"515","line":183,"column":11,"nodeType":"516","endLine":183,"endColumn":21},{"ruleId":"408","severity":1,"message":"483","line":207,"column":34,"nodeType":"410","messageId":"411","endLine":207,"endColumn":41},{"ruleId":"456","severity":1,"message":"457","line":221,"column":115,"nodeType":"437","messageId":"458","endLine":221,"endColumn":116},{"ruleId":"456","severity":1,"message":"457","line":267,"column":112,"nodeType":"437","messageId":"458","endLine":267,"endColumn":113},{"ruleId":"456","severity":1,"message":"457","line":267,"column":138,"nodeType":"437","messageId":"458","endLine":267,"endColumn":139},{"ruleId":"456","severity":1,"message":"457","line":267,"column":168,"nodeType":"437","messageId":"458","endLine":267,"endColumn":169},"no-native-reassign",["517"],"no-negated-in-lhs",["518"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'RoleBO' is defined but never used.","'UserView' is defined but never used.","'name' is assigned a value but never used.","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 36 | \u001b[39m    \u001b[33m#\u001b[39mupdateSemesterURL \u001b[33m=\u001b[39m () \u001b[33m=>\u001b[39m \u001b[32m`${this.#AppServerBaseURL}/semesters`\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 37 | \u001b[39m    \u001b[33m#\u001b[39mdeleteSemesterURL \u001b[33m=\u001b[39m (id) \u001b[33m=>\u001b[39m \u001b[32m`${this.#AppServerBaseURL}/semester/${id}`\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 38 | \u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<<\u001b[39m\u001b[33m<\u001b[39m \u001b[33mHEAD\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m\u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 39 | \u001b[39m    \u001b[0m\n\u001b[0m \u001b[90m 40 | \u001b[39m\u001b[33m===\u001b[39m\u001b[33m===\u001b[39m\u001b[33m=\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 41 | \u001b[39m     \u001b[0m","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'user' is assigned a value but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'ProjectList' is defined but never used.","'ProjektFormular' is defined but never used.","'AppApi' is defined but never used.","'createMuiTheme' is defined but never used.","'StudentView' is defined but never used.","'AdminView' is defined but never used.","'DozentView' is defined but never used.","'Button' is defined but never used.","'AddIcon' is defined but never used.","'ProjectForm' is defined but never used.","'ButtonGroup' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["517"],["518"],"'useEffect' is defined but never used.","'Checkbox' is defined but never used.","'Input' is defined but never used.","'Link' is defined but never used.","'setRaum' is assigned a value but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'Icon' is defined but never used.","'RouterLink' is defined but never used.","'BusinessObject' is defined but never used.","'StudentBO' is defined but never used.","'addingError' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'useState' is defined but never used.","'ProjectBO' is defined but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'filteredProjects' is assigned a value but never used.","'projectFilter' is assigned a value but never used.","'showProjectForm' is assigned a value but never used.","no-dupe-keys","Duplicate key 'root'.","ObjectExpression","'showProjectDeleteDialog' is assigned a value but never used.","'StudentLogin' is defined but never used.","'ProjectListStudent' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'FormControlLabel' is defined but never used.","'FormLabel' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'PersonBO' is defined but never used.","'student' is assigned a value but never used.","'Grid' is defined but never used.","'ClearIcon' is defined but never used.","'expandedProjectID' is assigned a value but never used.","'ExpandMoreIcon' is defined but never used.","'Semesterbericht' is defined but never used.","'Paper' is defined but never used.","'LoadingProgress' is defined but never used.","Expected '!==' and instead saw '!='.","'List' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'semester' is assigned a value but never used.","'updateS' is assigned a value but never used.","'textField' is assigned a value but never used.","'Divider' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'AccordionDetails' is defined but never used.","'ReplyRoundedIcon' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"519","text":"520"},"'participations' is assigned a value but never used.",{"range":"521","text":"520"},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation",[1524,1524],"()",[1934,1934]]