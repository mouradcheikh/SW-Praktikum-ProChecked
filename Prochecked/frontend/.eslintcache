[{"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/App.js":"1"},{"size":4371,"mtime":1606565696238,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"1getito","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/App.js",["7"],"import React from 'react';\n\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\n\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\n\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport Header from './components/layout/Header' //importiere von Layout den Header \nimport SignIn from './components/pages/SignIn' //importiere von Pages das SignIn\nimport UserView from './components/pages/UserView'\nimport About from './components/pages/About';\nimport firebaseConfig from './components/pages/firebaseconfig';\n\nclass App extends React.Component {\n    //Constrcutor welcher Firebaze initialisiert \n    constructor (props) {\n        super(props)\n    \n\n    //Dann wird ein leeres state initalisiert \n\t    this.state = {\n            googleUser: null,\n            appError: null,\n            authError: null,\n            authLoading: false\n        };\n    }\n\n    static getDerivedStateFromError(error) { //Hier wird der Status aktualisiert, \n\t\treturn { appError: error };          // dass beim nächsten Rendern die Fallback UI angezeigt wird \n    }\n    \n    handleAuthStateChange = user => { // Firebase Benutzer logt sich ein, der state wechselt den Zustand \n\t\tif (user) {\n\t\t\tthis.setState({\n\t\t\t\tauthLoading: true\n            });\n            \n            //der User ist eingeloggt\n            user.getIdToken().then(token => {\n                document.cookie = `token=${token};path=/`;\n            \n            //setzt den Nutzer auf Not bevor der Token angekommen ist \n                this.setState({\n\t\t\t\t\tgoogleUser: user,\n\t\t\t\t\tauthError: null,\n\t\t\t\t\tauthLoading: false\n                });\n                //schauen ob der User bereits in der Datenbank ist\n                this.checkUserInDatabase (user.displayName, user.email,user.id);\n            }).catch(error =>{\n                this.setState({\n                    authError:error,\n                    authLoading: false \n                });\n            });\n        \n        } else {\n            document.cookie = 'token=;path=/'; //User hat sich ausgeloggt, clear token\n            //setze den ausgeloggten User auf null\n            this.setState ({\n                googleUser: null,\n                authLoading: false \n            });\n        }\n    }\n\n    handleSignIn = () => {\n\t\tthis.setState({\n\t\t\tauthLoading: true\n\t\t});\n\t\tconst provider = new firebase.auth.GoogleAuthProvider(); //Erstelle Instanz des Google-Provider-Objekts\n\t\tfirebase.auth().signInWithRedirect(provider); // Umleiten auf die signInWithRedirect ruft signInWithRedirect auf \n    }\n    \n    checkIfUserInDatabase(name, email, googleId) {\n        var api = AppAPI.getAPI()\n        api.getUserByGoogleId(googleId).then((user) => {\n          if (!user.getGoogleId()) {\n            var suggestion = new UserBO(name, email, googleId)\n            api.createUser(suggestion).then((newUser) => {\n              this.setState({\n                user: newUser\n              })\n            })\n          }\n\n          else {\n              this.setState({\n                  user: user\n              })\n          };\n        \n    \n    componentDidMount(); {\n        firebase.initializeApp(firebaseConfig);\n        firebase.auth().languageCode = 'en';\n        firebase.auth().onAuthStateChanged(this.handleAuthStateChange);\n        };\n    \n\n    \t/** Renders the whole app */\n\trender(); {\n\t\tconst { user, appError, authError, authLoading } = this.state;\n\n\t\treturn (\n\t\t\t<ThemeProvider theme={Theme}>\n\t\t\t\t<CssBaseline />\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t\t<Container maxWidth='md'>\n\t\t\t\t\t\t<Header user={user} />\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Ist ein User eingeloggt?\n\t\t\t\t\t\t\tuser ?\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Redirect from='/' to='user' />\n\t\t\t\t\t\t\t\t\t<Route exact path='/user'>\n\t\t\t\t\t\t\t\t\t\t<UserView />\n\t\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t// sonst zeige die SignIn Seite \n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Redirect to='/SignIn' />\n\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<LoadingProgress show={authLoading} />\n\t\t\t\t\t\t<ContextErrorMessage error={authError} contextErrorMsg={`Während der Anmeldung ist etwas falsch gelaufen.`} onReload={this.handleSignIn} />\n\t\t\t\t\t\t<ContextErrorMessage error={appError} contextErrorMsg={`Innerhalb des Programms gab es einen Fehler. Bitte die Seite erneut laden.`} />\n\t\t\t\t\t</Container>\n\t\t\t\t</Router>\n\t\t\t</ThemeProvider>\n\t\t);\n\t}\n}\n\nexport default App;",{"ruleId":null,"fatal":true,"severity":2,"message":"8","line":140,"column":1},"Parsing error: Unexpected token, expected \",\"\n\n  138 | }\n  139 | \n> 140 | export default App;\n      | ^"]