[{"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\index.js":"1","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\App.js":"2","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Theme.js":"3","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\RoleBO.js":"4","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\PersonBO.js":"5","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\AppApi.js":"6","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView.js":"7","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\SignIn.js":"8","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\layout\\Header.js":"9","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\PersonLoggedIn.js":"10","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\UserView.js":"11","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\LoadingProgress.js":"12","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ContextErrorMessage.js":"13","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjectList.js":"14","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjektErstellen.js":"15","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\DozentView.js":"16","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\BusinessObject.js":"17","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\ProjectBO.js":"18","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\StudentBO.js":"19","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\ParticipationBO.js":"20","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\GradingBO.js":"21","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjectListEntry.js":"22","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ParticipationForm.js":"23","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\index.js":"24","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ParticipationList.js":"25","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ProjectDeleteDialog.js":"26","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ParticipationListEntry.js":"27","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView.js":"28"},{"size":149,"mtime":1607077333800,"results":"29","hashOfConfig":"30"},{"size":9721,"mtime":1609161347144,"results":"31","hashOfConfig":"30"},{"size":1787,"mtime":1606826666305,"results":"32","hashOfConfig":"30"},{"size":449,"mtime":1607288611622,"results":"33","hashOfConfig":"30"},{"size":1783,"mtime":1608633733670,"results":"34","hashOfConfig":"30"},{"size":16661,"mtime":1609161347145,"results":"35","hashOfConfig":"30"},{"size":1730,"mtime":1609161347152,"results":"36","hashOfConfig":"30"},{"size":1551,"mtime":1609161347169,"results":"37","hashOfConfig":"30"},{"size":1336,"mtime":1608633733674,"results":"38","hashOfConfig":"30"},{"size":1678,"mtime":1609161347162,"results":"39","hashOfConfig":"30"},{"size":2735,"mtime":1609161347170,"results":"40","hashOfConfig":"30"},{"size":934,"mtime":1606658777575,"results":"41","hashOfConfig":"30"},{"size":2209,"mtime":1606658777574,"results":"42","hashOfConfig":"30"},{"size":6204,"mtime":1609161347164,"results":"43","hashOfConfig":"30"},{"size":11748,"mtime":1609161347166,"results":"44","hashOfConfig":"30"},{"size":2101,"mtime":1609161347154,"results":"45","hashOfConfig":"30"},{"size":1166,"mtime":1607537165096,"results":"46","hashOfConfig":"30"},{"size":3238,"mtime":1609156818473,"results":"47","hashOfConfig":"30"},{"size":1491,"mtime":1608633733671,"results":"48","hashOfConfig":"30"},{"size":1709,"mtime":1608633733670,"results":"49","hashOfConfig":"30"},{"size":1955,"mtime":1609075351199,"results":"50","hashOfConfig":"30"},{"size":3613,"mtime":1609161347165,"results":"51","hashOfConfig":"30"},{"size":7860,"mtime":1609161347147,"results":"52","hashOfConfig":"30"},{"size":435,"mtime":1609075351213,"results":"53","hashOfConfig":"30"},{"size":5626,"mtime":1609161347157,"results":"54","hashOfConfig":"30"},{"size":4282,"mtime":1607773792603,"results":"55","hashOfConfig":"30"},{"size":10796,"mtime":1609161347160,"results":"56","hashOfConfig":"30"},{"size":174,"mtime":1607879334311,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15ctbv9",{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\index.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\App.js",["124","125","126","127"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Theme.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\RoleBO.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\PersonBO.js",["128"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\AppApi.js",[],["129","130"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView.js",["131","132"],"// import React, { Component } from 'react';\r\n// function AdminView(){\r\n//     return( \r\n//         <div>\r\n//             <h1> AdminView </h1>\r\n//         </div>\r\n//     );\r\n// }\r\n// export default AdminView;\r\n\r\n// class AdminView extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//     }\r\n//     render() { \r\n//         return ( \r\n//         <div>\r\n//             <h1> AdminView </h1>\r\n//         </div>\r\n//          );\r\n//     }npm install react-theme-loader --save\r\n// }\r\n \r\n// export default AdminView; \r\n\r\n\r\nimport React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport { makeStyles, createStyles, createMuiTheme, Theme } from '@material-ui/core/styles';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      backgroundColor: 'gray'\r\n    },\r\n    paper: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function MenuListComposition() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    \r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <h1>Was möchten Sie tun?</h1>\r\n        <MenuList>\r\n          <Link to='/ReleaseProject'>\r\n          <MenuItem>Projekte freigeben</MenuItem>\r\n          </Link>\r\n          <Link to='/CreateProject' >\r\n          <MenuItem>Projekte erstellen</MenuItem>\r\n          </Link>\r\n          <Link>\r\n          <MenuItem>X</MenuItem>\r\n          </Link>\r\n        </MenuList>\r\n      </Paper>   \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\SignIn.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\layout\\Header.js",["133","134"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\PersonLoggedIn.js",["135","136"],"import React, { Component } from 'react';\r\nimport StudentView from './StudentView'\r\nimport AdminView from './AdminView'\r\nimport DozentView from './DozentView'\r\nimport UserView from './UserView'\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\n\r\n\r\n\r\nclass PersonLoggedIn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() \r\n    { \r\n        let page\r\n        let berechtigung = this.props.berechtigung\r\n        if (berechtigung === 1){\r\n            page = <> \r\n                    <Redirect to={{\r\n                    pathname: '/StudentView'\r\n                    }}\r\n                    />\r\n                    </>\r\n        }\r\n        else if (berechtigung === 2){\r\n            page = <>\t\r\n                    <Redirect to={{\r\n                    pathname: '/DozentView',\r\n                    state: { person : this.props.person }\r\n                    }}\r\n                    />\r\n                    </>\r\n        }\r\n        else if (berechtigung === 3){\r\n            page = <>\t\r\n                    <Redirect to={{\r\n                    pathname: '/AdminView',\r\n                    }}\r\n                    />\r\n                    </>\r\n        }\r\n        else {\r\n            page = <>\r\n                    <Redirect from='/' to='UserView' />\r\n                    <Route exact path='/UserView'>\r\n                    <UserView setRole={this.props.setRole} person={this.props.person}/>\r\n                    </Route>\r\n                    </>;\r\n        }\r\n        return(\r\n            <div>\r\n                {page}\r\n            </div>\r\n            \r\n            )\r\n         ;\r\n    }\r\n}\r\n \r\nexport default PersonLoggedIn; \r\n\r\n\r\n// let page\r\n        // let berechtigung = person.getBerechtigung()\r\n        // if (berechtigung === 1){\r\n        //     page = <> \r\n        //             <Redirect from='/' to='StudentenView' />\r\n        //             <Route exact path='/StudentenView'>\r\n        //             <StudentenView/>\r\n        //             </Route>\r\n        //             </>\r\n        // }\r\n        // else if (berechtigung === 2){\r\n        //     page = <>\t\r\n        //             <Redirect from='/' to='DozentView' />\r\n        //             <Route exact path='/DozentView'>\r\n        //             <DozentView/>\r\n        //             </Route> \r\n        //             </>\r\n        // }\r\n        // else if (berechtigung === 3){\r\n        //     page = <>\t\r\n        //             <Redirect from='/' to='AdminView' />\r\n        //             <Route exact path='/AdminView'>\r\n        //             <AdminView/>\r\n        //             </Route>\r\n        //            </>\r\n        // }\r\n        // else {\r\n        //     page = <>\r\n        //             <Redirect from='/' to='UserView' />\r\n        //             <Route exact path='/UserView'>\r\n        //             <UserView setRole={this.setRole}/>\r\n        //             </Route>\r\n        //             </>;\r\n        // }","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\UserView.js",["137","138"],"import Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import { Link as RouterLink } from 'react-router-dom'\r\n// import './App.css';\r\nimport React, { Component } from 'react';\r\nimport RoleBO from '../../AppApi/RoleBO'\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass UserView extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n    }\r\n\r\n    handleAdminButtonClicked = () => {\r\n      this.props.setRole(3);\r\n      this.viewRole()\r\n    }\r\n\r\n    handleStudentButtonClicked = () => {\r\n      this.props.setRole(1);\r\n      this.viewRole()\r\n    }\r\n\r\n    handleDozentButtonClicked = () => {\r\n      this.props.setRole(2);\r\n      this.viewRole()\r\n    }\r\n\r\n    viewRole= function() {\r\n      console.log(\"clicked\")\r\n    };\r\n\r\nrender () {\r\n  const { classes } = this.props;\r\n\r\n\treturn(\r\n        <div>\r\n          <center>\r\n                <h1>Bitte wählen Sie Ihre Rolle:</h1>\r\n                <div>\r\n                <Link to='/StudentView'>\r\n                <Button\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick = {this.handleStudentButtonClicked}\r\n                >\r\n                            Student\r\n                    \r\n                </Button>\r\n                </Link>\r\n                </div>\r\n                <div>\r\n                <Link to={{\r\n                pathname: '/DozentView',\r\n                state: { person: this.props.person }\r\n                }}>\r\n                <Button\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    algin=\"center\"\r\n                    className={classes.button}\r\n                    onClick = {this.handleDozentButtonClicked}\r\n                    \r\n                >\r\n                            Dozent\r\n                    \r\n                </Button>\r\n                </Link>\r\n                </div>\r\n                <div>\r\n                <Link to='/AdminView'>\r\n                <Button\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick = {this.handleAdminButtonClicked}\r\n                    \r\n                 >\r\n                            Admin\r\n                  \r\n                </Button>\r\n                </Link>\r\n                </div>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = (theme) => ({\r\n  button: {\r\n    margin: theme.spacing(2),\r\n    width: 170,\r\n    fontSize: 25,\r\n    padding: \"15x 0\"\r\n  },\r\n})\r\n\r\n  export default  withStyles(styles)(UserView);","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\LoadingProgress.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ContextErrorMessage.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjectList.js",["139","140","141","142"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport { withRouter } from 'react-router-dom';\r\nimport  {AppApi}  from '../../AppApi';\r\nimport ContextErrorMessage from '../dialogs/ContextErrorMessage';\r\nimport LoadingProgress from '../dialogs/LoadingProgress';\r\nimport ProjectForm from '../dialogs/ParticipationForm';\r\nimport ProjectListEntry from './ProjectListEntry';\r\n\r\n/**\r\n * Controlls a list of ProjectListEntrys to create a accordion for each project.\r\n *\r\n * @see See [ProjectListEntry](#projectlistentry)\r\n *\r\n */\r\nclass ProjectList extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // console.log(props);\r\n    let expandedID = null;\r\n\r\n    if (this.props.location.expandProject) {\r\n      expandedID = this.props.location.expandProject.getID();\r\n    }\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      projects: [],\r\n      filteredProjects: [],\r\n      projectFilter: '',\r\n      error: null,\r\n      loadingInProgress: false,\r\n      expandedProjectID: expandedID,\r\n      showProjectForm: false //evtl.nicht \r\n    };\r\n  }\r\n\r\n  /** Fetches all ProjectBOs from the backend */\r\n  getProjectsByDozent = (person_id) => {\r\n  // console.log(\"vor fetch\")\r\n    var api = AppApi.getAPI()\r\n    api.getProjectsByDozent(person_id) //evtl. Objekt von API vorher anlegen\r\n      .then(projectBOs =>\r\n        this.setState({               // Set new state when ProjectBOs have been fetched\r\n          projects: projectBOs,\r\n          filteredProjects: [...projectBOs], // store a copy\r\n          loadingInProgress: false,   // disable loading indicator\r\n          error: null\r\n        })).catch(e =>\r\n          this.setState({             // Reset state with error from catch\r\n            projects: [],\r\n            loadingInProgress: false, // disable loading indicator\r\n            error: e\r\n          })\r\n        );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      loadingInProgress: true,\r\n      error: null\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles onExpandedStateChange events from the ProjectListEntry component. Toggels the expanded state of\r\n   * the ProjectListEntry of the given ProjectBO.\r\n   *\r\n   * @param {project} ProjectBO of the ProjectListEntry to be toggeled\r\n   */\r\n  onExpandedStateChange = project => {\r\n    // console.log(projectID);\r\n    // Set expandend project entry to null by default\r\n    let newID = null;\r\n\r\n    // If same project entry is clicked, collapse it else expand a new one\r\n    if (project.getID() !== this.state.expandedProjectID) {\r\n      // Expand the project entry with projectID\r\n      newID = project.getID();\r\n    }\r\n    // console.log(newID);\r\n    this.setState({\r\n      expandedProjectID: newID,\r\n    });\r\n  }\r\n\r\n  /** Handels onChange events of the project filter text field */\r\n  filterFieldValueChange = event => {\r\n    const value = event.target.value.toLowerCase();\r\n    this.setState({\r\n      filteredProjects: this.state.projects.filter(project => {\r\n        let nameContainsValue = project.getName().toLowerCase().includes(value);\r\n\r\n        return nameContainsValue\r\n      }),\r\n      projectFilter: value\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the clear filter button */\r\n  clearFilterFieldButtonClicked = () => {\r\n    // Reset the filter\r\n    this.setState({\r\n      filteredProjects: [...this.state.projects],\r\n      projectFilter: ''\r\n    });\r\n  }\r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    // console.log(\"gerendert\")\r\n    let person = this.props.location.state.linkState\r\n    this.getProjectsByDozent(person.getID());\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { filteredProjects, projectFilter, expandedProjectID, loadingInProgress, error, showProjectForm } = this.state;\r\n\r\n    return (\r\n      <div className={classes.root}>\r\n        <Grid className={classes.projectFilter} container spacing={1} justify='flex-start' alignItems='center'>\r\n          <Grid item>\r\n            <Typography>\r\n              Projektfilter:\r\n              </Typography>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              autoFocus\r\n              fullWidth\r\n              id='projectFilter'\r\n              type='text'\r\n              value={projectFilter}\r\n              onChange={this.filterFieldValueChange}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position='end'>\r\n                  <IconButton onClick={this.clearFilterFieldButtonClicked}>\r\n                    <ClearIcon />\r\n                  </IconButton>\r\n                </InputAdornment>,\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {\r\n          // Show the list of ProjectListEntry components\r\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\r\n          filteredProjects.map(project =>\r\n            <ProjectListEntry key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}\r\n              onExpandedStateChange={this.onExpandedStateChange}\r\n              onProjectDeleted={this.projectDeleted}\r\n            />)\r\n        }\r\n        <LoadingProgress show={loadingInProgress} />\r\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByDozent} />\r\n        {/* <ProjectForm show={showProjectForm} onClose={this.projectFormClosed} /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  projectFilter: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(1),\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProjectList.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** @ignore */\r\n  location: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(ProjectList));","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjektErstellen.js",["143","144","145","146","147","148","149"],"import React, { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n// import FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { Button } from '@material-ui/core';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport Input from '@material-ui/core/Input';\r\nimport { AppApi } from '../../AppApi';\r\nimport ProjectBO from '../../AppApi/ProjectBO';\r\nimport {Link, useHistory} from 'react-router-dom';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    width: \"100%\",\r\n  },\r\n  text: {\r\n    margin: theme.spacing(0),\r\n    width: \"100%\",\r\n  }\r\n}));\r\n\r\nfunction ProjektFormular(props) {\r\n  const classes = useStyles();\r\n  const [ProjektArt, setProjektArt] = React.useState('');\r\n  const [Professor, setProfessor] = React.useState(null);\r\n  const [Titel, setProjektTitel] = React.useState('');\r\n  const [Kapazität,setKapazität] = React.useState('');\r\n  const [Inhalt, setInhalt] = React.useState('');\r\n  const [Raum, setRaum] = React.useState('');\r\n  const [WT, setWT] = React.useState('Ja');\r\n  const [BTvorVZ, setBTvorVZ] = React.useState('0');\r\n  const [BTinPZ, setBTinPZ] = React.useState('0');\r\n  const [BTinVZ, setBTinVZ] = React.useState('0');\r\n  const [BesondererRaum, setBesondererRaum] = React.useState('');\r\n  const [Professors, setProfessors] = React.useState(['']);\r\n  const [extKoop, setextKoop] = React.useState('');\r\n  const [Semester, setSemester] = React.useState('');\r\n  const [Semesters, setSemesters] = React.useState(['']);\r\n  const [BT, setBT] = React.useState(null);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const history = useHistory()\r\n\r\n  const handleProjektArt = (event) => {\r\n    setProjektArt(event.target.value);\r\n  };\r\n\r\n  const handleProfessor = (event) => {\r\n    setProfessor(event.target.value);\r\n    console.log(Professor)\r\n  }\r\n\r\n  const handleSemester = (event) => {\r\n    setSemester(event.target.value);\r\n  }\r\n\r\n  const handleWT = (event) => {\r\n    setWT(event.target.value);\r\n  };\r\n\r\n\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const project = new ProjectBO(Titel)\r\n    project.setProjectType(ProjektArt)\r\n    project.setCapacity(Kapazität)\r\n    project.setShortDescription(Inhalt)\r\n    let dozent = props.location.state.linkState\r\n    project.setDozent(dozent.id)\r\n    project.setRoom(Raum)\r\n    project.setWeeklyFlag(WT)\r\n    project.setNumberBdBLecturetime(BTvorVZ)\r\n    project.setNumberBdLecturetime(BTinVZ)\r\n    project.setNumberBdExamtime(BTinPZ)\r\n    project.setSpecialRoom(BesondererRaum)\r\n    // project.setDozent(Professor)\r\n    project.setProjectState(1)\r\n    project.setExtPartnerList(extKoop)\r\n    project.setSemester(Semester.id)\r\n    project.setprefferedbd(BT)\r\n\r\n    if (Professor != null){\r\n      project.setDozent2(Professor.id)\r\n    }\r\n\r\n    console.log(project)\r\n\r\n    var api = AppApi.getAPI()\r\n        // console.log(api)\r\n        api.createProject(project).then((project) =>\r\n            {console.log(project)\r\n            }\r\n            )\r\n\r\n    // console.log(\r\n    //   'ProjektArt:', ProjektArt, \r\n    //   'Titel:', Titel,\r\n    //   'Kapazität:', Kapazität,\r\n    //   'Inhalt:', Inhalt,\r\n    //   'Raum:', Raum,\r\n    //   'Wöchentlich:', WT,\r\n    //   'Blocktage vor Beginn der VZ:', BTvorVZ,\r\n    //   'Blocktage in der PZ:', BTinPZ,\r\n    //   'BT in der VZ:', BTinVZ,\r\n    //   'Besonderer Raum:', BesondererRaum,\r\n    //   'Professors:', Professors,\r\n    //   'current dozent', dozent.id\r\n    //   );\r\n    history.push({\r\n      pathname: '/DozentView',\r\n      state: {  \r\n        person: props.location.state.linkState, \r\n      },\r\n    }); \r\n  }\r\n  \r\n\r\nfunction ProfList(){\r\n  var api = AppApi.getAPI()\r\n  api.getPersonByRole(2).then((persons) =>\r\n  {console.log(persons)\r\n  setProfessors(persons)})\r\n}\r\n\r\nfunction SemesterList(){\r\n  var api = AppApi.getAPI()\r\n  api.getSemesters().then((semesters) =>\r\n  {console.log(semesters)\r\n  setSemesters(semesters)})\r\n}\r\n\r\n// useEffect(() => {\r\n//   console.log(\"useEffect\")\r\n//   function ProfList(){\r\n//     var api = AppApi.getAPI()\r\n//     api.getPersonByRole(2).then((persons) =>\r\n//     {console.log(persons)\r\n//     setProfessors(persons)})\r\n//   }\r\n//   ProfList()\r\n//   // var Profs = props.location.state.linkState\r\n//   // setProfessors(Profs)\r\n//   console.log(Professors)\r\n//   }, []\r\n//   )\r\n\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <center>\r\n      <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <h1>Geben Sie die Daten für das neue Projekt an:</h1>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"artProjekt\">Art des Projekts</InputLabel>\r\n            <Select\r\n              labelId=\"artProjekt\"\r\n              id=\"ProjektArt\"\r\n              value={ProjektArt}\r\n              onChange={handleProjektArt}\r\n            >\r\n              <MenuItem value={1}>Fachspezifisches Projekt</MenuItem>\r\n              <MenuItem value={2}>Interdisziplinäres Projekt</MenuItem>\r\n              <MenuItem value={3}>Transdisziplinäres Projekt</MenuItem>\r\n\r\n              </Select>\r\n        </FormControl>\r\n        <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"semester\">Semester</InputLabel>\r\n              <Select\r\n                labelId=\"semester\"\r\n                id=\"semester\"\r\n                value={Semester}\r\n                onChange={handleSemester} \r\n                onOpen={SemesterList}\r\n              >\r\n              {\r\n              Semesters.map((semester) => <MenuItem value = {semester}> {semester.name} </MenuItem>)\r\n              }\r\n              </Select>\r\n              </FormControl>\r\n        {/* <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"semester\">Semester</InputLabel>\r\n              <Select\r\n                labelId=\"semester\"\r\n                id=\"semester\"\r\n                value={Semester}\r\n                onChange={handleSemester} \r\n                onOpen={SemesterList}\r\n              >\r\n              {\r\n              Semester.map((Semester) => <MenuItem value = {Semester.id}> {Semester.name} </MenuItem>)\r\n              }\r\n              </Select>\r\n              </FormControl> */}\r\n      </div>\r\n          <div><TextField className={classes.formControl}\r\n            id=\"titelProjekt\" \r\n            label=\"Titel des Projekts\" \r\n            variant=\"outlined\"\r\n            value={Titel}\r\n            onInput={e=>setProjektTitel(e.target.value)}\r\n            />\r\n            \r\n          </div>\r\n          <div><TextField className={classes.formControl}\r\n            id=\"maxTeilnehmer\"\r\n            label=\"Kapazität (max. Teilnehmerzahl)\"\r\n            type=\"number\" \r\n            variant=\"outlined\" \r\n            value={Kapazität}\r\n            onInput={e=>setKapazität(e.target.value)}\r\n            />\r\n            \r\n          </div>\r\n          <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"artProjekt\">weitere betreuende Professoren</InputLabel>\r\n              <Select\r\n                labelId=\"artProjekt\"\r\n                id=\"ProjektArt\"\r\n                value={Professor}\r\n                onChange={handleProfessor} \r\n                onOpen={ProfList}\r\n              >\r\n              {\r\n              Professors.map((Professor) => <MenuItem value = {Professor}> {Professor.name} </MenuItem>)\r\n              }\r\n              </Select>\r\n              </FormControl>\r\n              <div><TextField className={classes.formControl}\r\n                      id=\"ext. Koop.\"\r\n                      label=\"externe Kooperationspartner\"\r\n                      variant=\"outlined\"\r\n                      value={extKoop}\r\n                      onInput={e=>setextKoop(e.target.value)}\r\n                      />\r\n                </div>\r\n                <div><TextField className={classes.formControl}\r\n                    id=\"Inhalt\"\r\n                    label=\"Inhalt (Kurzbeschreibung):\"\r\n                    multiline\r\n                    rows={6} \r\n                    variant=\"outlined\" \r\n                    value={Inhalt}\r\n                    onInput={e=>setInhalt(e.target.value)}\r\n                    />\r\n                </div>\r\n              <div>\r\n              <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                  <FormLabel component=\"legend\">wöchentliche Termine</FormLabel>\r\n                  <RadioGroup aria-label=\"WT\" name=\"WT\" value={WT} onChange={handleWT}>\r\n                    <FormControlLabel value=\"true\" control={<Radio />} label=\"Ja\" />\r\n                    <FormControlLabel value=\"false\" control={<Radio />} label=\"Nein\" />\r\n                  </RadioGroup>\r\n              </FormControl>\r\n              </div>\r\n              <div><TextField className={classes.formControl}\r\n                    id=\"BT vor der VZ\"\r\n                    label=\"Blocktage vor Beginn der Vorlesungszeit \"\r\n                    variant=\"outlined\" \r\n                    type=\"number\"\r\n                    value={BTvorVZ}\r\n                    onInput={e=>setBTvorVZ(e.target.value)}\r\n                    />\r\n               </div>\r\n              <div><TextField className={classes.formControl}\r\n                    id=\"BT in der PZ\"\r\n                    label=\"Blocktage in der Prüfungszeit (nur inter-/tans. Projekte)\"\r\n                    variant=\"outlined\"\r\n                    type=\"number\" \r\n                    value={BTinPZ}\r\n                    onInput={e=>setBTinPZ(e.target.value)}\r\n                    />\r\n              </div>    \r\n              <div>\r\n                    <TextField className={classes.formControl}\r\n                    id=\"BTSamstag\"\r\n                    label=\"Blocktage (Samstag) in der Vorlesungszeit\"\r\n                    variant=\"outlined\"\r\n                    type=\"number\" \r\n                    value={BTinVZ}\r\n                    onInput={e=>setBTinVZ(e.target.value)}\r\n                    />\r\n               </div>\r\n               <div>\r\n                 <TextField className={classes.formControl}\r\n                    id=\"Blocktage\"\r\n                    label=\"präferierte Blocktage\"\r\n                    type=\"date\" \r\n                    variant=\"outlined\" \r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    onInput={e=>setBT(e.target.value)}\r\n                  />\r\n               </div>\r\n               <div><TextField className={classes.formControl}\r\n                    id=\"BesondererRaum\"\r\n                    label=\"besonderer Raum (falls notwendig)\"\r\n                    variant=\"outlined\" \r\n                    value={BesondererRaum}\r\n                    onInput={e=>setBesondererRaum(e.target.value)}\r\n                    />\r\n               </div>\r\n            <div>\r\n              {/* <Link to={{\r\n              pathname: \"/DozentView\",\r\n              state: { person : props.location.state.linkState }\r\n              }}> */}\r\n                <Button\r\n                 type=\"submit\"\r\n                 variant=\"contained\"\r\n                 color=\"primary\" \r\n                >\r\n                  Speichern\r\n                </Button>\r\n              {/* </Link> */}\r\n            </div>\r\n          </form>\r\n          </center>\r\n      </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ProjektFormular;\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\DozentView.js",["150","151","152","153","154","155","156"],"import Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n// import { Link as RouterLink } from 'react-router-dom'\r\n//import './App.css';\r\nimport React, { Component } from 'react';\r\n// import RoleBO from '../../AppApi/RoleBO'\r\nimport {Link} from 'react-router-dom';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\nimport ProjectList from './ProjectList';\r\nimport ProjektFormular from './ProjektErstellen'\r\nimport UserView from './UserView'\r\nimport { AppApi } from '../../AppApi';\r\n\r\n\r\n\r\n\r\n// function DozentenView(props) {\r\nclass DozentenView extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      DozentList : null\r\n  };\r\n  }\r\n\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const person = this.props.location.state.person\r\n\r\n    return(<div>\r\n      <center>\r\n        <div>\r\n            <h1>Wählen Sie einen der folgenden Optionen aus:</h1>\r\n            <Link to={{\r\n            pathname: '/CreateProject',\r\n            state: { linkState: person }\r\n            }}>\r\n            <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                // onClick = {this.handleProjektErstellen}\r\n            >\r\n                        Projekt erstellen\r\n                \r\n            </Button>\r\n            </Link>\r\n        </div>\r\n            \r\n            <div>            \r\n\r\n            <Link to={{\r\n            pathname: '/ProjectList',\r\n            state: { linkState: person }\r\n            }}>\r\n           <Button\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                algin=\"center\"\r\n                className={classes.button}\r\n                // person={classes.person}\r\n                \r\n                // person={this.props.person}\r\n                // onClick = {this.viewTest2()}\r\n                > \r\n                    Bewertung und Teilnehmerpflege\r\n            </Button>\r\n            </Link>\r\n            \r\n            \r\n            </div>\r\n    </center>\r\n  </div>\r\n); \r\n\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n  // const { classes } = props;\r\n\r\n//   if (this.state.redirect === \"projekterstellen\"){\r\n//       return(\r\n//             <> \r\n//             <Route path='/CreateProject' render={ProjektFormular}>\r\n//             </Route>\r\n//             </> \r\n//       )\r\n//   }\r\n//   else if (this.state.redirect === \"bewertung\"){\r\n//       return(\r\n//         <> \r\n//             <Redirect from='/' to='ProjectList'/>\r\n//             <Route exact path='/ProjectList'>\r\n//             <ProjectList person = {this.props.person}/>\r\n//             </Route>\r\n//             </>\r\n//       )\r\n//   }\r\n// }\r\n\r\n\t// return(\r\n  //       <div>\r\n  //         <center>\r\n  //           <div>\r\n  //               <h1>Wählen Sie einen der folgenden Optionen aus:</h1>\r\n  //               <Link to = '/CreateProject'>\r\n  //               <Button\r\n  //                   size=\"large\"\r\n  //                   variant=\"contained\"\r\n  //                   color=\"primary\"\r\n  //                   className={classes.button}\r\n  //                   // onClick = {this.handleProjektErstellen}\r\n  //               >\r\n  //                           Projekt erstellen\r\n                    \r\n  //               </Button>\r\n  //               </Link>\r\n  //           </div>\r\n                \r\n  //               <div>\r\n\r\n\r\n  //               <Link to = '/ProjectList'>\r\n  //               <Button\r\n  //                   size=\"large\"\r\n  //                   variant=\"contained\"\r\n  //                   color=\"primary\"\r\n  //                   algin=\"center\"\r\n  //                   className={classes.button}\r\n  //                   // person={classes.person}\r\n                    \r\n  //                   // person={this.props.person}\r\n  //                   // onClick = {this.handleBewertung}\r\n  //                   onClick = {props.viewTest2()}\r\n  //               >\r\n  //                           Bewertung und Teilnehmerpflege\r\n  //               </Button>\r\n  //               </Link>\r\n  //               </div>\r\n  //       </center>\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n\r\nconst styles = (theme) => ({\r\n  button: {\r\n    margin: theme.spacing(2),\r\n    width: 285,\r\n    fontSize: 25,\r\n    padding: \"15x 0\"\r\n  },\r\n})\r\n\r\n  export default withStyles(styles)(DozentenView);\r\n\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\BusinessObject.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\ProjectBO.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\StudentBO.js",["157"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\ParticipationBO.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\GradingBO.js",["158"],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ProjectListEntry.js",["159","160","161","162","163","164"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\r\nimport { Button, ButtonGroup } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ProjectForm from '../dialogs/ParticipationForm';\r\nimport ProjectDeleteDialog from '../../Components/dialogs/ProjectDeleteDialog';\r\nimport ParticipationList from './ParticipationList';\r\n\r\n/**\r\n * Renders a ProjectBO object within a expandable/collapsible ProjectListEntry with the project manipulation\r\n * functions. If expanded, it renders a AccountList.\r\n * \r\n * @see See [ProjectList](#projectlist)\r\n * \r\n */\r\nclass ProjectListEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Init the state\r\n    this.state = {\r\n      project: props.project,\r\n      showProjectForm: false,\r\n      showProjectDeleteDialog: false,\r\n    };\r\n  }\r\n\r\n  /** Handles onChange events of the underlying ExpansionPanel */\r\n  expansionPanelStateChanged = () => {\r\n    this.props.onExpandedStateChange(this.props.project);\r\n  }\r\n\r\n  /** Handles onAccountDelete events from an AccountListEntry  */\r\n  deleteAccountHandler = (deletedAccount) => {\r\n    // console.log(deletedAccount.getID());\r\n    this.setState({\r\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\r\n    })\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, expandedState } = this.props;\r\n    // Use the states project\r\n    const { project, showProjectForm, showProjectDeleteDialog } = this.state;\r\n\r\n    // console.log(this.state);\r\n    return (\r\n \r\n      <div>\r\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\r\n          <AccordionSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            id={`project${project.getID()}accountpanel-header`}\r\n          >\r\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='body1' className={classes.heading}>{project.getName()}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs />\r\n              <Grid item>\r\n                <Typography variant='body2' color={'textSecondary'}>List of Participations</Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </AccordionSummary>\r\n          <AccordionDetails>\r\n            <ParticipationList show={expandedState} project={project} /> \r\n          </AccordionDetails>\r\n        </Accordion>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  }\r\n});\r\n\r\n/** PropTypes */\r\nProjectListEntry.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjectBO to be rendered */\r\n  project: PropTypes.object.isRequired,\r\n  /** The state of this ProjectListEntry. If true the project is shown with its accounts */\r\n  expandedState: PropTypes.bool.isRequired,\r\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjectListEntry \r\n   * \r\n   * Signature: onExpandedStateChange(ProjectBO project)\r\n   */\r\n  onExpandedStateChange: PropTypes.func.isRequired,\r\n  /** \r\n   *  Event Handler function which is called after a sucessfull delete of this project.\r\n   * \r\n   * Signature: onProjectDelete(ProjectBO project)\r\n   */\r\n  onProjectDeleted: PropTypes.func.isRequired\r\n}\r\n\r\nexport default withStyles(styles)(ProjectListEntry);\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ParticipationForm.js",["165","166"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { AppApi} from '../../AppApi';\r\nimport ParticipationBO from '../../AppApi/ParticipationBO';\r\n// import AppAPI  from '../../AppApi/AppApi';\r\nimport StudentBO from '../../AppApi/StudentBO';\r\nimport ContextErrorMessage from './ContextErrorMessage';\r\nimport LoadingProgress from './LoadingProgress';\r\n\r\n\r\n\r\n/**\r\n * Shows a modal form dialog for a ParticipationBO in prop participation. If the participation is set, the dialog is configured \r\n * as an edit dialog and the text fields of the form are filled from the given ParticipationBO object. \r\n * If the participation is null, the dialog is configured as a new participation dialog and the textfields are empty.\r\n * In dependency of the edit/new state, the respective backend calls are made to update or create a participation. \r\n * After that, the function of the onClose prop is called with the created/update ParticipationBO object as parameter.  \r\n * When the dialog is canceled, onClose is called with null.\r\n * \r\n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\r\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\r\n */\r\nclass ParticipationForm extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let m = '';\r\n    if (props.student) {\r\n      m = props.student.matr_nr;\r\n      \r\n    }\r\n\r\n    // Init the state\r\n    this.state = {\r\n      \r\n      matr_nr: m,\r\n      matr_nrValidationFailed: false,\r\n      matr_nrEdited: false,\r\n      addingInProgress: false,\r\n      updatingInProgress: false,\r\n      addingError: null,\r\n      updatingError: null,\r\n      student: ''\r\n    };\r\n    // save this state for canceling\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  getStudentByMatrikelNummer = (matr_nr) => {\r\n    var api = AppApi.getAPI()\r\n    api.getStudentByMatrikelNummer(matr_nr).then(student =>\r\n      this.setState({\r\n        student: student,\r\n        loadingInProgress: false, // loading indicator \r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch \r\n          student: null,\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      balance: 'loading',\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n\r\n  /** Updates the participation */\r\n  updateParticipation = () => {\r\n    console.log(this.props.participation)\r\n    // clone the original participation, in case the backend call fails\r\n    let updatedParticipation = Object.assign(new ParticipationBO(), this.props.participation);\r\n    \r\n    // set the new attributes from our dialog\r\n    console.log(this.state.student.id)\r\n    updatedParticipation.setStudent(this.state.student.id);\r\n    console.log(updatedParticipation)\r\n    \r\n    AppApi.getAPI().updateParticipation(updatedParticipation).then(participation => {\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator  \r\n        updatingError: null                     // no error message\r\n      });\r\n      // keep the new state as base state\r\n      this.baseState.matr_nr = this.state.matr_nr;\r\n      this.props.onClose(updatedParticipation);      // call the parent with the new participation\r\n    }).catch(e =>\r\n      this.setState({\r\n        updatingInProgress: false,              // disable loading indicator \r\n        updatingError: e                        // show error message\r\n      })\r\n    );\r\n\r\n    // set loading to true\r\n    this.setState({\r\n      updatingInProgress: true,                 // show loading indicator\r\n      updatingError: null                       // disable error message\r\n    });\r\n  }\r\n\r\n  /** Handles value changes of the forms textfields and validates them */\r\n  textFieldValueChange = (event) => {\r\n    const value = event.target.value;\r\n\r\n    this.setState({\r\n      [event.target.id]: event.target.value,\r\n    });\r\n\r\n    if(value.length === 5){\r\n      this.getStudentByMatrikelNummer(event.target.value)\r\n    }\r\n    \r\n  }\r\n\r\n  /** Handles the close / cancel button click event */\r\n  handleClose = () => {\r\n    // Reset the state\r\n    this.setState(this.baseState);\r\n    this.props.onClose(null);\r\n  }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, participation, show } = this.props;\r\n    const { matr_nr, matr_nrValidationFailed, matr_nrEdited, addingInProgress,\r\n      addingError, updatingInProgress, updatingError } = this.state;\r\n\r\n    let title = '';\r\n    let header = '';\r\n\r\n    return (\r\n      show ?\r\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\r\n          <DialogTitle id='form-dialog-title'>{title}\r\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              {header}\r\n            </DialogContentText>\r\n            <form className={classes.root} noValidate autoComplete='off'>\r\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='matr_nr' label='Matrikelnummer:' value={matr_nr} \r\n                onChange={this.textFieldValueChange} error={matr_nrValidationFailed} \r\n                helperText={matr_nrValidationFailed ? 'The matr_nr must contain at least one character' : ' '} />\r\n\r\n            </form>\r\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\r\n            {\r\n              // Show error message in dependency of participation prop\r\n              // project ?\r\n            <ContextErrorMessage error={updatingError} contextErrorMsg={`The participation ${participation.getID()} could not be updated.`} onReload={this.updateParticipation} />\r\n                // :\r\n                // <ContextErrorMessage error={addingError} contextErrorMsg={`The project could not be added.`} onReload={this.addParticipation} />\r\n            }\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleClose} color='secondary'>\r\n              Cancel\r\n            </Button>\r\n            {\r\n              // If a participation is given, show an update button, else an add button\r\n              participation ?\r\n                <Button disabled={matr_nrValidationFailed} variant='contained' onClick={this.updateParticipation} color='primary'>\r\n                  Update\r\n              </Button>\r\n                : <Button disabled={matr_nrValidationFailed || !matr_nrEdited} variant='contained' onClick={this.addProject} color='primary'>\r\n                  Add\r\n             </Button>\r\n            }\r\n          </DialogActions>\r\n        </Dialog>\r\n        : null\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\n/** PropTypes */\r\nParticipationForm.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ParticipationBO to be edited */\r\n  participation: PropTypes.object,\r\n  /** If true, the form is rendered */\r\n  show: PropTypes.bool.isRequired,\r\n  /**  \r\n   * Handler function which is called, when the dialog is closed.\r\n   * Sends the edited or created ParticipationBO as parameter or null, if cancel was pressed.\r\n   *  \r\n   * Signature: onClose(ParticipationBO participation);\r\n   */\r\n  onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default withStyles(styles)(ParticipationForm);\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\index.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ParticipationList.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\dialogs\\ProjectDeleteDialog.js",[],"C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\ParticipationListEntry.js",["167","168","169","170","171","172"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles, withStyles, Button, ListItem, ListItemSecondaryAction, Link, Typography, Input } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { AppApi } from '../../AppApi';\r\nimport ContextErrorMessage from '../dialogs/ContextErrorMessage';\r\nimport LoadingProgress from '../dialogs/LoadingProgress';\r\nimport ParticipationForm from '../dialogs/ParticipationForm';\r\n\r\n/**\r\n * Renders a ParticipationBO object within a ListEntry and provides a delete button to delete it. Links participations \r\n * to a list of transactions. This is done by routing the link to /transactions and passing the ProjectBO and\r\n * the ParticipationBO as props to the ParticipationList component. It also shows a MoneyTransferDialog to transfer money.\r\n * \r\n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\r\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\r\n * @see See Material-UIs [Link](https://material-ui.com/components/links/)\r\n * @see See Material-UIs React Router integration [Composition](https://material-ui.com/guides/composition/#link)\r\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\r\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\r\n * \r\n * @see See [MoneyTransferDialog](#moneytransferdialog)\r\n * @see See [TransactionList](#transactionlist)\r\n * \r\n * \r\n */\r\n\r\nclass ParticipationListEntry extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.textInput = React.createRef();\r\n\r\n    // Init an empty state\r\n    this.state = {\r\n      student: '',\r\n      loadingInProgress: false,\r\n      deletingInProgress: false,\r\n      loadingError: null,\r\n      deletingError: null,\r\n      grade: '',\r\n      showParticipationForm: false,\r\n    }\r\n  }\r\n\r\n  /** gets the students for this participation */\r\n\r\n  getStudent = () => {\r\n    let stud = this.props.participation.student_id\r\n    if (stud !== 0){ //soll nurnach student im backend suchen, wenn participation auch eine student_id hat\r\n      var api = AppApi.getAPI()\r\n      // console.log(this.props.participation)\r\n      api.getStudent(this.props.participation.student_id).then(student => //.student_id funktioniert (.getStudent_id()nicht?!?!?!?)\r\n      this.setState({\r\n        student: student,\r\n        loadingInProgress: false, // loading indicator \r\n        loadingError: null\r\n      })).catch(e =>\r\n        this.setState({ // Reset state with error from catch \r\n          student: null,\r\n          loadingInProgress: false,\r\n          loadingError: e\r\n        })\r\n      );  \r\n\r\n    // set loading to true\r\n    this.setState({\r\n      sut: 'loading',//????????\r\n      loadingInProgress: true,\r\n      loadingError: null\r\n    });\r\n  }\r\n}\r\n\r\n  /** Deletes this participation */\r\n  deleteParticipation = () => {\r\n    const { participation } = this.props;\r\n    var api = AppApi.getAPI()\r\n    api.deleteParticipation(participation.getID()).then(() => {\r\n      this.setState({  // Set new state when ParticipationBOs have been fetched\r\n        deletingInProgress: false, // loading indicator \r\n        deletingError: null\r\n      })\r\n      // console.log(participation);\r\n      this.props.onParticipationDeleted(participation);\r\n    }).catch(e =>\r\n      this.setState({ // Reset state with error from catch \r\n        deletingInProgress: false,\r\n        deletingError: e\r\n      })\r\n    );\r\n    // set loading to true\r\n    this.setState({\r\n      deletingInProgress: true,\r\n      deletingError: null\r\n    });\r\n  }\r\n\r\n  createGrading(grade, participation_id){\r\n    var api = AppApi.getAPI()\r\n    // console.log(api)\r\n    api.gradingStudent(grade, participation_id).then((grade) =>\r\n        {\r\n          // console.log(grade)\r\n        this.setState({\r\n            grade: grade\r\n        })}\r\n        )\r\n      }\r\n  \r\ngetGrading = () => {\r\n  let grade = this.props.participation.grading_id\r\n  // console.log(grade)\r\n  if (grade !== 0){ //soll nurnach student im backend suchen, wenn participation auch eine student_id hat\r\n    var api = AppApi.getAPI()\r\n    // console.log(this.props.participation)\r\n    api.getGrading(this.props.participation.grading_id).then(grade => \r\n    this.setState({\r\n      grade: grade,\r\n      loadingInProgress: false, // loading indicator \r\n      loadingError: null\r\n    })).catch(e =>\r\n      this.setState({ // Reset state with error from catch \r\n        grade: null,\r\n        loadingInProgress: false,\r\n        loadingError: e\r\n      })\r\n    );  \r\n  // set loading to true\r\n  this.setState({\r\n    sut: 'loading',//????????\r\n    loadingInProgress: true,\r\n    loadingError: null\r\n  });\r\n  }\r\n}\r\n  \r\n    passed(){\r\n      let passed = this.state.grade.passed\r\n      // console.log(passed)\r\n      // if (passed !== undefined){\r\n        if (passed == true){\r\n          return \"Bestanden\"\r\n        }      \r\n        else {\r\n          return \"Nicht Bestanden\"\r\n        }\r\n      // }\r\n    }\r\n\r\n   /** Handles the onClick event of the edit participation button */\r\n   editParticipationButtonClicked = (event) => {\r\n    event.stopPropagation();\r\n    this.setState({\r\n      showParticipationForm: true\r\n    });\r\n  }\r\n\r\n  /** Handles the onClose event of the ParticipationForm */\r\n  participationFormClosed = (participation) => {\r\n    // participation is not null and therefor changed\r\n    if (participation) {\r\n      this.setState({\r\n        participation: participation,\r\n        showParticipationForm: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        showParticipationForm: false\r\n      });\r\n    }\r\n  }\r\n\r\n  /** Handles click events from the transfer money button */\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.setState({ grade:\r\n      this.textInput.current.value})\r\n      // console.log(this.textInput.current.value)\r\n      this.createGrading(this.textInput.current.value, this.props.participation.getID())\r\n      this.getGrading()\r\n    }\r\n     \r\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\r\n  componentDidMount() {\r\n    // load initial balance\r\n    // debugger;\r\n    this.getGrading();\r\n    // console.log(\"nach aufruf von Grading\")\r\n    this.getStudent();\r\n      \r\n    }\r\n  \r\n  /** Lifecycle method, which is called when the component was updated */\r\n  componentDidUpdate(prevProps) {\r\n    if ((this.props.show) && (this.props.show !== prevProps.show)) {\r\n      this.getStudent();\r\n      this.getGrading();\r\n      }\r\n    }\r\n\r\n  /** Renders the component */\r\n  render() {\r\n    const { classes, project, participation } = this.props;\r\n    const { loadingInProgress, deletingInProgress, loadingError, deletingError, showParticipationForm, student, grade } = this.state;\r\n    \r\n\r\n    return (\r\n      <div>\r\n        <ListItem>\r\n          <Typography className={classes.participationEntry}>\r\n            {/* <Link component={RouterLink} to={{\r\n              pathname: '/StudentZuordnung',\r\n              owner: {\r\n                project: project,\r\n                participation: participation\r\n              }\r\n            }} >\r\n              Teilnehmer {participation.id + \" - \" + student.matr_nr + \" - \" + student.name}\r\n            </Link> */}\r\n       \r\n            <div>\r\n\r\n            {student.matr_nr + \" - \" + student.name}\r\n            </div>\r\n           \r\n\r\n            <Button color='primary' onClick={this.editParticipationButtonClicked}>\r\n              edit\r\n            </Button>\r\n\r\n          </Typography>\r\n            <div>\r\n            {/* <form className={classes.root} noValidate autoComplete=\"off\"> */}\r\n            <form >\r\n              {/* <Input type=\"text\" placeholder=\"Note\" ref ={this.textInput} inputProps={{ 'aria-label': 'description' }} className= \"form-control\" /> */}\r\n              <input placeholder= \"Note\" type=\"text\" ref={this.textInput} className= \"form-control\"/>\r\n              <Button className={classes.buttonMargin} variant='outlined' color='primary' size='small' endIcon={<SendIcon/>} onClick={this.handleSubmit}>\r\n              Bewerten\r\n              </Button>\r\n              {/* <input type=\"checkbox\" checked={participation.graded} onChange={handleGraded}/> */}\r\n            </form>\r\n            <div>\r\n\r\n            Bewertet: {grade.grade + \" - \" + this.passed()}\r\n            </div>\r\n            </div>\r\n\r\n          <ListItemSecondaryAction>          \r\n            <Button color='secondary' size='small' endIcon={<DeleteIcon/>} onClick={this.deleteParticipation}>\r\n             Löschen\r\n            </Button>\r\n          </ListItemSecondaryAction>\r\n\r\n        </ListItem>\r\n        <ListItem>\r\n          <LoadingProgress show={loadingInProgress || deletingInProgress} />\r\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The student of participation ${participation.getID()} could not be loaded.`} onReload={this.getStudent}/>\r\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The student of participation ${participation.getID()} could not be loaded.`} onReload={this.getGrading}/>\r\n          <ContextErrorMessage error={deletingError} contextErrorMsg={`The participation ${participation.getID()} could not be deleted.`} onReload={this.deleteParticipation}/>\r\n        </ListItem>\r\n        <ParticipationForm show={showParticipationForm} participation={participation} student={student} onClose={this.participationFormClosed}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/** Component specific styles */\r\nconst styles = theme => ({\r\n  root: {\r\n    width: '100%'\r\n  }, \r\n  buttonMargin: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  participationEntry: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  }\r\n});\r\n\r\n//TEXTFIELD PLACEHOLDER STYLES --> noch bearbeiten\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n    }));\r\n\r\n/** PropTypes */\r\nParticipationListEntry.propTypes = {\r\n  /** @ignore */\r\n  classes: PropTypes.object.isRequired,\r\n  /** The ProjectBO of this ParticipationListEntry */\r\n  project: PropTypes.object.isRequired,\r\n  /** The ParticipationBO to be rendered */\r\n  participation: PropTypes.object.isRequired,\r\n  /**  \r\n   * Event Handler function which is called after a sucessfull delete of this participation. \r\n   * \r\n   * Signature: onParticipationDeleted(ParticipationBO participation); \r\n   */\r\n  onParticipationDeleted: PropTypes.func.isRequired,\r\n  /** If true, balance is (re)loaded */\r\n  show: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\n//TEXTFIELD\r\n\r\nexport default withStyles(styles, useStyles)(ParticipationListEntry);\r\n","C:\\Users\\robin\\OneDrive\\Desktop\\Software-Praktikum\\Project\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\StudentView.js",[],{"ruleId":"173","severity":1,"message":"174","line":3,"column":52,"nodeType":"175","messageId":"176","endLine":3,"endColumn":62},{"ruleId":"173","severity":1,"message":"177","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":14},{"ruleId":"173","severity":1,"message":"178","line":12,"column":8,"nodeType":"175","messageId":"176","endLine":12,"endColumn":16},{"ruleId":"173","severity":1,"message":"179","line":156,"column":16,"nodeType":"175","messageId":"176","endLine":156,"endColumn":20},{"ruleId":"173","severity":1,"message":"177","line":2,"column":8,"nodeType":"175","messageId":"176","endLine":2,"endColumn":14},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"173","severity":1,"message":"184","line":1,"column":17,"nodeType":"175","messageId":"176","endLine":1,"endColumn":26},{"ruleId":"185","severity":1,"message":"186","line":12,"column":5,"nodeType":"187","messageId":"188","endLine":14,"endColumn":6},{"ruleId":"185","severity":1,"message":"186","line":12,"column":5,"nodeType":"187","messageId":"188","endLine":14,"endColumn":2},{"ruleId":"173","severity":1,"message":"189","line":18,"column":12,"nodeType":"175","messageId":"176","endLine":18,"endColumn":18},{"ruleId":"173","severity":1,"message":"190","line":6,"column":27,"nodeType":"175","messageId":"176","endLine":6,"endColumn":33},{"ruleId":"185","severity":1,"message":"186","line":11,"column":5,"nodeType":"187","messageId":"188","endLine":13,"endColumn":6},{"ruleId":"173","severity":1,"message":"177","line":6,"column":8,"nodeType":"175","messageId":"176","endLine":6,"endColumn":14},{"ruleId":"185","severity":1,"message":"186","line":11,"column":5,"nodeType":"187","messageId":"188","endLine":13,"endColumn":6},{"ruleId":"173","severity":1,"message":"191","line":3,"column":22,"nodeType":"175","messageId":"176","endLine":3,"endColumn":28},{"ruleId":"173","severity":1,"message":"192","line":4,"column":8,"nodeType":"175","messageId":"176","endLine":4,"endColumn":15},{"ruleId":"173","severity":1,"message":"193","line":10,"column":8,"nodeType":"175","messageId":"176","endLine":10,"endColumn":19},{"ruleId":"173","severity":1,"message":"194","line":166,"column":91,"nodeType":"175","messageId":"176","endLine":166,"endColumn":106},{"ruleId":"173","severity":1,"message":"195","line":1,"column":17,"nodeType":"175","messageId":"176","endLine":1,"endColumn":26},{"ruleId":"173","severity":1,"message":"196","line":8,"column":8,"nodeType":"175","messageId":"176","endLine":8,"endColumn":16},{"ruleId":"173","severity":1,"message":"197","line":15,"column":8,"nodeType":"175","messageId":"176","endLine":15,"endColumn":13},{"ruleId":"173","severity":1,"message":"198","line":18,"column":9,"nodeType":"175","messageId":"176","endLine":18,"endColumn":13},{"ruleId":"173","severity":1,"message":"199","line":39,"column":16,"nodeType":"175","messageId":"176","endLine":39,"endColumn":23},{"ruleId":"173","severity":1,"message":"200","line":50,"column":10,"nodeType":"175","messageId":"176","endLine":50,"endColumn":14},{"ruleId":"173","severity":1,"message":"201","line":50,"column":16,"nodeType":"175","messageId":"176","endLine":50,"endColumn":23},{"ruleId":"173","severity":1,"message":"190","line":8,"column":27,"nodeType":"175","messageId":"176","endLine":8,"endColumn":33},{"ruleId":"173","severity":1,"message":"202","line":8,"column":35,"nodeType":"175","messageId":"176","endLine":8,"endColumn":40},{"ruleId":"173","severity":1,"message":"203","line":8,"column":42,"nodeType":"175","messageId":"176","endLine":8,"endColumn":50},{"ruleId":"173","severity":1,"message":"204","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":19},{"ruleId":"173","severity":1,"message":"205","line":10,"column":8,"nodeType":"175","messageId":"176","endLine":10,"endColumn":23},{"ruleId":"173","severity":1,"message":"178","line":11,"column":8,"nodeType":"175","messageId":"176","endLine":11,"endColumn":16},{"ruleId":"173","severity":1,"message":"206","line":12,"column":10,"nodeType":"175","messageId":"176","endLine":12,"endColumn":16},{"ruleId":"173","severity":1,"message":"207","line":1,"column":8,"nodeType":"175","messageId":"176","endLine":1,"endColumn":22},{"ruleId":"208","severity":1,"message":"209","line":62,"column":21,"nodeType":"210","messageId":"211","endLine":62,"endColumn":23},{"ruleId":"173","severity":1,"message":"191","line":4,"column":10,"nodeType":"175","messageId":"176","endLine":4,"endColumn":16},{"ruleId":"173","severity":1,"message":"212","line":4,"column":18,"nodeType":"175","messageId":"176","endLine":4,"endColumn":29},{"ruleId":"173","severity":1,"message":"193","line":6,"column":8,"nodeType":"175","messageId":"176","endLine":6,"endColumn":19},{"ruleId":"173","severity":1,"message":"213","line":7,"column":8,"nodeType":"175","messageId":"176","endLine":7,"endColumn":27},{"ruleId":"173","severity":1,"message":"194","line":95,"column":22,"nodeType":"175","messageId":"176","endLine":95,"endColumn":37},{"ruleId":"173","severity":1,"message":"214","line":95,"column":39,"nodeType":"175","messageId":"176","endLine":95,"endColumn":62},{"ruleId":"173","severity":1,"message":"215","line":8,"column":8,"nodeType":"175","messageId":"176","endLine":8,"endColumn":17},{"ruleId":"173","severity":1,"message":"216","line":142,"column":7,"nodeType":"175","messageId":"176","endLine":142,"endColumn":18},{"ruleId":"173","severity":1,"message":"198","line":7,"column":76,"nodeType":"175","messageId":"176","endLine":7,"endColumn":80},{"ruleId":"173","severity":1,"message":"197","line":7,"column":94,"nodeType":"175","messageId":"176","endLine":7,"endColumn":99},{"ruleId":"173","severity":1,"message":"217","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":12},{"ruleId":"173","severity":1,"message":"218","line":11,"column":18,"nodeType":"175","messageId":"176","endLine":11,"endColumn":28},{"ruleId":"208","severity":1,"message":"209","line":236,"column":20,"nodeType":"210","messageId":"211","endLine":236,"endColumn":22},{"ruleId":"173","severity":1,"message":"219","line":262,"column":22,"nodeType":"175","messageId":"176","endLine":262,"endColumn":29},"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'RoleBO' is defined but never used.","'UserView' is defined but never used.","'name' is assigned a value but never used.","no-native-reassign",["220"],"no-negated-in-lhs",["221"],"'Component' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'person' is assigned a value but never used.","'Router' is defined but never used.","'Button' is defined but never used.","'AddIcon' is defined but never used.","'ProjectForm' is defined but never used.","'showProjectForm' is assigned a value but never used.","'useEffect' is defined but never used.","'Checkbox' is defined but never used.","'Input' is defined but never used.","'Link' is defined but never used.","'setRaum' is assigned a value but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'ProjectList' is defined but never used.","'ProjektFormular' is defined but never used.","'AppApi' is defined but never used.","'BusinessObject' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ButtonGroup' is defined but never used.","'ProjectDeleteDialog' is defined but never used.","'showProjectDeleteDialog' is assigned a value but never used.","'StudentBO' is defined but never used.","'addingError' is assigned a value but never used.","'Icon' is defined but never used.","'RouterLink' is defined but never used.","'project' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]