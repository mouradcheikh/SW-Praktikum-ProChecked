[{"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/index.js":"1","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/App.js":"2","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Theme.js":"3","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/PersonBO.js":"4","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/RoleBO.js":"5","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/AppApi.js":"6","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/DozentView.js":"7","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/StudentenView.js":"8","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/UserView.js":"9","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/SignIn.js":"10","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/PersonLoggedIn.js":"11","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ProjektErstellen.js":"12","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/AdminView.js":"13","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ProjectList.js":"14","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/dialogs/LoadingProgress.js":"15","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/layout/Header.js":"16","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/dialogs/ContextErrorMessage.js":"17","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/BusinessObject.js":"18","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/StudentBO.js":"19","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/ProjectBO.js":"20","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/ParticipationBO.js":"21","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/dialogs/ProjectForm.js":"22","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ProjectListEntry.js":"23","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/index.js":"24","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ParticipationList.js":"25","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/dialogs/ProjectDeleteDialog.js":"26","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ParticipationListEntry.js":"27","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/GradingBO.js":"28"},{"size":145,"mtime":1607186861494,"results":"29","hashOfConfig":"30"},{"size":12107,"mtime":1608137344577,"results":"31","hashOfConfig":"30"},{"size":1706,"mtime":1607019235661,"results":"32","hashOfConfig":"30"},{"size":1552,"mtime":1607722411370,"results":"33","hashOfConfig":"30"},{"size":425,"mtime":1607439661704,"results":"34","hashOfConfig":"30"},{"size":9925,"mtime":1608298568159,"results":"35","hashOfConfig":"30"},{"size":4137,"mtime":1608297610561,"results":"36","hashOfConfig":"30"},{"size":168,"mtime":1607200123684,"results":"37","hashOfConfig":"30"},{"size":2554,"mtime":1607691802598,"results":"38","hashOfConfig":"30"},{"size":1499,"mtime":1607200627839,"results":"39","hashOfConfig":"30"},{"size":2964,"mtime":1608137344591,"results":"40","hashOfConfig":"30"},{"size":7990,"mtime":1608297610563,"results":"41","hashOfConfig":"30"},{"size":441,"mtime":1608035797027,"results":"42","hashOfConfig":"30"},{"size":7538,"mtime":1608297697352,"results":"43","hashOfConfig":"30"},{"size":895,"mtime":1607019235659,"results":"44","hashOfConfig":"30"},{"size":1286,"mtime":1608231347823,"results":"45","hashOfConfig":"30"},{"size":2135,"mtime":1607019235658,"results":"46","hashOfConfig":"30"},{"size":1110,"mtime":1607691366511,"results":"47","hashOfConfig":"30"},{"size":1270,"mtime":1608137344586,"results":"48","hashOfConfig":"30"},{"size":2152,"mtime":1608035797023,"results":"49","hashOfConfig":"30"},{"size":1634,"mtime":1608137364872,"results":"50","hashOfConfig":"30"},{"size":7709,"mtime":1608035797026,"results":"51","hashOfConfig":"30"},{"size":5389,"mtime":1608137364931,"results":"52","hashOfConfig":"30"},{"size":284,"mtime":1607722411371,"results":"53","hashOfConfig":"30"},{"size":5539,"mtime":1608297610562,"results":"54","hashOfConfig":"30"},{"size":4162,"mtime":1607773835122,"results":"55","hashOfConfig":"30"},{"size":8418,"mtime":1608299092310,"results":"56","hashOfConfig":"30"},{"size":1611,"mtime":1608295847056,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1if63b6",{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/index.js",[],["128","129"],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/App.js",["130","131","132","133","134","135"],"import React from 'react';\n\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { Container, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nimport PersonBO from './AppApi/PersonBO'\nimport RoleBO from './AppApi/RoleBO'\nimport AppAPI from './AppApi/AppApi'\nimport SignIn from './Components/pages/SignIn'; //importiere von Pages das SignIn\nimport UserView from './Components/pages/UserView';\nimport Header from './Components/layout/Header';\nimport LoadingProgress from './Components/dialogs/LoadingProgress';\nimport ContextErrorMessage from './Components/dialogs/ContextErrorMessage';\nimport Theme from './Theme';\n// import PersonList from './Components/PersonList';\nimport StudentenView from './Components/pages/StudentenView';\nimport DozentView from './Components/pages/DozentView';\nimport AdminView from './Components/pages/AdminView';\nimport PersonLoggedIn from './Components/pages/PersonLoggedIn';\nimport ProjektFormular from './Components/pages/ProjektErstellen'\nimport ProjectList from './Components/pages/ProjectList';\n\n// import firebaseconfig from './firebaseconfig';\n\nclass App extends React.Component {\n\n    #firebaseConfig = {\n    \n        apiKey: \"AIzaSyAXRfVbXnTLoSxa_YJxTTaRckt803yV4I4\",\n        authDomain: \"prochecked-team09.firebaseapp.com\",\n        databaseURL: \"https://prochecked-team09.firebaseio.com\",\n        projectId: \"prochecked-team09\",\n        storageBucket: \"prochecked-team09.appspot.com\",\n        messagingSenderId: \"791050707787\",\n        appId: \"1:791050707787:web:f923c14b57ae697fde3ece\"\n    };\n\n    //Constrcutor welcher Firebase initialisiert \n    constructor (props) {\n        super(props)\n    \n\n    //Dann wird ein leeres state initalisiert \n\t    this.state = {\n            person: null,\n            appError: null,\n            authError: null,\n            authLoading: false\n        };\n    }\n\n    static getDerivedStateFromError(error) { //Hier wird der Status aktualisiert, \n\t\treturn { appError: error };          // dass beim nächsten Rendern die Fallback UI angezeigt wird \n    }\n    \n    handleAuthStateChange = person => { // Firebase Benutzer logt sich ein, der state wechselt den Zustand \n\t\tif (person) {\n            // console.log(\"handleauthstate\")\n\t\t\tthis.setState({\n\t\t\t\tauthLoading: true\n            });\n            \n            //die Person ist eingeloggt\n            person.getIdToken().then(token => {\n                document.cookie = `token=${token};path=/`; //pfad evtl. erweitern?\n            \n            //setzt den Nutzer auf Not bevor der Token angekommen ist \n                this.setState({\n\t\t\t\t\tperson: person,\n\t\t\t\t\tauthError: null,\n\t\t\t\t\tauthLoading: false\n                });\n                //Person aus Datenbank auslesen; wird durch SecurityDecorater reingeschrieben, falls noch nicht vorhanden\n                \n                this.getPersonByGoogleId(person.uid)\n                this.ProfList()\n              \n                //this.createPerson(person.displayName, person.email, person.uid)\n                \n\n\n            }).catch(error =>{\n                this.setState({\n                    authError:error,\n                    authLoading: false \n                });\n            });\n        \n        } else {\n            document.cookie = 'token=;path=/'; //Person hat sich ausgeloggt, dann clear token\n            //setze die ausgeloggte Person auf null\n            this.setState ({\n                person: null,\n                authLoading: false \n            });\n        }\n    }\n\n    handleSignIn = () => {\n\t\tthis.setState({\n\t\t\tauthLoading: true\n\t\t});\n\t\tconst provider = new firebase.auth.GoogleAuthProvider(); //Erstelle Instanz des Google-Provider-Objekts\n\t\tfirebase.auth().signInWithRedirect(provider); // Umleiten auf die signInWithRedirect ruft signInWithRedirect auf \n    }\n\n\n\n    getPersons(){\n        var api = AppAPI.getAPI()\n        console.log(api)\n        api.getPersons().then((person) =>\n            {console.log(person)\n            this.setState({\n                person: person\n            })}\n            )\n    }\n\n    createPerson(name, email, google_id){\n        var api = AppAPI.getAPI()\n        // console.log(api)\n        api.createPerson(name, email, google_id).then((person) =>\n            {console.log(person)\n            console.log(\"test\")\n            this.setState({\n                person: person\n            })}\n            )\n        }\n\n    getPersonByGoogleId = (google_id) => {\n        var api = AppAPI.getAPI()\n        // console.log(api)\n        api.getPersonByGoogleId(google_id).then((person) =>\n            {\n            this.setState({\n                person: person\n            })\n            })\n    }\n\n    setRole = (aRole) => {\n        const person = this.state.person\n        const {name, email, google_id, id, creation_date, last_updated} = person\n        var updatedPerson = new PersonBO(name, email, google_id, aRole)\n        updatedPerson.setID(id)\n        updatedPerson.setCreationDate(creation_date)\n        updatedPerson.setLastUpdated(last_updated)\n        var api = AppAPI.getAPI()\n        api.updatePerson(updatedPerson).then((newPerson) => { //bei put (updatePerson) kommt was zurück? kommt überhaupt person zurück?\n                        this.setState({\n                            person: newPerson\n                        })\n                    })\n                }\n\n    getBerechtigung = () => {\n        const person = this.state.person\n        const {name, berechtigung} = person\n        return (berechtigung)\n    }\n    \n    // checkIfPersonInDatabase(name, email, googleId) {\n    //     console.log(\"checkifuserindatabase\")\n    //     var api = AppAPI.getAPI()\n    //     console.log(api)\n\n    //     var suggestion = new PersonBO(name, email, googleId)\n    //                 console.log(suggestion)\n                    \n    //         api.getPersonByGoogleId(googleId).then((person) => {\n    //             console.log(person)\n    //             if (!person.getGoogleId()) {\n    //                 var suggestion = new PersonBO(name, email, googleId)\n    //                 console.log(suggestion)\n    //                 api.createPerson(suggestion).then((newPerson) => {\n    //                 this.setState({\n    //                     person: newPerson})\n    //                 }\n    //                 )\n    //             }\n            \n\n    //             else {\n    //                 this.setState({\n    //                     person: person\n    //                 })\n    //             }\n    //         }\n    //     )\n    // }\n\n    \n\n    // createPersonInDatabase(name, email, googleId) {\n    //     console.log(\"createPersonInDatabase\")\n    //     var api = AppAPI.getAPI()\n    //     console.log(api)\n\n    //     var suggestion = new PersonBO(name, email, googleId)\n    //             console.log(suggestion)\n    //             var suggestion = new PersonBO(name, email, googleId)\n    //             console.log(suggestion)\n    //             api.createPerson(suggestion).then((newPerson) => {\n    //             this.setState({\n    //                 person: newPerson})\n    //                 }  \n    //             )\n    // }\n\n    // setRoleOfPerson(person, role){\n    //     var api = AppAPI.getAPI()\n    //         updatedPerson = person.setBerechtigung(role)\n    //         api.update(updatedPerson).then((newPerson) => {\n    //             this.setState({\n    //                 person: newPerson\n    //             })\n    //         })\n    // }\n    \n\n            \n    ProfList(){\n        var api = AppAPI.getAPI()\n        api.getPersonByRole(2).then((persons) =>\n        {console.log(persons)\n        })\n      }\n        \n    \n    componentDidMount() {\n        firebase.initializeApp(this.#firebaseConfig);\n        firebase.auth().languageCode = 'en';\n        firebase.auth().onAuthStateChanged(this.handleAuthStateChange);\n        console.log(\"rendered\")\n        \n        };\n    \n\n    \t/** Renders the whole app */\n\trender() {\n        const { person, appError, authError, authLoading } = this.state;\n        \n        // let page\n        // let berechtigung = person.getBerechtigung()\n        // if (berechtigung === 1){\n        //     page = <> \n        //             <Redirect from='/' to='StudentenView' />\n        //             <Route exact path='/StudentenView'>\n        //             <StudentenView/>\n        //             </Route>\n        //             </>\n        // }\n        // else if (berechtigung === 2){\n        //     page = <>\t\n        //             <Redirect from='/' to='DozentView' />\n        //             <Route exact path='/DozentView'>\n        //             <DozentView/>\n        //             </Route> \n        //             </>\n        // }\n        // else if (berechtigung === 3){\n        //     page = <>\t\n        //             <Redirect from='/' to='AdminView' />\n        //             <Route exact path='/AdminView'>\n        //             <AdminView/>\n        //             </Route>\n        //            </>\n        // }\n        // else {\n        //     page = <>\n        //             <Redirect from='/' to='UserView' />\n        //             <Route exact path='/UserView'>\n        //             <UserView setRole={this.setRole}/>\n        //             </Route>\n        //             </>;\n        // }\n\n\t\treturn (\n\t\t\t<ThemeProvider theme={Theme}>\n\t\t\t\t<CssBaseline />\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t\t<Container maxWidth='md'>\n\t\t\t\t\t\t<Header/>\n                        <Route exact path = '/CreateProject' component = {ProjektFormular}/>\n                        <Route exact path = '/ProjectList' component = {ProjectList}/>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Ist eine Person eingeloggt?\n                           person ?\n                                <PersonLoggedIn berechtigung = {this.state.person.berechtigung} person = {this.state.person} setRole = {this.setRole}></PersonLoggedIn>\n\n                                \n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t// sonst zeige die SignIn Seite \n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Redirect to='/SignIn' />\n\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t<LoadingProgress show={authLoading} />\n\t\t\t\t\t\t<ContextErrorMessage error={authError} contextErrorMsg={`Während der Anmeldung ist etwas falsch gelaufen.`} onReload={this.handleSignIn} />\n\t\t\t\t\t\t<ContextErrorMessage error={appError} contextErrorMsg={`Innerhalb des Programms gab es einen Fehler. Bitte die Seite erneut laden.`} />\n\t\t\t\t\t</Container>\n\t\t\t\t</Router>\n\t\t\t</ThemeProvider>\n        );\n    }\n}\n\n\nexport default App;\n\n// person ={this.state.person} setRoleOfPerson = {this.setRoleOfPerson} kommt in Zeile 150\n\n\n\n// UserAbfrage(person) {\n//     const userType = person.getBerechtigung();\n//     console.log(\"UseerAbfrage\")\n//     return (\n\n//     <div>\n//             {(() => {\n\n//             if (userType === 1) {\n//                 console.log(\"StudentenAbfrage\")\n//             return (\n//                 <>\t<Redirect from='/' to='StudentenView' />\n//                     <Route exact path='/StudentenView'>\n//                     <StudentenView/>\n//                     </Route>\n//                 </>\n//             )\n//             } else if (userType === 2) {\n//             return (\n//                 <>\t<Redirect from='/' to='DozentView' />\n//                     <Route exact path='/DozentView'>\n//                     <DozentView/>\n//                     </Route>\n//                 </>\n//             )\n//             } else if (userType === 3) {\n//                 return (\n//                 <>\t<Redirect from='/' to='AdminView' />\n//                     <Route exact path='/AdminView'>\n//                     <AdminView/>\n//                     </Route>\n//                 </>\n//                 )\n//             } else {\n//                 return (\n//                 <>\n//                     <Redirect from='/' to='UserView' />\n//                     <Route exact path='/UserView'>\n//                         <UserView setRole={this.setRole}/>\n//                     </Route>\n//                 </>\n//             )\n//             }\n//         })()}\n//     <div/>\n// );\n// }\n","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Theme.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/PersonBO.js",["136"],"import BusinessObject from './BusinessObject';\nimport RoleBO from './RoleBO'\n\n/**\n * Represents a person of the system\n */\nexport default class PersonBO extends BusinessObject {\n\n  /**\n   * Constructs a PersonBO object with a given name, email, google id and role\n   * \n   * @param {String} aname - the name of this PersonBO.\n   */\n  constructor(aname, aemail, agoogleid, aberechtigung) {\n    super();\n    this.name = aname\n    this.email = aemail\n    this.google_id = agoogleid\n    this.berechtigung = aberechtigung\n  }\n\n  /**\n   * Sets a new name\n   * \n   * @param {String} aname - the new name of this PersonBO.\n   */\n  setName(aname) {\n    this.name = aname\n  }\n\n  /**\n   * Gets the name.\n   */\n  getName() {\n    return this.name\n  }\n\n  setEmail(aemail){\n    this.email = aemail\n  }\n\n  getEmail(){\n    return this.email\n  }\n\n  setGoogleId(agoogleid){\n    this.google_id = agoogleid\n  }\n\n  getGoogleId(){\n    return this.google_id\n  }\n\n  setBerechtigung(aberechtigung){\n    this.berechtigung = aberechtigung\n  }\n\n  getBerechtigung(){\n    return this.berechtigung\n  }\n\n  /** \n   * Returns an Array of PersonBOs from a given JSON structure.\n   */\n  static fromJSON(persons) {\n    let result = [];\n\n    if (Array.isArray(persons)) {\n      persons.forEach((p) => {\n        Object.setPrototypeOf(p, PersonBO.prototype);\n        result.push(p);\n      })\n    } else {\n      // Es handelt sich offenbar um ein singuläres Objekt\n      let p = persons;\n      Object.setPrototypeOf(p, PersonBO.prototype);\n      result.push(p);\n    }\n\n    return result;\n  }\n}","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/RoleBO.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/AppApi.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/DozentView.js",["137","138","139","140","141","142","143"],"import Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n// import { Link as RouterLink } from 'react-router-dom'\n//import './App.css';\nimport React, { Component } from 'react';\n// import RoleBO from '../../AppApi/RoleBO'\nimport {Link} from 'react-router-dom';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport ProjectList from './ProjectList';\nimport ProjektFormular from './ProjektErstellen'\nimport UserView from './UserView'\n\n\n\n\n\n// function DozentenView(props) {\nclass DozentenView extends Component{\n  constructor(props){\n    super(props);\n  }\n\n\n\n  render() {\n    const { classes } = this.props;\n\n    return(<div>\n      <center>\n        <div>\n            <h1>Wählen Sie einen der folgenden Optionen aus:</h1>\n            <Link to = '/CreateProject'>\n            <Button\n                size=\"large\"\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.button}\n                // onClick = {this.handleProjektErstellen}\n            >\n                        Projekt erstellen\n                \n            </Button>\n            </Link>\n        </div>\n            \n            <div>            \n\n            <Link to={{\n            pathname: '/ProjectList',\n            state: { linkState: this.props.person }\n            }}>\n           <Button\n                size=\"large\"\n                variant=\"contained\"\n                color=\"primary\"\n                algin=\"center\"\n                className={classes.button}\n                // person={classes.person}\n                \n                // person={this.props.person}\n                // onClick = {this.viewTest2()}\n                > \n                    Bewertung und Teilnehmerpflege\n            </Button>\n            </Link>\n            \n            \n            </div>\n    </center>\n  </div>\n); \n\n}\n}\n\n\n\n\n\n  // const { classes } = props;\n\n//   if (this.state.redirect === \"projekterstellen\"){\n//       return(\n//             <> \n//             <Route path='/CreateProject' render={ProjektFormular}>\n//             </Route>\n//             </> \n//       )\n//   }\n//   else if (this.state.redirect === \"bewertung\"){\n//       return(\n//         <> \n//             <Redirect from='/' to='ProjectList'/>\n//             <Route exact path='/ProjectList'>\n//             <ProjectList person = {this.props.person}/>\n//             </Route>\n//             </>\n//       )\n//   }\n// }\n\n\t// return(\n  //       <div>\n  //         <center>\n  //           <div>\n  //               <h1>Wählen Sie einen der folgenden Optionen aus:</h1>\n  //               <Link to = '/CreateProject'>\n  //               <Button\n  //                   size=\"large\"\n  //                   variant=\"contained\"\n  //                   color=\"primary\"\n  //                   className={classes.button}\n  //                   // onClick = {this.handleProjektErstellen}\n  //               >\n  //                           Projekt erstellen\n                    \n  //               </Button>\n  //               </Link>\n  //           </div>\n                \n  //               <div>\n\n\n  //               <Link to = '/ProjectList'>\n  //               <Button\n  //                   size=\"large\"\n  //                   variant=\"contained\"\n  //                   color=\"primary\"\n  //                   algin=\"center\"\n  //                   className={classes.button}\n  //                   // person={classes.person}\n                    \n  //                   // person={this.props.person}\n  //                   // onClick = {this.handleBewertung}\n  //                   onClick = {props.viewTest2()}\n  //               >\n  //                           Bewertung und Teilnehmerpflege\n  //               </Button>\n  //               </Link>\n  //               </div>\n  //       </center>\n  //     </div>\n  //   );\n  // }\n\n\nconst styles = (theme) => ({\n  button: {\n    margin: theme.spacing(2),\n    width: 285,\n    fontSize: 25,\n    padding: \"15x 0\"\n  },\n})\n\n  export default withStyles(styles)(DozentenView);\n\n","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/StudentenView.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/UserView.js",["144","145"],"import Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n// import { Link as RouterLink } from 'react-router-dom'\n// import './App.css';\nimport React, { Component } from 'react';\nimport RoleBO from '../../AppApi/RoleBO'\nimport {Link} from 'react-router-dom';\n\nclass UserView extends Component {\n\n    constructor(props) {\n      super(props);\n    }\n\n    handleAdminButtonClicked = () => {\n      this.props.setRole(3);\n      this.viewRole()\n    }\n\n    handleStudentButtonClicked = () => {\n      this.props.setRole(1);\n      this.viewRole()\n    }\n\n    handleDozentButtonClicked = () => {\n      this.props.setRole(2);\n      this.viewRole()\n    }\n\n    viewRole= function() {\n      console.log(\"clicked\")\n    };\n\nrender () {\n  const { classes } = this.props;\n\n\treturn(\n        <div>\n          <center>\n                <h1>Bitte wählen Sie Ihre Rolle:</h1>\n                <div>\n                <Link to='/StudentView'>\n                <Button\n                    size=\"large\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    onClick = {this.handleStudentButtonClicked}\n                >\n                            Student\n                    \n                </Button>\n                </Link>\n                </div>\n                <div>\n                <Link to='/DozentView'>\n                <Button\n                    size=\"large\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    algin=\"center\"\n                    className={classes.button}\n                    onClick = {this.handleDozentButtonClicked}\n                    \n                >\n                            Dozent\n                    \n                </Button>\n                </Link>\n                </div>\n                <div>\n                <Link to='/AdminView'>\n                <Button\n                    size=\"large\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={classes.button}\n                    onClick = {this.handleAdminButtonClicked}\n                    \n                 >\n                            Admin\n                  \n                </Button>\n                </Link>\n                </div>\n        </center>\n      </div>\n    );\n  }\n}\n\nconst styles = (theme) => ({\n  button: {\n    margin: theme.spacing(2),\n    width: 170,\n    fontSize: 25,\n    padding: \"15x 0\"\n  },\n})\n\n  export default  withStyles(styles)(UserView);","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/SignIn.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/PersonLoggedIn.js",["146","147"],"import React, { Component } from 'react';\nimport StudentenView from './StudentenView'\nimport AdminView from './AdminView'\nimport DozentView from './DozentView'\nimport UserView from './UserView'\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\n\n\n\nclass PersonLoggedIn extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() \n    { \n        let page\n        let berechtigung = this.props.berechtigung\n        if (berechtigung === 1){\n            page = <> \n                    <Redirect from='/' to='StudentenView' />\n                    <Route exact path='/StudentenView'>\n                    <StudentenView/>\n                    </Route>\n                    </>\n        }\n        else if (berechtigung === 2){\n            page = <>\t\n                    <Redirect from='/' to='DozentView' />\n                    <Route exact path='/DozentView'>\n                    <DozentView person={this.props.person}></DozentView>\n                    </Route> \n                    </>\n        }\n        else if (berechtigung === 3){\n            page = <>\t\n                    <Redirect from='/' to='AdminView' />\n                    <Route exact path='/AdminView'>\n                    <AdminView/>\n                    </Route>\n                   </>\n        }\n        else {\n            page = <>\n                    <Redirect from='/' to='UserView' />\n                    <Route exact path='/UserView'>\n                    <UserView setRole={this.props.setRole}/>\n                    </Route>\n                    </>;\n        }\n        return(\n            <div>\n                {page}\n            </div>\n            \n            )\n         ;\n    }\n}\n \nexport default PersonLoggedIn; \n\n\n// let page\n        // let berechtigung = person.getBerechtigung()\n        // if (berechtigung === 1){\n        //     page = <> \n        //             <Redirect from='/' to='StudentenView' />\n        //             <Route exact path='/StudentenView'>\n        //             <StudentenView/>\n        //             </Route>\n        //             </>\n        // }\n        // else if (berechtigung === 2){\n        //     page = <>\t\n        //             <Redirect from='/' to='DozentView' />\n        //             <Route exact path='/DozentView'>\n        //             <DozentView/>\n        //             </Route> \n        //             </>\n        // }\n        // else if (berechtigung === 3){\n        //     page = <>\t\n        //             <Redirect from='/' to='AdminView' />\n        //             <Route exact path='/AdminView'>\n        //             <AdminView/>\n        //             </Route>\n        //            </>\n        // }\n        // else {\n        //     page = <>\n        //             <Redirect from='/' to='UserView' />\n        //             <Route exact path='/UserView'>\n        //             <UserView setRole={this.setRole}/>\n        //             </Route>\n        //             </>;\n        // }","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ProjektErstellen.js",["148","149","150","151"],"import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport Checkbox from '@material-ui/core/Checkbox';\n// import FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { Button } from '@material-ui/core';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Input from '@material-ui/core/Input';\nimport { AppApi } from '../../AppApi';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    width: \"50%\",\n  },\n  text: {\n    margin: theme.spacing(0),\n    width: \"100%\",\n  }\n}));\n\nfunction ProjektFormular(props) {\n  const classes = useStyles();\n  const [ProjektArt, setProjektArt] = React.useState('');\n  const [Professor, setProfesor] = React.useState('');\n  const [Titel, setProjektTitel] = React.useState('');\n  const [Kapazität,setKapazität] = React.useState('');\n  const [Inhalt, setInhalt] = React.useState('');\n  const [Raum, setRaum] = React.useState('');\n  const [WT, setWT] = React.useState('Ja');\n  const [BTvorVZ, setBTvorVZ] = React.useState('0');\n  const [BTinPZ, setBTinPZ] = React.useState('0');\n  const [BTinVZ, setBTinVZ] = React.useState('0');\n  const [BesondererRaum, setBesondererRaum] = React.useState('');\n  const [Professors, setProfessors] = React.useState('');\n  \n  const [open, setOpen] = React.useState(false);\n\n  const handleProjektArt = (event) => {\n    setProjektArt(event.target.value);\n  };\n\n  const handleProfessor = (event) => {\n    setProfesor(event.target.value);\n  }\n\n  const handleWT = (event) => {\n    setWT(event.target.value);\n  };\n\n\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    console.log(\n      'ProjektArt:', ProjektArt, \n      'Titel:', Titel,\n      'Kapazität:', Kapazität,\n      'Inhalt:', Inhalt,\n      'Raum:', Raum,\n      'Wöchentlich:', WT,\n      'Blocktage vor Beginn der VZ:', BTvorVZ,\n      'Blocktage in der PZ:', BTinPZ,\n      'BT in der VZ:', BTinVZ,\n      'Besonderer Raum:', BesondererRaum\n      \n      );\n  }\n\nfunction ProfList(){\n  var api = AppApi.getAPI()\n  api.getPersonByRole(2).then((persons) =>\n  {console.log(persons)\n  setProfessors(persons)})\n}\n\nuseEffect(() => {\n  ProfList()\n  })\n\n\n  // ProfList = () => {\n  //   const profs = props.ProfList\n\n  // }\n\n  return (\n    <React.Fragment>\n      <form onSubmit={handleSubmit}>\n      <div>\n        <h1>Geben Sie die Daten für das neue Projekt an:</h1>\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"artProjekt\">Art des Projekts</InputLabel>\n            <Select\n              labelId=\"artProjekt\"\n              id=\"ProjektArt\"\n              value={ProjektArt}\n              onChange={handleProjektArt}\n              \n            >\n              <MenuItem value={1}>Fachspezifisches Projekt</MenuItem>\n              <MenuItem value={2}>Interdisziplinäres Projekt</MenuItem>\n              <MenuItem value={3}>Transdisziplinäres Projekt</MenuItem>\n\n              </Select>\n        </FormControl>\n      </div>\n          <div><TextField className={classes.formControl}\n            id=\"titelProjekt\" \n            label=\"Titel des Projekts\" \n            variant=\"outlined\"\n            value={Titel}\n            onInput={e=>setProjektTitel(e.target.value)}\n            />\n            \n          </div>\n          <div><TextField className={classes.formControl}\n            id=\"maxTeilnehmer\"\n            label=\"Kapazität (Max. Teilnehmerzahl)\"\n            type=\"number\" \n            variant=\"outlined\" \n            value={Kapazität}\n            onInput={e=>setKapazität(e.target.value)}\n            />\n            \n          </div>\n          <FormControl className={classes.formControl}>\n            <InputLabel id=\"artProjekt\">weitere Betreuende(r) ProfessorInnen</InputLabel>\n              <Select\n                labelId=\"artProjekt\"\n                id=\"ProjektArt\"\n                value={Professor}\n                onChange={handleProfessor} \n              >\n              {\n              Professors.map(Professor => <MenuItem value = {Professor.id}> {Professor.name} </MenuItem>)\n              }\n              </Select>\n            </FormControl>\n                <div><TextField className={classes.formControl}\n                    id=\"Inhalt\"\n                    label=\"Inhalt(Kurzbeschreibung):\"\n                    multiline\n                    rows={6} \n                    variant=\"outlined\" \n                    value={Inhalt}\n                    onInput={e=>setInhalt(e.target.value)}\n                    />\n                </div>\n                <div><TextField className={classes.formControl}\n                    id=\"Raum\"\n                    label=\"Raum-/Ressourcenplanung\" \n                    variant=\"outlined\" \n                    value={Raum}\n                    onInput={e=>setRaum(e.target.value)}\n                    />\n               </div>\n              <div>\n              <FormControl component=\"fieldset\" className={classes.formControl}>\n                  <FormLabel component=\"legend\">Wöchentliche Termine</FormLabel>\n                  <RadioGroup aria-label=\"WT\" name=\"WT\" value={WT} onChange={handleWT}>\n                    <FormControlLabel value=\"true\" control={<Radio />} label=\"Ja\" />\n                    <FormControlLabel value=\"false\" control={<Radio />} label=\"Nein\" />\n                  </RadioGroup>\n              </FormControl>\n              </div>\n              <div><TextField className={classes.formControl}\n                    id=\"BT vor der VZ\"\n                    label=\"Blocktage vor Beginn der Vorlesungszeit \"\n                    variant=\"outlined\" \n                    type=\"number\"\n                    value={BTvorVZ}\n                    onInput={e=>setBTvorVZ(e.target.value)}\n                    />\n               </div>\n              <div><TextField className={classes.formControl}\n                    id=\"BT in der PZ\"\n                    label=\"Blocktage in der Prüfungszeit (nur inter-/tans. Projekte)\"\n                    variant=\"outlined\"\n                    type=\"number\" \n                    value={BTinPZ}\n                    onInput={e=>setBTinPZ(e.target.value)}\n                    />\n              </div>    \n              <div>\n                    <TextField className={classes.formControl}\n                    id=\"BTSamstag\"\n                    label=\"Blocktage (Samstag) in der Vorlesungszeit\"\n                    variant=\"outlined\"\n                    type=\"number\" \n                    value={BTinVZ}\n                    onInput={e=>setBTinVZ(e.target.value)}\n                    />\n               </div>\n               <div><TextField className={classes.formControl}\n                    id=\"BesondererRaum\"\n                    label=\"Besonderer Raum notwendig\"\n                    variant=\"outlined\" \n                    value={BesondererRaum}\n                    onInput={e=>setBesondererRaum(e.target.value)}\n                    />\n               </div>\n            <div>\n                <Button\n                 type=\"submit\"\n                 variant=\"contained\"\n                 color=\"primary\" \n                >\n                  Speichern\n                </Button>\n            </div>\n          </form>\n      </React.Fragment>\n  );\n}\n\nexport default ProjektFormular;\n","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/AdminView.js",["152","153"],"import React, { Component } from 'react';\n// function AdminView(){\n//     return( \n//         <div>\n//             <h1> AdminView </h1>\n//         </div>\n//     );\n// }\n// export default AdminView;\n\nclass AdminView extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() { \n        return ( \n        <div>\n            <h1> AdminView </h1>\n        </div>\n         );\n    }\n}\n \nexport default AdminView; \n\n\n","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ProjectList.js",["154","155","156","157"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { withRouter } from 'react-router-dom';\nimport  {AppApi}  from '../../AppApi';\nimport ContextErrorMessage from '../dialogs/ContextErrorMessage';\nimport LoadingProgress from '../dialogs/LoadingProgress';\nimport ProjectForm from '../dialogs/ProjectForm';\nimport ProjectListEntry from './ProjectListEntry';\n\n/**\n * Controlls a list of ProjectListEntrys to create a accordion for each project.\n *\n * @see See [ProjectListEntry](#projectlistentry)\n *\n */\nclass ProjectList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // console.log(props);\n    let expandedID = null;\n\n    if (this.props.location.expandProject) {\n      expandedID = this.props.location.expandProject.getID();\n    }\n\n    // Init an empty state\n    this.state = {\n      projects: [],\n      filteredProjects: [],\n      projectFilter: '',\n      error: null,\n      loadingInProgress: false,\n      expandedProjectID: expandedID,\n      showProjectForm: false //evtl.nicht \n    };\n  }\n\n  /** Fetches all ProjectBOs from the backend */\n  getProjectsByDozent = (person_id) => {\n  // console.log(\"vor fetch\")\n    var api = AppApi.getAPI()\n    api.getProjectsByDozent(person_id) //evtl. Objekt von API vorher anlegen\n      .then(projectBOs =>\n        this.setState({               // Set new state when ProjectBOs have been fetched\n          projects: projectBOs,\n          filteredProjects: [...projectBOs], // store a copy\n          loadingInProgress: false,   // disable loading indicator\n          error: null\n        })).catch(e =>\n          this.setState({             // Reset state with error from catch\n            projects: [],\n            loadingInProgress: false, // disable loading indicator\n            error: e\n          })\n        );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // console.log(\"gerendert\")\n    let person = this.props.location.state.linkState\n    this.getProjectsByDozent(person.getID());\n   \n   \n  }\n\n  /**\n   * Handles onExpandedStateChange events from the ProjectListEntry component. Toggels the expanded state of\n   * the ProjectListEntry of the given ProjectBO.\n   *\n   * @param {project} ProjectBO of the ProjectListEntry to be toggeled\n   */\n  onExpandedStateChange = project => {\n    // console.log(projectID);\n    // Set expandend project entry to null by default\n    let newID = null;\n\n    // If same project entry is clicked, collapse it else expand a new one\n    if (project.getID() !== this.state.expandedProjectID) {\n      // Expand the project entry with projectID\n      newID = project.getID();\n    }\n    // console.log(newID);\n    this.setState({\n      expandedProjectID: newID,\n    });\n  }\n\n  // /**\n  //  * Handles onProjectDeleted events from the ProjectListEntry component\n  //  *\n  //  * @param {project} ProjectBO of the ProjectListEntry to be deleted\n  //  */\n  // projectDeleted = project => {\n  //   const newProjectList = this.state.projects.filter(projectFromState => projectFromState.getID() !== project.getID());\n  //   this.setState({\n  //     projects: newProjectList,\n  //     filteredProjects: [...newProjectList],\n  //     showProjectForm: false\n  //   });\n  // }\n\n  // /** Handles the onClick event of the add project button */\n  // addProjectButtonClicked = event => {\n  //   // Do not toggle the expanded state\n  //   event.stopPropagation();\n  //   //Show the CustmerForm\n  //   this.setState({\n  //     showProjectForm: true\n  //   });\n  // }\n\n  // /** Handles the onClose event of the ProjectForm */\n  // projectFormClosed = project => {\n  //   // project is not null and therefore created\n  //   if (project) {\n  //     const newProjectList = [...this.state.projects, project];\n  //     this.setState({\n  //       projects: newProjectList,\n  //       filteredProjects: [...newProjectList],\n  //       showProjectForm: false\n  //     });\n  //   } else {\n  //     this.setState({\n  //       showProjectForm: false\n  //     });\n  //   }\n  // }\n\n  /** Handels onChange events of the project filter text field */\n  filterFieldValueChange = event => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n      filteredProjects: this.state.projects.filter(project => {\n        let nameContainsValue = project.getName().toLowerCase().includes(value);\n\n        return nameContainsValue\n      }),\n      projectFilter: value\n    });\n  }\n\n  /** Handles the onClose event of the clear filter button */\n  clearFilterFieldButtonClicked = () => {\n    // Reset the filter\n    this.setState({\n      filteredProjects: [...this.state.projects],\n      projectFilter: ''\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const { filteredProjects, projectFilter, expandedProjectID, loadingInProgress, error, showProjectForm } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Grid className={classes.projectFilter} container spacing={1} justify='flex-start' alignItems='center'>\n          <Grid item>\n            <Typography>\n              Projektfilter:\n              </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              autoFocus\n              fullWidth\n              id='projectFilter'\n              type='text'\n              value={projectFilter}\n              onChange={this.filterFieldValueChange}\n              InputProps={{\n                endAdornment: <InputAdornment position='end'>\n                  <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                    <ClearIcon />\n                  </IconButton>\n                </InputAdornment>,\n              }}\n            />\n          </Grid>\n          {/* <Grid item xs />\n          <Grid item>\n            <Button variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addProjectButtonClicked}>\n              Add Project\n          </Button>\n          </Grid> */}\n        </Grid>\n        {\n          // Show the list of ProjectListEntry components\n          // Do not use strict comparison, since expandedProjectID maybe a string if given from the URL parameters\n          filteredProjects.map(project =>\n            <ProjectListEntry key={project.getID()} project={project} expandedState={expandedProjectID === project.getID()}\n              onExpandedStateChange={this.onExpandedStateChange}\n              onProjectDeleted={this.projectDeleted}\n            />)\n        }\n        <LoadingProgress show={loadingInProgress} />\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of projects could not be loaded.`} onReload={this.getProjectsByDozent} />\n        {/* <ProjectForm show={showProjectForm} onClose={this.projectFormClosed} /> */}\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  projectFilter: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nProjectList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(ProjectList));","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/dialogs/LoadingProgress.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/layout/Header.js",["158","159"],"import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\n\n\nclass Header extends React.Component {\n    constructor (props) {\n        super (props)\n}\n\nrender () {\n\n    const {person,classes} = this.props;\n\n    return (\n        <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" className={classes.menuButton}  aria-label=\"menu\">\n            <AssignmentIcon fontSize= \"large\"/>\n          </IconButton>\n          <Typography variant=\"h5\" className={classes.title}>\n              <div>ProChecked - Hochschule der Medien</div>\n          </Typography>\n          <Button color=\"inherit\"></Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}}\n\nconst styles = (theme) => ({\n    root: {\n      flexGrow: 1,\n      width: \"100%\"\n    },\n    menuButton: {\n      marginRight: theme.spacing(28),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n\nexport default withStyles(styles)(Header);\n","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/dialogs/ContextErrorMessage.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/BusinessObject.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/StudentBO.js",["160"],"import BusinessObject from './BusinessObject';\nimport PersonBO from './PersonBO';\n\n/**\n * Represents a Role of the system\n */\nexport default class StudentBO extends BusinessObject {\n\n  /**\n   * Constructs a RoleBO object with a given name\n   * \n   * @param {String} aname - the name of this RoleBO.\n   */\n  constructor(aname, astudiengang, amatr_nr) {\n    super();\n    this.name = aname\n    this.studiengang = astudiengang;\n    this.matr_nr = amatr_nr;\n  }\n\n  setName(aname) {\n    this.name = aname\n  }\n\n  getName() {\n    return this.name\n  }\n\n  setStudiengang(astudiengang){\n      this.studiengang = astudiengang\n  }\n\n  getStudiengang(){\n      return this.studiengang\n  }\n\n  setMatrNr(amatr_nr){\n      this.matr_nr = amatr_nr\n  }\n\n  getMatrNr(){\n      return this.matr_nr\n  }\n\n    /** \n   * Returns an Array of ParticipationBOs from a given JSON structure.\n   */\n  static fromJSON(student) {\n    let result = [];\n\n    if (Array.isArray(student)) {\n      student.forEach((p) => {\n        Object.setPrototypeOf(p, StudentBO.prototype);\n        result.push(p);\n      })\n    } else {\n      // Es handelt sich offenbar um ein singuläres Objekt\n      let p = student;\n      Object.setPrototypeOf(p, StudentBO.prototype);\n      result.push(p);\n    }\n\n    return result;\n  }\n}","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/ProjectBO.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/ParticipationBO.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/dialogs/ProjectForm.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ProjectListEntry.js",["161","162","163","164","165","166"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Accordion, AccordionSummary, AccordionDetails, Grid } from '@material-ui/core';\nimport { Button, ButtonGroup } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ProjectForm from '../../Components/dialogs/ProjectForm';\nimport ProjectDeleteDialog from '../../Components/dialogs/ProjectDeleteDialog';\nimport ParticipationList from './ParticipationList';\n\n\n//import AccountList from './AccountList';\n\n\n/**\n * Renders a ProjectBO object within a expandable/collapsible ProjectListEntry with the project manipulation\n * functions. If expanded, it renders a AccountList.\n * \n * @see See [ProjectList](#projectlist)\n * \n */\nclass ProjectListEntry extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      project: props.project,\n      showProjectForm: false,\n      showProjectDeleteDialog: false,\n    };\n  }\n\n  /** Handles onChange events of the underlying ExpansionPanel */\n  expansionPanelStateChanged = () => {\n    this.props.onExpandedStateChange(this.props.project);\n  }\n\n  /** Handles onAccountDelete events from an AccountListEntry  */\n  deleteAccountHandler = (deletedAccount) => {\n    // console.log(deletedAccount.getID());\n    this.setState({\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\n    })\n  }\n\n  // /** Handles the onClick event of the edit project button */\n  // editProjectButtonClicked = (event) => {\n  //   event.stopPropagation();\n  //   this.setState({\n  //     showProjectForm: true\n  //   });\n  // }\n\n  // /** Handles the onClose event of the ProjectForm */\n  // projectFormClosed = (project) => {\n  //   // project is not null and therefor changed\n  //   if (project) {\n  //     this.setState({\n  //       project: project,\n  //       showProjectForm: false\n  //     });\n  //   } else {\n  //     this.setState({\n  //       showProjectForm: false\n  //     });\n  //   }\n  // }\n\n  // /** Handles the onClick event of the delete project button */\n  // deleteProjectButtonClicked = (event) => {\n  //   event.stopPropagation();\n  //   this.setState({\n  //     showProjectDeleteDialog: true\n  //   });\n  // }\n\n  // /** Handles the onClose event of the ProjectDeleteDialog */\n  // deleteProjectDialogClosed = (project) => {\n  //   // if project is not null, delete it\n  //   if (project) {\n  //     this.props.onProjectDeleted(project);\n  //   };\n\n  //   // Don´t show the dialog\n  //   this.setState({\n  //     showProjectDeleteDialog: false\n  //   });\n  // }\n\n  /** Renders the component */\n  render() {\n    const { classes, expandedState } = this.props;\n    // Use the states project\n    const { project, showProjectForm, showProjectDeleteDialog } = this.state;\n\n    // console.log(this.state);\n    return (\n \n      <div>\n        <Accordion defaultExpanded={false} expanded={expandedState} onChange={this.expansionPanelStateChanged}>\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon />}\n            id={`project${project.getID()}accountpanel-header`}\n          >\n            <Grid container spacing={1} justify='flex-start' alignItems='center'>\n              <Grid item>\n                <Typography variant='body1' className={classes.heading}>{project.getName()}\n                </Typography>\n              </Grid>\n              {/* <Grid item>\n                <ButtonGroup variant='text' size='small'>\n                  <Button color='primary' onClick={this.editProjectButtonClicked}>\n                    edit\n                  </Button>\n                  <Button color='secondary' onClick={this.deleteProjectButtonClicked}>\n                    delete\n                  </Button>\n                </ButtonGroup>\n              </Grid> */}\n              <Grid item xs />\n              <Grid item>\n                <Typography variant='body2' color={'textSecondary'}>List of Participations</Typography>\n              </Grid>\n            </Grid>\n          </AccordionSummary>\n          <AccordionDetails>\n            <ParticipationList show={expandedState} project={project} /> \n          </AccordionDetails>\n        </Accordion>\n        {/* <ProjectForm show={showProjectForm} project={project} onClose={this.projectFormClosed} />\n        <ProjectDeleteDialog show={showProjectDeleteDialog} project={project} onClose={this.deleteProjectDialogClosed} /> */}\n      </div>\n      \n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  }\n});\n\n/** PropTypes */\nProjectListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The ProjectBO to be rendered */\n  project: PropTypes.object.isRequired,\n  /** The state of this ProjectListEntry. If true the project is shown with its accounts */\n  expandedState: PropTypes.bool.isRequired,\n  /** The handler responsible for handle expanded state changes (exanding/collapsing) of this ProjectListEntry \n   * \n   * Signature: onExpandedStateChange(ProjectBO project)\n   */\n  onExpandedStateChange: PropTypes.func.isRequired,\n  /** \n   *  Event Handler function which is called after a sucessfull delete of this project.\n   * \n   * Signature: onProjectDelete(ProjectBO project)\n   */\n  onProjectDeleted: PropTypes.func.isRequired\n}\n\nexport default withStyles(styles)(ProjectListEntry);\n","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/index.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ParticipationList.js",["167"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, ListItem } from '@material-ui/core';\nimport { Button, List } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { AppApi } from '../../AppApi';\nimport ContextErrorMessage from '../dialogs/ContextErrorMessage';\nimport LoadingProgress from '../dialogs/LoadingProgress';\nimport ParticipationListEntry from './ParticipationListEntry';\n\n/**\n * Renders a list of ParticipationListEntry objects.\n * \n * @see See [ParticipationListEntry](#participationlistentry)\n * \n */\nclass ParticipationList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      participations: [],\n      loadingInProgress: false,\n      loadingParticipationError: null,\n      addingParticipationError: null,\n    };\n  }\n\n  /** Fetches ParticipationBOs for the current customer */\n  getParticipationsByProject = () => {\n    console.log(\"vor fetch\")\n\n      var api = AppApi.getAPI()\n      api.getParticipationsByProject(this.props.project.getID())\n        .then(participationBOs =>\n          this.setState({               // Set new state when ParticipationBOs have been fetched\n            participations: participationBOs,\n            filteredParticipations: [...participationBOs], // store a copy\n            loadingInProgress: false,   // disable loading indicator\n            error: null\n          })).catch(e =>\n            this.setState({             // Reset state with error from catch\n              participations: [],\n              loadingInProgress: false, // disable loading indicator\n              error: e\n            })\n          );\n  \n      // set loading to true\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // console.log(this.props.participation.getStudent_id)\n    this.getParticipationsByProject(); //props richtig ??\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  // componentDidUpdate(prevProps) {\n  //   reload participations if shown state changed. Occures if the ProjectListEntrys ExpansionPanel was expanded\n  //   if ((this.props.show !== prevProps.show)) {\n  //     this.getAccounts();\n  //   }\n  // }\n\n  /** Adds an participation for the current customer */\n//   addAccount = () => {\n//     BankAPI.getAPI().addAccountForCustomer(this.props.customer.getID()).then(accountBO => {\n//       // console.log(participationBO)\n//       this.setState({  // Set new state when AccountBOs have been fetched\n//         accounts: [...this.state.accounts, accountBO],\n//         loadingInProgress: false, // loading indicator \n//         addingParticipationError: null\n//       })\n//     }).catch(e =>\n//       this.setState({ // Reset state with error from catch \n//         accounts: [],\n//         loadingInProgress: false,\n//         addingAccountError: e\n//       })\n//     );\n\n//     // set loading to true\n//     this.setState({\n//       loadingInProgress: true,\n//       addingParticipationError: null\n//     });\n//   }\n\n//   /** Handles onAccountDelete events from an AccountListEntry  */\n//   deleteAccountHandler = (deletedAccount) => {\n//     // console.log(deletedAccount.getID());\n//     this.setState({\n//       participations: this.state.participations.filter(account => account.getID() !== deletedAccount.getID())\n//     })\n//   }\n\n  /** Renders the component */\n  render() {\n    const { classes, project } = this.props;\n    // Use the states project\n    const { participations, loadingInProgress, loadingParticipationError, addingParticipationError } = this.state;\n\n    // console.log(this.props);\n    return (\n      <div className={classes.root}>\n        <List className={classes.participationList}>\n          {\n            participations.map(participation => <ParticipationListEntry key={participation.getID()} project={project} participation={participation} onParticipationDeleted={this.deleteParticipationHandler}\n              show={this.props.show} />)\n          }\n          <ListItem>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={loadingParticipationError} contextErrorMsg={`List of participations for project ${project.getID()} could not be loaded.`} onReload={this.getParticipations} />\n            {/* <ContextErrorMessage error={addingParticipationError} contextErrorMsg={`Participation for project ${participation.getID()} could not be added.`} onReload={this.addParticipation} /> */}\n          </ListItem>\n        </List>\n        <Button className={classes.addParticipationButton} variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addParticipation}>\n          Teilnahme hinzufügen\n        </Button>\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  participationList: {\n    marginBottom: theme.spacing(2),\n  },\n//   addAccountButton: {\n//     position: 'absolute',\n//     right: theme.spacing(3),\n//     bottom: theme.spacing(1),\n//   }\n});\n\n/** PropTypes */\nParticipationList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The ProjectBO of this ParticipationList */\n  project: PropTypes.object.isRequired,\n  /** If true, participations are (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(ParticipationList);\n","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/dialogs/ProjectDeleteDialog.js",[],"/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/Components/pages/ParticipationListEntry.js",["168","169","170","171","172"],"//getParticipationByProject()\n\n//getPersonByParticipation()\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles, withStyles, Button, ListItem, ListItemSecondaryAction, Link, Typography } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SwapHoriz from '@material-ui/icons/SwapHoriz';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport Icon from '@material-ui/core/Icon';\nimport SendIcon from '@material-ui/icons/Send';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { AppApi } from '../../AppApi';\nimport ContextErrorMessage from '../dialogs/ContextErrorMessage';\nimport LoadingProgress from '../dialogs/LoadingProgress';\n// import {ic_compare_arrows} from 'react-icons-kit/md/ic_compare_arrows'\n// import MoneyTransferDialog from './dialogs/MoneyTransferDialog'; Noten Dialog \nimport Input from '@material-ui/core/Input';\n\n\n\n\n/**\n * Renders a ParticipationBO object within a ListEntry and provides a delete button to delete it. Links participations \n * to a list of transactions. This is done by routing the link to /transactions and passing the ProjectBO and\n * the ParticipationBO as props to the ParticipationList component. It also shows a MoneyTransferDialog to transfer money.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * @see See Material-UIs [Link](https://material-ui.com/components/links/)\n * @see See Material-UIs React Router integration [Composition](https://material-ui.com/guides/composition/#link)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @see See [MoneyTransferDialog](#moneytransferdialog)\n * @see See [TransactionList](#transactionlist)\n * \n * \n */\n\nclass ParticipationListEntry extends Component {\n\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n\n    // Init an empty state\n    this.state = {\n      student: '',\n      loadingInProgress: false,\n      deletingInProgress: false,\n      loadingError: null,\n      deletingError: null,\n      grade: '',\n      // showMoneyTransferDialog: false,\n    }\n  }\n\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load initial balance\n    // debugger;\n    this.getStudent();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  componentDidUpdate(prevProps) {\n    if ((this.props.show) && (this.props.show !== prevProps.show)) {\n      this.getStudent();\n    }\n  }\n\n  /** gets the students for this participation */\n\n  \n  getStudent = () => {\n    var api = AppApi.getAPI()\n    api.getStudent(this.props.participation.student_id).then(student => //.student_id funktioniert (.getStudent_id()nicht?!?!?!?)\n      this.setState({\n        student: student,\n        loadingInProgress: false, // loading indicator \n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          student: null,\n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      balance: 'loading',\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Deletes this participation */\n  deleteParticipation = () => {\n    const { participation } = this.props;\n    var api = AppApi.getAPI()\n    api.deleteParticipation(participation.getID()).then(() => {\n      this.setState({  // Set new state when ParticipationBOs have been fetched\n        deletingInProgress: false, // loading indicator \n        deletingError: null\n      })\n      // console.log(participation);\n      this.props.onParticipationDeleted(participation);\n    }).catch(e =>\n      this.setState({ // Reset state with error from catch \n        deletingInProgress: false,\n        deletingError: e\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      deletingInProgress: true,\n      deletingError: null\n    });\n  }\n\n  /** Handles click events from the transfer money button */\n  handleSubmit = e => {\n    e.preventDefault();\n    this.setState({ grade:\n      this.textInput.current.value})\n      console.log(this.textInput.current.value)\n      this.createGrading(this.textInput.current.value, this.props.participation.getID())\n    }\n\n  createGrading(grade, participation_id){\n    var api = AppApi.getAPI()\n    // console.log(api)\n    api.gradingStudent(grade, participation_id).then((grade) =>\n        {console.log(grade)\n        this.setState({\n            grade: grade\n        })}\n        )\n      }\n  \n\n  // /** Handles the onClose event from the transfer money dialog */\n  // moneyTransferDialogClosed = (transaction) => {\n  //   this.setState({\n  //     showMoneyTransferDialog: false\n  //   });\n  //   if (transaction) {\n  //     // Transaction is not null and therefore was performed\n  //     this.getBalance();\n  //   }\n  // }\n\n\n\n  /** Renders the component */\n  render() {\n    const { classes, project, participation } = this.props;\n    const { loadingInProgress, deletingInProgress, loadingError, deletingError, showMoneyTransferDialog, student } = this.state;\n    \n\n    return (\n      <div>\n        <ListItem>\n          <Typography className={classes.participationEntry}>\n            <Link component={RouterLink} to={{\n              pathname: '/transactions',\n              owner: {\n                project: project,\n                participation: participation\n              }\n            }} >\n              Teilnehmer {participation.id + \" - \" + student.matr_nr + \" - \" + student.name}\n            </Link>\n\n          </Typography>\n            <div>\n            {/* <form className={classes.root} noValidate autoComplete=\"off\"> */}\n          \n            <form >\n              <input placeholder= \"Note\" type=\"text\" ref={this.textInput} className= \"form-control\"/>\n              {/* <button>Submit</button> */}\n              <Button className={classes.buttonMargin} variant='outlined' color='primary' size='small' endIcon={<SendIcon/>} onClick={this.handleSubmit}>\n              Bewerten\n              </Button>\n\n            </form>\n            </div>\n\n\n          <ListItemSecondaryAction>\n          \n           \n           \n            <Button color='secondary' size='small' endIcon={<DeleteIcon/>} onClick={this.deleteParticipation}>\n             Löschen\n            </Button>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <ListItem>\n          <LoadingProgress show={loadingInProgress || deletingInProgress} />\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The student of participation ${participation.getID()} could not be loaded.`} onReload={this.getStudent} />\n          <ContextErrorMessage error={deletingError} contextErrorMsg={`The participation ${participation.getID()} could not be deleted.`} onReload={this.deleteParticipation} />\n        </ListItem>\n        {/* <MoneyTransferDialog show={showMoneyTransferDialog} project={project} participation={participation} onClose={this.moneyTransferDialogClosed} /> */}\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  }, \n  buttonMargin: {\n    marginRight: theme.spacing(2),\n  },\n  participationEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  }\n});\n\n//TEXTFIELD PLACEHOLDER STYLES --> noch bearbeiten\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n    }));\n\n/** PropTypes */\nParticipationListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The ProjectBO of this ParticipationListEntry */\n  project: PropTypes.object.isRequired,\n  /** The ParticipationBO to be rendered */\n  participation: PropTypes.object.isRequired,\n  /**  \n   * Event Handler function which is called after a sucessfull delete of this participation. \n   * \n   * Signature: onParticipationDeleted(ParticipationBO participation); \n   */\n  onParticipationDeleted: PropTypes.func.isRequired,\n  /** If true, balance is (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\n\n//TEXTFIELD\n\nexport default withStyles(styles, useStyles)(ParticipationListEntry);\n","/Users/mariusfechter/Documents/HDM/4.Semester/Software_Praktikum/ProChecked/SW-Praktikum-Projected/Prochecked/frontend/src/AppApi/GradingBO.js",[],{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":9,"column":8,"nodeType":"179","messageId":"180","endLine":9,"endColumn":14},{"ruleId":"177","severity":1,"message":"181","line":12,"column":8,"nodeType":"179","messageId":"180","endLine":12,"endColumn":16},{"ruleId":"177","severity":1,"message":"182","line":18,"column":8,"nodeType":"179","messageId":"180","endLine":18,"endColumn":21},{"ruleId":"177","severity":1,"message":"183","line":19,"column":8,"nodeType":"179","messageId":"180","endLine":19,"endColumn":18},{"ruleId":"177","severity":1,"message":"184","line":20,"column":8,"nodeType":"179","messageId":"180","endLine":20,"endColumn":17},{"ruleId":"177","severity":1,"message":"185","line":162,"column":16,"nodeType":"179","messageId":"180","endLine":162,"endColumn":20},{"ruleId":"177","severity":1,"message":"178","line":2,"column":8,"nodeType":"179","messageId":"180","endLine":2,"endColumn":14},{"ruleId":"177","severity":1,"message":"186","line":8,"column":27,"nodeType":"179","messageId":"180","endLine":8,"endColumn":33},{"ruleId":"177","severity":1,"message":"187","line":8,"column":35,"nodeType":"179","messageId":"180","endLine":8,"endColumn":40},{"ruleId":"177","severity":1,"message":"188","line":8,"column":42,"nodeType":"179","messageId":"180","endLine":8,"endColumn":50},{"ruleId":"177","severity":1,"message":"189","line":9,"column":8,"nodeType":"179","messageId":"180","endLine":9,"endColumn":19},{"ruleId":"177","severity":1,"message":"190","line":10,"column":8,"nodeType":"179","messageId":"180","endLine":10,"endColumn":23},{"ruleId":"177","severity":1,"message":"181","line":11,"column":8,"nodeType":"179","messageId":"180","endLine":11,"endColumn":16},{"ruleId":"191","severity":1,"message":"192","line":19,"column":3,"nodeType":"193","messageId":"194","endLine":21,"endColumn":4},{"ruleId":"177","severity":1,"message":"178","line":6,"column":8,"nodeType":"179","messageId":"180","endLine":6,"endColumn":14},{"ruleId":"191","severity":1,"message":"192","line":11,"column":5,"nodeType":"193","messageId":"194","endLine":13,"endColumn":6},{"ruleId":"177","severity":1,"message":"186","line":6,"column":27,"nodeType":"179","messageId":"180","endLine":6,"endColumn":33},{"ruleId":"191","severity":1,"message":"192","line":11,"column":5,"nodeType":"193","messageId":"194","endLine":13,"endColumn":6},{"ruleId":"177","severity":1,"message":"195","line":8,"column":8,"nodeType":"179","messageId":"180","endLine":8,"endColumn":16},{"ruleId":"177","severity":1,"message":"196","line":15,"column":8,"nodeType":"179","messageId":"180","endLine":15,"endColumn":13},{"ruleId":"177","severity":1,"message":"197","line":44,"column":10,"nodeType":"179","messageId":"180","endLine":44,"endColumn":14},{"ruleId":"177","severity":1,"message":"198","line":44,"column":16,"nodeType":"179","messageId":"180","endLine":44,"endColumn":23},{"ruleId":"177","severity":1,"message":"199","line":1,"column":17,"nodeType":"179","messageId":"180","endLine":1,"endColumn":26},{"ruleId":"191","severity":1,"message":"192","line":12,"column":5,"nodeType":"193","messageId":"194","endLine":14,"endColumn":6},{"ruleId":"177","severity":1,"message":"200","line":3,"column":22,"nodeType":"179","messageId":"180","endLine":3,"endColumn":28},{"ruleId":"177","severity":1,"message":"201","line":4,"column":8,"nodeType":"179","messageId":"180","endLine":4,"endColumn":15},{"ruleId":"177","severity":1,"message":"202","line":10,"column":8,"nodeType":"179","messageId":"180","endLine":10,"endColumn":19},{"ruleId":"177","severity":1,"message":"203","line":166,"column":91,"nodeType":"179","messageId":"180","endLine":166,"endColumn":106},{"ruleId":"191","severity":1,"message":"192","line":12,"column":5,"nodeType":"193","messageId":"194","endLine":14,"endColumn":2},{"ruleId":"177","severity":1,"message":"204","line":18,"column":12,"nodeType":"179","messageId":"180","endLine":18,"endColumn":18},{"ruleId":"177","severity":1,"message":"205","line":2,"column":8,"nodeType":"179","messageId":"180","endLine":2,"endColumn":16},{"ruleId":"177","severity":1,"message":"200","line":4,"column":10,"nodeType":"179","messageId":"180","endLine":4,"endColumn":16},{"ruleId":"177","severity":1,"message":"206","line":4,"column":18,"nodeType":"179","messageId":"180","endLine":4,"endColumn":29},{"ruleId":"177","severity":1,"message":"202","line":6,"column":8,"nodeType":"179","messageId":"180","endLine":6,"endColumn":19},{"ruleId":"177","severity":1,"message":"207","line":7,"column":8,"nodeType":"179","messageId":"180","endLine":7,"endColumn":27},{"ruleId":"177","severity":1,"message":"203","line":95,"column":22,"nodeType":"179","messageId":"180","endLine":95,"endColumn":37},{"ruleId":"177","severity":1,"message":"208","line":95,"column":39,"nodeType":"179","messageId":"180","endLine":95,"endColumn":62},{"ruleId":"177","severity":1,"message":"209","line":108,"column":75,"nodeType":"179","messageId":"180","endLine":108,"endColumn":99},{"ruleId":"177","severity":1,"message":"210","line":9,"column":8,"nodeType":"179","messageId":"180","endLine":9,"endColumn":17},{"ruleId":"177","severity":1,"message":"211","line":10,"column":8,"nodeType":"179","messageId":"180","endLine":10,"endColumn":23},{"ruleId":"177","severity":1,"message":"212","line":11,"column":8,"nodeType":"179","messageId":"180","endLine":11,"endColumn":12},{"ruleId":"177","severity":1,"message":"196","line":19,"column":8,"nodeType":"179","messageId":"180","endLine":19,"endColumn":13},{"ruleId":"177","severity":1,"message":"213","line":163,"column":81,"nodeType":"179","messageId":"180","endLine":163,"endColumn":104},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],"no-unused-vars","'RoleBO' is defined but never used.","Identifier","unusedVar","'UserView' is defined but never used.","'StudentenView' is defined but never used.","'DozentView' is defined but never used.","'AdminView' is defined but never used.","'name' is assigned a value but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'ProjectList' is defined but never used.","'ProjektFormular' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Checkbox' is defined but never used.","'Input' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'Component' is defined but never used.","'Button' is defined but never used.","'AddIcon' is defined but never used.","'ProjectForm' is defined but never used.","'showProjectForm' is assigned a value but never used.","'person' is assigned a value but never used.","'PersonBO' is defined but never used.","'ButtonGroup' is defined but never used.","'ProjectDeleteDialog' is defined but never used.","'showProjectDeleteDialog' is assigned a value but never used.","'addingParticipationError' is assigned a value but never used.","'SwapHoriz' is defined but never used.","'CloudUploadIcon' is defined but never used.","'Icon' is defined but never used.","'showMoneyTransferDialog' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]