[{"C:\\Users\\socce\\OneDrive\\Desktop\\Studium\\4. Semester\\SoftwarePraktikum\\Projekt\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\App.js":"1","C:\\Users\\socce\\OneDrive\\Desktop\\Studium\\4. Semester\\SoftwarePraktikum\\Projekt\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\PersonBO.js":"2","C:\\Users\\socce\\OneDrive\\Desktop\\Studium\\4. Semester\\SoftwarePraktikum\\Projekt\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\AppApi.js":"3","C:\\Users\\socce\\OneDrive\\Desktop\\Studium\\4. Semester\\SoftwarePraktikum\\Projekt\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView.js":"4"},{"size":13889,"mtime":1611053040070,"results":"5","hashOfConfig":"6"},{"size":1783,"mtime":1608937896922,"results":"7","hashOfConfig":"6"},{"size":33607,"mtime":1611053450433,"results":"8","hashOfConfig":"6"},{"size":2472,"mtime":1611053305736,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"1l4q2bx",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\socce\\OneDrive\\Desktop\\Studium\\4. Semester\\SoftwarePraktikum\\Projekt\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\App.js",["20"],"import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  useHistory,\r\n} from \"react-router-dom\";\r\nimport { Container, ThemeProvider, CssBaseline } from \"@material-ui/core\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nimport PersonBO from \"./AppApi/PersonBO\";\r\nimport RoleBO from \"./AppApi/RoleBO\";\r\nimport AppAPI from \"./AppApi/AppApi\";\r\nimport SignIn from \"./Components/pages/SignIn\"; //importiere von Pages das SignIn\r\nimport UserView from \"./Components/pages/UserView\";\r\nimport Header from \"./Components/layout/Header\";\r\nimport LoadingProgress from \"./Components/dialogs/LoadingProgress\";\r\nimport ContextErrorMessage from \"./Components/dialogs/ContextErrorMessage\";\r\nimport Theme from \"./Theme\";\r\n// import PersonList from './Components/PersonList';\r\nimport StudentLogin from \"./Components/pages/StudentView/StudentLogin\";\r\n// import StudentView from './Components/pages/StudentView';\r\nimport DozentenView from './Components/pages/DozentView';\r\nimport AdminView from './Components/pages/AdminView';\r\nimport PersonLoggedIn from './Components/pages/PersonLoggedIn';\r\nimport ProjektFormular from './Components/pages/ProjektErstellen'\r\nimport ProjectList from './Components/pages/ProjectList';\r\nimport ProjectListNew from './Components/pages/AdminView/ProjectListNew';\r\nimport CreatePerson from './Components/pages/AdminView/CreatePerson';\r\nimport CreateSemester from './Components/pages/AdminView/CreateSemester';\r\nimport DropDown_Dozent from './Components/pages/AdminView/DropDownDozent';\r\nimport ReleaseProject from './Components/pages/AdminView/ReleaseProject';\r\nimport SelectStudent from './Components/pages/AdminView/SelectStudent';\r\nimport Semesterbericht from './Components/pages/StudentView/Semesterbericht';\r\nimport StudentView from './Components/pages/StudentView/StudentView';\r\nimport ProjectListStudent from './Components/pages/StudentView/ProjectListStudent';\r\nimport { StudentBO } from './AppApi';\r\nimport CreateModule from './Components/pages/AdminView/CreateModule';\r\nimport CreateProjectType from \"./Components/pages/AdminView/CreateProjectType\";\r\n\r\n\r\n// import firebaseconfig from './firebaseconfig';\r\n\r\nclass App extends React.Component {\r\n  #firebaseConfig = {\r\n    apiKey: \"AIzaSyAXRfVbXnTLoSxa_YJxTTaRckt803yV4I4\",\r\n    authDomain: \"prochecked-team09.firebaseapp.com\",\r\n    databaseURL: \"https://prochecked-team09.firebaseio.com\",\r\n    projectId: \"prochecked-team09\",\r\n    storageBucket: \"prochecked-team09.appspot.com\",\r\n    messagingSenderId: \"791050707787\",\r\n    appId: \"1:791050707787:web:f923c14b57ae697fde3ece\",\r\n  };\r\n\r\n  //Constrcutor welcher Firebase initialisiert\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //Dann wird ein leeres state initalisiert\r\n    this.state = {\r\n      person: null,\r\n      student: new StudentBO(),\r\n      appError: null,\r\n      authError: null,\r\n      authLoading: false,\r\n    };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    //Hier wird der Status aktualisiert,\r\n    return { appError: error }; // dass beim nächsten Rendern die Fallback UI angezeigt wird\r\n  }\r\n\r\n  handleAuthStateChange = (person) => {\r\n    // Firebase Benutzer logt sich ein, der state wechselt den Zustand\r\n    if (person) {\r\n      // console.log(\"handleauthstate\")\r\n      this.setState({\r\n        authLoading: true,\r\n      });\r\n\r\n      //die Person ist eingeloggt\r\n      person\r\n        .getIdToken()\r\n        .then((token) => {\r\n          document.cookie = `token=${token};path=/`; //pfad evtl. erweitern?\r\n\r\n          //setzt den Nutzer auf Not bevor der Token angekommen ist\r\n          this.setState({\r\n            person: person,\r\n            authError: null,\r\n            authLoading: false,\r\n          });\r\n          //Person aus Datenbank auslesen; wird durch SecurityDecorater reingeschrieben, falls noch nicht vorhanden\r\n\r\n          this.getPersonByGoogleId(person.uid);\r\n        })\r\n        .catch((error) => {\r\n          this.setState({\r\n            authError: error,\r\n            authLoading: false,\r\n          });\r\n        });\r\n    } else {\r\n      document.cookie = \"token=;path=/\"; //Person hat sich ausgeloggt, dann clear token\r\n      //setze die ausgeloggte Person auf null\r\n      this.setState({\r\n        person: null,\r\n        authLoading: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSignIn = () => {\r\n    this.setState({\r\n      authLoading: true,\r\n    });\r\n    const provider = new firebase.auth.GoogleAuthProvider(); //Erstelle Instanz des Google-Provider-Objekts\r\n    firebase.auth().signInWithRedirect(provider); // Umleiten auf die signInWithRedirect ruft signInWithRedirect auf\r\n  };\r\n\r\n  getPersons() {\r\n    var api = AppAPI.getAPI();\r\n    console.log(api);\r\n    api.getPersons().then((person) => {\r\n      console.log(person);\r\n      this.setState({\r\n        person: person,\r\n      });\r\n    });\r\n  }\r\n\r\n  createPerson(name, email, google_id) {\r\n    var api = AppAPI.getAPI();\r\n    // console.log(api)\r\n    api.createPerson(name, email, google_id).then((person) => {\r\n      console.log(person);\r\n      console.log(\"test\");\r\n      this.setState({\r\n        person: person,\r\n      });\r\n    });\r\n  }\r\n\r\n  getPersonByGoogleId = (google_id) => {\r\n    var api = AppAPI.getAPI();\r\n    // console.log(api)\r\n    api.getPersonByGoogleId(google_id).then((person) => {\r\n      this.setState(\r\n        {\r\n          person: person,\r\n        },\r\n        () => this.getStudentByPersonId(this.state.person.getID())\r\n      );\r\n    });\r\n  };\r\n\r\n  getStudentByPersonId = (person_id) => {\r\n    var api = AppAPI.getAPI();\r\n    api.getStudentByPersonId(person_id).then((student) => {\r\n      this.setState({\r\n        student: student,\r\n      });\r\n      // console.log(this.state.student)\r\n    });\r\n  };\r\n\r\n  setRole = (aRole) => {\r\n    const person = this.state.person;\r\n    const { name, email, google_id, id, creation_date, last_updated } = person;\r\n    var updatedPerson = new PersonBO(name, email, google_id, aRole);\r\n    updatedPerson.setID(id);\r\n    updatedPerson.setCreationDate(creation_date);\r\n    updatedPerson.setLastUpdated(last_updated);\r\n    var api = AppAPI.getAPI();\r\n    api.updatePerson(updatedPerson).then((newPerson) => {\r\n      //bei put (updatePerson) kommt was zurück? kommt überhaupt person zurück?\r\n      this.setState({\r\n        person: newPerson,\r\n      });\r\n    });\r\n  };\r\n\r\n  getBerechtigung = () => {\r\n    const person = this.state.person;\r\n    const { name, berechtigung } = person;\r\n    return berechtigung;\r\n  };\r\n\r\n  // checkIfPersonInDatabase(name, email, googleId) {\r\n  //     console.log(\"checkifuserindatabase\")\r\n  //     var api = AppAPI.getAPI()\r\n  //     console.log(api)\r\n\r\n  //     var suggestion = new PersonBO(name, email, googleId)\r\n  //                 console.log(suggestion)\r\n\r\n  //         api.getPersonByGoogleId(googleId).then((person) => {\r\n  //             console.log(person)\r\n  //             if (!person.getGoogleId()) {\r\n  //                 var suggestion = new PersonBO(name, email, googleId)\r\n  //                 console.log(suggestion)\r\n  //                 api.createPerson(suggestion).then((newPerson) => {\r\n  //                 this.setState({\r\n  //                     person: newPerson})\r\n  //                 }\r\n  //                 )\r\n  //             }\r\n\r\n  //             else {\r\n  //                 this.setState({\r\n  //                     person: person\r\n  //                 })\r\n  //             }\r\n  //         }\r\n  //     )\r\n  // }\r\n\r\n  // createPersonInDatabase(name, email, googleId) {\r\n  //     console.log(\"createPersonInDatabase\")\r\n  //     var api = AppAPI.getAPI()\r\n  //     console.log(api)\r\n\r\n  //     var suggestion = new PersonBO(name, email, googleId)\r\n  //             console.log(suggestion)\r\n  //             var suggestion = new PersonBO(name, email, googleId)\r\n  //             console.log(suggestion)\r\n  //             api.createPerson(suggestion).then((newPerson) => {\r\n  //             this.setState({\r\n  //                 person: newPerson})\r\n  //                 }\r\n  //             )\r\n  // }\r\n\r\n<<<<<<< HEAD\r\n            \r\n    ProfList(){\r\n        var api = AppAPI.getAPI()\r\n        api.getPersonByRole(2).then((persons) =>\r\n        {\r\n            // console.log(persons)\r\n        })\r\n      }\r\n        \r\n    componentDidMount() {\r\n        firebase.initializeApp(this.#firebaseConfig);\r\n        firebase.auth().languageCode = 'en';\r\n        firebase.auth().onAuthStateChanged(this.handleAuthStateChange);\r\n        // console.log(\"rendered\")\r\n        \r\n        };\r\n    \r\n    \t/** Renders the whole app */\r\n\trender() {\r\n        const { person, appError, authError, authLoading } = this.state;\r\n        \r\n\t\treturn (\r\n\t\t\t<ThemeProvider theme={Theme}>\r\n\t\t\t\t<CssBaseline />\r\n\t\t\t\t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t\t\t\t<Container maxWidth='md'>\r\n\t\t\t\t\t\t<Header/>\r\n                        <Route exact path = '/StudentView' component = {StudentView}/>\r\n                        <Route exact path = '/ProjectListStudent' component = {ProjectListStudent}/>\r\n                        \r\n                        <Route exact path = '/Semesterbericht' component = {Semesterbericht}/>\r\n                        <Route exact path = '/StudentLogin' component = {StudentLogin}/>\r\n                        <Route exact path = '/DozentView' component = {DozentenView}/>\r\n                        <Route exact path = '/AdminView' component = {AdminView}/>\r\n                        <Route exact path = '/CreateProject' component = {ProjektFormular}/>\r\n                        <Route exact path = '/CreatePerson' component = {CreatePerson}/>\r\n                        <Route exact path = '/CreateSemester' component = {CreateSemester}/>\r\n                        <Route exact path = '/CreateModule' component = {CreateModule}/>\r\n                        <Route exact path = '/ProjectList' component = {ProjectList}/>\r\n                        <Route exact path = '/ReleaseProject' component = {ReleaseProject}/>\r\n                        <Route exact path = '/SelectStudent' component = {SelectStudent}/>\r\n                        <Route exact path = '/ProjectListNew' component = {ProjectListNew}/>\r\n                        <Route exact path = '/DropDown_Dozent' component = {DropDown_Dozent}/>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Ist eine Person eingeloggt?\r\n                           person ?\r\n                                <PersonLoggedIn berechtigung = {this.state.person.berechtigung} person = {this.state.person} setRole = {this.setRole} student = {this.state.student}></PersonLoggedIn>\r\n=======\r\n  // setRoleOfPerson(person, role){\r\n  //     var api = AppAPI.getAPI()\r\n  //         updatedPerson = person.setBerechtigung(role)\r\n  //         api.update(updatedPerson).then((newPerson) => {\r\n  //             this.setState({\r\n  //                 person: newPerson\r\n  //             })\r\n  //         })\r\n  // }\r\n>>>>>>> mertcan\r\n\r\n  ProfList() {\r\n    var api = AppAPI.getAPI();\r\n    api.getPersonByRole(2).then((persons) => {\r\n      // console.log(persons)\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    firebase.initializeApp(this.#firebaseConfig);\r\n    firebase.auth().languageCode = \"en\";\r\n    firebase.auth().onAuthStateChanged(this.handleAuthStateChange);\r\n    // console.log(\"rendered\")\r\n  }\r\n\r\n  /** Renders the whole app */\r\n  render() {\r\n    const { person, appError, authError, authLoading } = this.state;\r\n\r\n    return (\r\n      <ThemeProvider theme={Theme}>\r\n        <CssBaseline />\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n          <Container maxWidth=\"md\">\r\n            <Header />\r\n            <Route exact path=\"/StudentView\" component={StudentView} />\r\n            <Route exact path=\"/ProjectListStudent\" component={ProjectListStudent}/>\r\n\r\n            <Route exact path=\"/Semesterbericht\" component={Semesterbericht} />\r\n            <Route exact path=\"/StudentLogin\" component={StudentLogin} />\r\n            <Route exact path=\"/DozentView\" component={DozentenView} />\r\n            <Route exact path=\"/AdminView\" component={AdminView} />\r\n            <Route exact path=\"/CreateProject\" component={ProjektFormular} />\r\n            <Route exact path=\"/CreatePerson\" component={CreatePerson} />\r\n            <Route exact path=\"/CreateSemester\" component={CreateSemester} />\r\n            <Route exact path=\"/ProjectList\" component={ProjectList} />\r\n            <Route exact path=\"/ReleaseProject\" component={ReleaseProject} />\r\n            <Route exact path=\"/SelectStudent\" component={SelectStudent} />\r\n            <Route exact path=\"/ProjectListNew\" component={ProjectListNew} />\r\n            <Route exact path=\"/DropDown_Dozent\" component={DropDown_Dozent} />\r\n            <Route exact path=\"/CreateProjectType\"component={CreateProjectType}/>\r\n            <Route exact path = '/CreateModule' component = {CreateModule}/>\r\n\r\n            {\r\n              // Ist eine Person eingeloggt?\r\n              person ? (\r\n                <PersonLoggedIn\r\n                  berechtigung={this.state.person.berechtigung}\r\n                  person={this.state.person}\r\n                  setRole={this.setRole}\r\n                  student={this.state.student}\r\n                ></PersonLoggedIn>\r\n              ) : (\r\n                // sonst zeige die SignIn Seite\r\n                <>\r\n                  <Redirect to=\"/SignIn\" />\r\n                  <SignIn onSignIn={this.handleSignIn} />\r\n                </>\r\n              )\r\n            }\r\n            <LoadingProgress show={authLoading} />\r\n            <ContextErrorMessage\r\n              error={authError}\r\n              contextErrorMsg={`Während der Anmeldung ist etwas falsch gelaufen.`}\r\n              onReload={this.handleSignIn}\r\n            />\r\n            <ContextErrorMessage\r\n              error={appError}\r\n              contextErrorMsg={`Innerhalb des Programms gab es einen Fehler. Bitte die Seite erneut laden.`}\r\n            />\r\n          </Container>\r\n        </Router>\r\n      </ThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\socce\\OneDrive\\Desktop\\Studium\\4. Semester\\SoftwarePraktikum\\Projekt\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\PersonBO.js",["21"],"C:\\Users\\socce\\OneDrive\\Desktop\\Studium\\4. Semester\\SoftwarePraktikum\\Projekt\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\AppApi\\AppApi.js",["22","23","24","25"],"import PersonBO from './PersonBO';\r\nimport StudentBO from './StudentBO';\r\nimport ParticipationBO from './ParticipationBO'\r\nimport ProjectBO from './ProjectBO'\r\nimport GradingBO from './GradingBO'\r\nimport SemesterBO from './SemesterBO'\r\nimport ModuleBO from './ModuleBO'\r\nimport ProjectTypeBO from './ProjectTypeBO'\r\n\r\n/**\r\n * Abstracts the REST interface of the Python backend with convenient access methods.\r\n * The class is implemented as a singleton.\r\n */\r\nexport default class AppAPI {\r\n\r\n    // Singelton instance\r\n    static #api = null;\r\n  \r\n    // Local Python backend\r\n    #AppServerBaseURL ='/app';\r\n    \r\n  // Local http-fake-backend \r\n    // #AppServerBaseURL = '/AppApi/app';\r\n    \r\n    // Person related\r\n    #getPersonsURL = () => `${this.#AppServerBaseURL}/persons`;\r\n    #addPersonURL = () => `${this.#AppServerBaseURL}/persons`;\r\n    #updatePersonAdminURL = () => `${this.#AppServerBaseURL}/persons`; \r\n    #getPersonURL = (google_id) => `${this.#AppServerBaseURL}/persons/${google_id}`;\r\n    #updatePersonURL = (google_id) => `${this.#AppServerBaseURL}/persons/${google_id}`;\r\n    #deletePersonURL = (id) => `${this.#AppServerBaseURL}/persons/${id}`;\r\n    // #searchPersonURL = (name) => `${this.#AppServerBaseURL}/person-by-name/${name}`;\r\n    #getProfsURL = (id) => `${this.#AppServerBaseURL}/person-by-role/${id}`;\r\n\r\n    //Semester releated\r\n    #getSemURL = () => `${this.#AppServerBaseURL}/semesters`;\r\n    #addSemesterURL = () => `${this.#AppServerBaseURL}/semesters`;\r\n    #updateSemesterURL = () => `${this.#AppServerBaseURL}/semesters`;\r\n    #deleteSemesterURL = (id) => `${this.#AppServerBaseURL}/semester/${id}`;\r\n    \r\n     \r\n    // Student related\r\n    #getStudentURL = (id) => `${this.#AppServerBaseURL}/students/${id}`;\r\n    #getStudentByMatrikelNummerURL = (matr_nr) => `${this.#AppServerBaseURL}/student-by-matr/${matr_nr}`; \r\n    #createStudentURL = () => `${this.#AppServerBaseURL}/student`;\r\n    #updateStudentAdminURL = () => `${this.#AppServerBaseURL}/student`; \r\n    #getStudentByPersonIdURL = (id) => `${this.#AppServerBaseURL}/student-by-person-id/${id}`;\r\n    \r\n    // Participation related\r\n    #getParticipationsByProjectURL = (project_id) => `${this.#AppServerBaseURL}/projects/${project_id}/participations`;\r\n    #addParticipationsForProjectURL = (project_id) => `${this.#AppServerBaseURL}/projects/${project_id}/participations`;\r\n    #deleteParticipationURL = (id) => `${this.#AppServerBaseURL}/participation/${id}`;\r\n    #updateParticipationURL = () => `${this.#AppServerBaseURL}/participation`;\r\n    #addParticipationURL = () => `${this.#AppServerBaseURL}/participation`;\r\n    \r\n    // Project related\r\n    #getProjectsByDozentAcceptedURL = (person_id) => `${this.#AppServerBaseURL}/dozents/${person_id}/projects`;\r\n    #getProjectsByDozentInReviewURL = (person_id) => `${this.#AppServerBaseURL}/dozent/${person_id}/project`;\r\n    #getProjectsByDozentReviewedURL = (person_id) => `${this.#AppServerBaseURL}/dozente/${person_id}/projecte`;\r\n    #getProjectsByDozentURL = (person_id) => `${this.#AppServerBaseURL}/dozents/${person_id}/projects`;\r\n    #getProjectsByStudentURL = (person_id) => `${this.#AppServerBaseURL}/students/${person_id}/projects`;\r\n\r\n    // #getProjectsByStateNewURL = (person_id) => `${this.#AppServerBaseURL}/state/${project_state_id}/projects`;\r\n    #getProjectsByStateURL = (project_state) => `${this.#AppServerBaseURL}/projects/${project_state}`;\r\n    #addProjectURL = () => `${this.#AppServerBaseURL}/project`;\r\n    #updateProjectURL = () => `${this.#AppServerBaseURL}/project`;\r\n    #getProjectsByDozentNewURL = (person_id) => `${this.#AppServerBaseURL}/dozentn/${person_id}/projectn`;\r\n    #deleteProjectURL = (id) => `${this.#AppServerBaseURL}/projectd/${id}`; //!!\r\n\r\n    //Grading related \r\n    #addGradingStudentURL = () => `${this.#AppServerBaseURL}/studentsGrading`;\r\n    #updateGradingURL = () => `${this.#AppServerBaseURL}/studentsGrading`;\r\n    #getGradingByParticipationURL = (participation_id) => `${this.#AppServerBaseURL}/participation/${participation_id}/grading`;\r\n    #getGradingURL = (id) => `${this.#AppServerBaseURL}/gradings/${id}`;\r\n    #deleteGradingURL = (id) => `${this.#AppServerBaseURL}/gradings/${id}`;\r\n    #getGradingbyProjectAndMatrURL = (project_id, matr_nr) => `${this.#AppServerBaseURL}/gradings-by-project-and-matr/${project_id}/${matr_nr}`;\r\n   \r\n    \r\n    //Module releated\r\n    #getModuleURL = () => `${this.#AppServerBaseURL}/module`;\r\n    #addModuleURL = () => `${this.#AppServerBaseURL}/module`;\r\n    #deleteModuleURL = (id) => `${this.#AppServerBaseURL}/module/${id}`;   \r\n\r\n    \r\n    //ProjectType related\r\n    #getProjectTypeURL = () => `${this.#AppServerBaseURL}/projectTypes`;\r\n    #addProjectTypeURL = () => `${this.#AppServerBaseURL}/projectTypes`;\r\n    #deleteProjectTypeURL = (id) => `${this.#AppServerBaseURL}/projectType/${id}`\r\n      /** \r\n   * Get the Singelton instance \r\n   * \r\n   * @public\r\n   */\r\n  static getAPI() {\r\n    if (this.#api == null) {\r\n      this.#api = new AppAPI();\r\n    }\r\n    return this.#api;\r\n  }\r\n\r\n  /**\r\n   *  Returns a Promise which resolves to a json object. \r\n   *  The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \r\n   *  fetchAdvanced throws an Error also an server status errors\r\n   */\r\n#fetchAdvanced = (url, init) => fetch(url, init)\r\n    .then(res => {\r\n      // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \r\n      if (!res.ok) {\r\n        throw Error(`${res.status} ${res.statusText}`);\r\n      }\r\n      return res.json();\r\n    }\r\n    )\r\n\r\n//Person related\r\ngetPersons() {\r\n// console.log(\"vorFetch in getPersons\")\r\n      return this.#fetchAdvanced(this.#getPersonsURL()).then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let PersonBOs = PersonBO.fromJSON(responseJSON);\r\n        // console.info(personBOs);\r\n        // console.log(PersonBOs)\r\n        return new Promise(function (resolve) {\r\n          \r\n          resolve(PersonBOs);\r\n        })\r\n      })\r\n    }\r\n\r\n    /**\r\n     * Returns a Promise, which resolves to a PersonBO\r\n     * \r\n     * @param {Number} personID to be retrieved\r\n     * @public\r\n     */\r\n  \r\ngetPerson(id) {\r\n      return this.#fetchAdvanced(this.#getPersonURL(id)).then((responseJSON) => {\r\n        // We always get an array of PersonBOs.fromJSON, but only need one object\r\n        let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n        // console.info(responsePersonBO);\r\n        return new Promise(function (resolve) {\r\n          resolve(responsePersonBO);\r\n        })\r\n      })\r\n    }\r\n\r\ngetPersonByGoogleId(google_id) {\r\n        //console.log(google_id)\r\n        return this.#fetchAdvanced(this.#getPersonURL(google_id)).then((responseJSON) => {\r\n          // console.log(responseJSON)\r\n          \r\n          // We always get an array of PersonBOs.fromJSON, but only need one object\r\n          let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n          // console.info(responsePersonBO);\r\n          return new Promise(function (resolve) {\r\n            resolve(responsePersonBO);\r\n          })\r\n        })\r\n      }\r\n\r\ncreatePerson(name, email, google_id, berechtigung) {\r\n\r\n        let p = new PersonBO();\r\n        p.setName(name)\r\n        p.setEmail(email)\r\n        p.setGoogleId(google_id)\r\n        p.setBerechtigung(berechtigung)\r\n        // console.log(p)\r\n\r\n        return this.#fetchAdvanced(this.#addPersonURL(), {\r\n          method: 'POST',\r\n          headers: {\r\n            'Accept': 'application/json, text/plain',\r\n            'Content-type': 'application/json',\r\n          },\r\n          body: JSON.stringify(p)\r\n          }).then((responseJSON) => {\r\n          // We always get an array of PersonBOs.fromJSON, but only need one object\r\n            let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n          // console.info(participationBOs);\r\n            return new Promise(function (resolve) {\r\n            resolve(responsePersonBO);\r\n          })\r\n        })\r\n      }\r\n    \r\nupdatePerson(personBO){\r\n  // console.log(personBO.getGoogleId())\r\n  \r\n  return this.#fetchAdvanced(this.#updatePersonURL(personBO.getGoogleId()), {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Accept': 'application/json, text/plain',\r\n      'Content-type': 'application/json',\r\n    },\r\n    body: JSON.stringify(personBO)\r\n    }).then((responseJSON) => { \r\n      // console.log(responseJSON)\r\n    // We always get an array of PersonBOs.fromJSON, but only need one object \r\n    // kommt bei put überhaupt ein PersonenBO zurück??????????????\r\n      let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n    // console.info(participationBOs);\r\n      return new Promise(function (resolve) {\r\n      resolve(responsePersonBO);\r\n    })\r\n  })\r\n}\r\n\r\nupdatePersonAdmin(p) {\r\n  // console.log(gradingBO)\r\n    return this.#fetchAdvanced(this.#updatePersonAdminURL(), { \r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(p)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n        let responsePersonBO = PersonBO.fromJSON(responseJSON)[0];\r\n        return new Promise(function (resolve) {\r\n        resolve(responsePersonBO);\r\n      })\r\n    })\r\n  }\r\n\r\ngetPersonByRole(role_id){\r\n  return this.#fetchAdvanced(this.#getProfsURL(role_id)).then((responseJSON) => {\r\n    // We always get an array of PersonBOs.fromJSON, but only need one object\r\n    let responseDozentBOs = PersonBO.fromJSON(responseJSON);\r\n    // console.info(responseDozentBOs);\r\n    return new Promise(function (resolve) {\r\n      resolve(responseDozentBOs);\r\n    })\r\n  })\r\n}\r\n\r\n  /**\r\n   * Deletes the given participation and returns a Promise, which resolves to an ParticipationBO\r\n   * \r\n   * @param id to be deleted\r\n   * @public\r\n   */\r\n  deletePerson(id) {\r\n    return this.#fetchAdvanced(this.#deletePersonURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let personBOs = PersonBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(personBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n\r\n//Student related\r\ngetStudent(id) {\r\n  return this.#fetchAdvanced(this.#getStudentURL(id))\r\n  .then((responseJSON) => {\r\n    // We always get an array of PersonBOs.fromJSON, but only need one object\r\n    let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n    // console.log(responseStudentBO);\r\n    return new Promise(function (resolve) {\r\n      resolve(responseStudentBO);\r\n    })\r\n  })\r\n}\r\n\r\ngetStudentByMatrikelNummer(matr_nr) {\r\n  return this.#fetchAdvanced(this.#getStudentByMatrikelNummerURL(matr_nr)).then((responseJSON) => { //URL LEER LASSEN????\r\n    // We always get an array of StudentBOs.fromJSON, but only need one object\r\n    let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n    console.info(responseStudentBO);\r\n    return new Promise(function (resolve) {\r\n      resolve(responseStudentBO);\r\n    })\r\n  })\r\n}\r\n\r\n//Participation related\r\n\r\n/**\r\n   * Returns a Promise, which resolves to an ParticipationBOs\r\n   * \r\n   */\r\n  createParticipation(participation){\r\n    return this.#fetchAdvanced(this.#addParticipationURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(participation)\r\n      }).then((responseJSON) => {console.log(responseJSON)\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n        let responseParticipationBO = ParticipationBO.fromJSON(responseJSON)[0];\r\n      // console.info(accountBOs);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseParticipationBO);\r\n      })\r\n    })\r\n  }\r\n  \r\n  \r\n\r\n /**\r\n   * Returns a Promise, which resolves to an Array of ParticipationBOs\r\n   * \r\n   * @param {Number} project_id for which the the Participations should be retrieved\r\n   * @public\r\n   */\r\n  getParticipationsByProject(project_id){\r\n    return this.#fetchAdvanced(this.#getParticipationsByProjectURL(project_id))\r\n      .then((responseJSON) => {\r\n        console.log(responseJSON)\r\n        let participationBOs = ParticipationBO.fromJSON(responseJSON);\r\n        // console.log(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(participationBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an ParticipationBOs\r\n   * \r\n   * @param {Number} project_id for which the the participations should be added to\r\n   * @public\r\n   */\r\n  addParticipationForProject(project_id) {\r\n    return this.#fetchAdvanced(this.#addParticipationsForProjectURL(project_id), {\r\n      method: 'POST'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let participationBO = ParticipationBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBO);\r\n        return new Promise(function (resolve) {\r\n          // We expect only one new participation\r\n          resolve(participationBO);\r\n        })\r\n      })\r\n  }\r\n  \r\n  /**\r\n   * Deletes the given participation and returns a Promise, which resolves to an ParticipationBO\r\n   * \r\n   * @param id to be deleted\r\n   * @public\r\n   */\r\n  deleteParticipation(id) {\r\n    return this.#fetchAdvanced(this.#deleteParticipationURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let participationBOs = ParticipationBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(participationBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  updateParticipation(participationBo){\r\n    // console.log(participationBo)\r\n    return this.#fetchAdvanced(this.#updateParticipationURL(), { \r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(participationBo)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n        let responseParticipationBo = ParticipationBO.fromJSON(responseJSON)[0];\r\n        return new Promise(function (resolve) {\r\n        resolve(responseParticipationBo);\r\n      })\r\n    })\r\n  }\r\n    // /**\r\n  //  * Returns a Promise, which resolves to an Array of ProjectBOs\r\n  //  * \r\n  //  * @param {Number} participation_id for which the the participations should be retrieved\r\n  //  * @public\r\n  //  */\r\n  // getGradingByParticipation(participation_id) {\r\n  //   console.log(participation_id)\r\n  //   // console.log(\"vor fetch in appapi\")\r\n  //   return this.#fetchAdvanced(this.#getGradingByParticipationURL(participation_id))\r\n  //     .then((responseJSON) => { \r\n  //       console.log(responseJSON)\r\n  //       // console.log(\"gefetched\")\r\n  //       let GradingBOs = GradingBO.fromJSON(responseJSON);\r\n  //       // console.log(projectBOs);\r\n  //       return new Promise(function (resolve) {\r\n  //         resolve(GradingBOs);\r\n  //       })\r\n  //     })\r\n  // }\r\n\r\n//Project related\r\n\r\n /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} person_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n  getProjectsByDozentNew(person_id) {\r\n    // console.log(person_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getProjectsByDozentNewURL(person_id))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} person_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n  getProjectsByDozentAccepted(person_id) {\r\n    // console.log(person_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getProjectsByDozentAcceptedURL(person_id))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} person_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n    getProjectsByDozentInReview(person_id) {\r\n    // console.log(person_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getProjectsByDozentInReviewURL(person_id))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} person_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n  getProjectsByDozentReviewed(person_id) {\r\n    // console.log(person_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getProjectsByDozentReviewedURL(person_id))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  \r\n\r\n  getProjectsByState(project_state) {\r\n    // console.log(project_state)\r\n    return this.#fetchAdvanced(this.#getProjectsByStateURL(project_state))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  updateProject(projectBo){\r\n    // console.log(personBO.getGoogleId())\r\n    \r\n    return this.#fetchAdvanced(this.#updateProjectURL(), {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(projectBo)\r\n      }).then((responseJSON) => { \r\n        // console.log(responseJSON)\r\n      // We always get an array of ProjectBO.fromJSON, but only need one object \r\n        let responseProjectBo = ProjectBO.fromJSON(responseJSON)[0];\r\n      // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseProjectBo);\r\n      })\r\n    })\r\n  }\r\n  getProjectsByStudent(matr_nr){\r\n    return this.#fetchAdvanced(this.#getProjectsByStudentURL(matr_nr))\r\n      .then((responseJSON) => {\r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n  \r\n\r\n  deleteProject(id) {\r\n    return this.#fetchAdvanced(this.#deleteProjectURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ProjectBO.fromJSON, but only need one object\r\n        let projectBOs = ProjectBO.fromJSON(responseJSON)[0];\r\n        // console.info(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(projectBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  //Student Relation\r\n  getStudent(id) {\r\n    return this.#fetchAdvanced(this.#getStudentURL(id))\r\n    .then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      // console.log(responseStudentBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  createStudent(student){\r\n    return this.#fetchAdvanced(this.#createStudentURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(student)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of StudentBOs.fromJSON, but only need one object\r\n        let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n        return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  getStudentByMatrikelNummer(matr_nr) {\r\n    return this.#fetchAdvanced(this.#getStudentByMatrikelNummerURL(matr_nr)).then((responseJSON) => { //URL LEER LASSEN????\r\n      // We always get an array of StudentBOs.fromJSON, but only need one object\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      console.info(responseStudentBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  getStudentByPersonId(person_id){\r\n    return this.#fetchAdvanced(this.#getStudentByPersonIdURL(person_id)).then((responseJSON) => { //URL LEER LASSEN????\r\n      // We always get an array of StudentBOs.fromJSON, but only need one object\r\n      let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseStudentBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseStudentBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  updateStudentAdmin(s) {\r\n    // console.log(gradingBO)\r\n      return this.#fetchAdvanced(this.#updateStudentAdminURL(), { \r\n        method: 'PUT',\r\n        headers: {\r\n          'Accept': 'application/json, text/plain',\r\n          'Content-type': 'application/json',\r\n        },\r\n        body: JSON.stringify(s)\r\n        }).then((responseJSON) => {\r\n        // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n          let responseStudentBO = StudentBO.fromJSON(responseJSON)[0];\r\n          return new Promise(function (resolve) {\r\n          resolve(responseStudentBO);\r\n        })\r\n      })\r\n    }\r\n\r\n  getPersonByRole(role_id){\r\n    return this.#fetchAdvanced(this.#getProfsURL(role_id)).then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responseDozentBOs = PersonBO.fromJSON(responseJSON);\r\n      // console.info(responseDozentBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseDozentBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  createProject(project){\r\n    return this.#fetchAdvanced(this.#addProjectURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(project)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n        let responseProjectBO = ProjectBO.fromJSON(responseJSON)[0];\r\n      // console.info(accountBOs);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseProjectBO);\r\n      })\r\n    })\r\n  }\r\n//Grading Related \r\n  gradingStudent(grade, participation_id) {\r\n\r\n    let g = new GradingBO();\r\n    g.setGrade(grade)\r\n    g.setParticipation(participation_id)\r\n    // console.log(g)\r\n\r\n    return this.#fetchAdvanced(this.#addGradingStudentURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(g)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of GradingBO.fromJSON, but only need one object\r\n        let responseGradingBO = GradingBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseJSON);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseGradingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Returns a Promise, which resolves to an Array of ProjectBOs\r\n   * \r\n   * @param {Number} participation_id for which the the participations should be retrieved\r\n   * @public\r\n   */\r\n  getGradingByParticipation(participation_id) {\r\n    // console.log(participation_id)\r\n    // console.log(\"vor fetch in appapi\")\r\n    return this.#fetchAdvanced(this.#getGradingByParticipationURL(participation_id))\r\n      .then((responseJSON) => { \r\n        // console.log(responseJSON)\r\n        // console.log(\"gefetched\")\r\n        let GradingBOs = GradingBO.fromJSON(responseJSON);\r\n        // console.log(projectBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(GradingBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  getGrading(id) {\r\n    // console.log(id)\r\n    return this.#fetchAdvanced(this.#getGradingURL(id))\r\n    .then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responseGradingBO =GradingBO.fromJSON(responseJSON)[0];\r\n      // console.log(responseGradingBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseGradingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n  updateGrading(gradingBO){\r\n  // console.log(gradingBO)\r\n    return this.#fetchAdvanced(this.#updateGradingURL(), { \r\n      method: 'PUT',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(gradingBO)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n        let responseGradingBO = GradingBO.fromJSON(responseJSON)[0];\r\n        return new Promise(function (resolve) {\r\n        resolve(responseGradingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n     /**\r\n   * Deletes the given Semester and returns a Promise, which resolves to an SemesterBO\r\n   * \r\n   * @param semester to be deleted\r\n   * @public\r\n   */\r\n  deleteGrading(id) {\r\n    return this.#fetchAdvanced(this.#deleteGradingURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let gradingBOs =GradingBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(gradingBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n\r\n  getGradingByProjectandMatr(project_id, matr_nr){\r\n    return this.#fetchAdvanced(this.#getGradingbyProjectAndMatrURL(project_id, matr_nr))\r\n    .then((responseJSON) => {\r\n      // We always get an array of PersonBOs.fromJSON, but only need one object\r\n      let responseGradingBO = GradingBO.fromJSON(responseJSON)[0];\r\n      // console.log(responseGradingBO);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseGradingBO);\r\n      })\r\n    })\r\n  }\r\n\r\n\r\n  //Semester Related \r\n\r\n  getSemesters(){\r\n    return this.#fetchAdvanced(this.#getSemURL()).then((responseJSON) => {\r\n      // We always get an array of SemBOs.fromJSON, but only need one object\r\n      let responseSemBOs = SemesterBO.fromJSON(responseJSON);\r\n      console.info(responseSemBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(responseSemBOs);\r\n      })\r\n    })\r\n  }\r\n\r\n  createSemester(semester) {\r\n\r\n    let s = new SemesterBO();\r\n    s.setName(semester)\r\n    // console.log(\"semester:\", s)\r\n\r\n    return this.#fetchAdvanced(this.#addSemesterURL(), {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json, text/plain',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(s)\r\n      }).then((responseJSON) => {\r\n      // We always get an array of GradingBO.fromJSON, but only need one object\r\n        let responseSemesterBO = SemesterBO.fromJSON(responseJSON)[0];\r\n      // console.info(responseJSON);\r\n        return new Promise(function (resolve) {\r\n        resolve(responseSemesterBO);\r\n      })\r\n    })\r\n  }\r\n\r\n    /**\r\n   * Deletes the given Semester and returns a Promise, which resolves to an SemesterBO\r\n   * \r\n   * @param semester to be deleted\r\n   * @public\r\n   */\r\n  deleteSemester(id) {\r\n    return this.#fetchAdvanced(this.#deleteSemesterURL(id), {\r\n      method: 'DELETE'\r\n    })\r\n      .then((responseJSON) => {\r\n        // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n        let semesterBOs = SemesterBO.fromJSON(responseJSON)[0];\r\n        // console.info(participationBOs);\r\n        return new Promise(function (resolve) {\r\n          resolve(semesterBOs);\r\n        })\r\n      })\r\n  }\r\n\r\n  updateSemster(s) {\r\n    // console.log(gradingBO)\r\n      return this.#fetchAdvanced(this.#updateSemesterURL(), { \r\n        method: 'PUT',\r\n        headers: {\r\n          'Accept': 'application/json, text/plain',\r\n          'Content-type': 'application/json',\r\n        },\r\n        body: JSON.stringify(s)\r\n        }).then((responseJSON) => {\r\n        // We always get an array of ParticipationBOs.fromJSON, but only need one object \r\n          let responseSemesterBO = SemesterBO.fromJSON(responseJSON)[0];\r\n          return new Promise(function (resolve) {\r\n          resolve(responseSemesterBO);\r\n        })\r\n      })\r\n    }\r\n  \r\n    //ProjectType related\r\n      getProjectType() {\r\n        // console.log(\"vorFetch in getPersons\")\r\n              return this.#fetchAdvanced(this.#getProjectTypeURL()).then((responseJSON) => {\r\n                let ProjectTypeBOs = ProjectTypeBO.fromJSON(responseJSON);\r\n                return new Promise(function (resolve) {\r\n                  \r\n                  resolve(ProjectTypeBOs);\r\n                })\r\n              })\r\n            }\r\n\r\n      createProjectType(aname, sws, ects) {\r\n\r\n              let p = new ProjectTypeBO();\r\n              p.setName(aname)\r\n              p.setSWS(sws)\r\n              p.setECTS(ects)\r\n              // console.log(p)\r\n      \r\n              return this.#fetchAdvanced(this.#addProjectTypeURL(), {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Accept': 'application/json, text/plain',\r\n                  'Content-type': 'application/json',\r\n                },\r\n                body: JSON.stringify(p)\r\n                }).then((responseJSON) => {\r\n                // We always get an array of PersonBOs.fromJSON, but only need one object\r\n                  let responseProjectTypeBO = ProjectTypeBO.fromJSON(responseJSON)[0];\r\n                // console.info(participationBOs);\r\n                  return new Promise(function (resolve) {\r\n                  resolve(responseProjectTypeBO);\r\n                })\r\n              })\r\n            }\r\n      deleteProjectType(id) {\r\n              return this.#fetchAdvanced(this.#deleteProjectTypeURL(id), {\r\n                method: 'DELETE'\r\n              })\r\n                .then((responseJSON) => {\r\n                  // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n                  let ProjectTypesBO = ProjectTypeBO.fromJSON(responseJSON)[0];\r\n                  // console.info(participationBOs);\r\n                  return new Promise(function (resolve) {\r\n                    resolve(ProjectTypeBO);\r\n                  })\r\n                })\r\n            }\r\n\r\n    \r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n  \r\n  \r\n //Module Related \r\n\r\n getModule(){\r\n  return this.#fetchAdvanced(this.#getModuleURL()).then((responseJSON) => {\r\n    // We always get an array of ModuleBOs.fromJSON, but only need one object\r\n    let responseModuleBOs = ModuleBO.fromJSON(responseJSON);\r\n    console.info(responseModuleBOs);\r\n    return new Promise(function (resolve) {\r\n      resolve(responseModuleBOs);\r\n    })\r\n  })\r\n}\r\n\r\n\r\n createModule(name, edv_nr) {\r\n\r\n  let m = new ModuleBO();\r\n    m.setName(name)\r\n    m.setEdv_nr(edv_nr)\r\n  // console.log(m)\r\n\r\n  return this.#fetchAdvanced(this.#addModuleURL(), {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json, text/plain',\r\n      'Content-type': 'application/json',\r\n    },\r\n    body: JSON.stringify(m)\r\n    }).then((responseJSON) => {\r\n      let responseModuleBO = ModuleBO.fromJSON(responseJSON)[0];\r\n    // console.info(responseJSON);\r\n      return new Promise(function (resolve) {\r\n      resolve(responseModuleBO);\r\n    })\r\n  })\r\n}\r\n\r\n  /**\r\n * Deletes the given Semester and returns a Promise, which resolves to an SemesterBO\r\n * \r\n * @param semester to be deleted\r\n * @public\r\n */\r\ndeleteModule(id) {\r\n  return this.#fetchAdvanced(this.#deleteModuleURL(id), {\r\n    method: 'DELETE'\r\n  })\r\n    .then((responseJSON) => {\r\n      // We always get an array of ParticipationBO.fromJSON, but only need one object\r\n      let ModuleBOs = ModuleBO.fromJSON(responseJSON)[0];\r\n      // console.info(participationBOs);\r\n      return new Promise(function (resolve) {\r\n        resolve(ModuleBOs);\r\n      })\r\n    })\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Users\\socce\\OneDrive\\Desktop\\Studium\\4. Semester\\SoftwarePraktikum\\Projekt\\SW-Praktikum-Projected\\Prochecked\\frontend\\src\\Components\\pages\\AdminView.js",["26","27","28","29","30","31","32","33","34"],{"ruleId":null,"fatal":true,"severity":2,"message":"35","line":236,"column":1},{"ruleId":"36","severity":1,"message":"37","line":2,"column":8,"nodeType":"38","messageId":"39","endLine":2,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":560,"column":3,"nodeType":"42","messageId":"43","endLine":570,"endColumn":4},{"ruleId":"40","severity":1,"message":"44","line":589,"column":3,"nodeType":"42","messageId":"43","endLine":598,"endColumn":4},{"ruleId":"40","severity":1,"message":"45","line":630,"column":3,"nodeType":"42","messageId":"43","endLine":639,"endColumn":4},{"ruleId":"36","severity":1,"message":"46","line":887,"column":23,"nodeType":"38","messageId":"39","endLine":887,"endColumn":37},{"ruleId":"36","severity":1,"message":"47","line":8,"column":3,"nodeType":"38","messageId":"39","endLine":8,"endColumn":17},{"ruleId":"36","severity":1,"message":"48","line":9,"column":3,"nodeType":"38","messageId":"39","endLine":9,"endColumn":8},{"ruleId":"36","severity":1,"message":"49","line":12,"column":3,"nodeType":"38","messageId":"39","endLine":12,"endColumn":13},{"ruleId":"36","severity":1,"message":"50","line":13,"column":3,"nodeType":"38","messageId":"39","endLine":13,"endColumn":9},{"ruleId":"36","severity":1,"message":"51","line":14,"column":3,"nodeType":"38","messageId":"39","endLine":14,"endColumn":7},{"ruleId":"36","severity":1,"message":"52","line":15,"column":3,"nodeType":"38","messageId":"39","endLine":15,"endColumn":11},{"ruleId":"36","severity":1,"message":"53","line":16,"column":3,"nodeType":"38","messageId":"39","endLine":16,"endColumn":26},{"ruleId":"36","severity":1,"message":"54","line":17,"column":3,"nodeType":"38","messageId":"39","endLine":17,"endColumn":13},{"ruleId":"36","severity":1,"message":"55","line":18,"column":3,"nodeType":"38","messageId":"39","endLine":18,"endColumn":8},"Parsing error: Unexpected token\n\n  234 |   // }\n  235 | \n> 236 | <<<<<<< HEAD\n      | ^\n  237 |             \n  238 |     ProfList(){\n  239 |         var api = AppAPI.getAPI()","no-unused-vars","'RoleBO' is defined but never used.","Identifier","unusedVar","no-dupe-class-members","Duplicate name 'getStudent'.","MethodDefinition","unexpected","Duplicate name 'getStudentByMatrikelNummer'.","Duplicate name 'getPersonByRole'.","'ProjectTypesBO' is assigned a value but never used.","'createMuiTheme' is defined but never used.","'Theme' is defined but never used.","'withStyles' is defined but never used.","'Button' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'Typography' is defined but never used.","'Input' is defined but never used."]